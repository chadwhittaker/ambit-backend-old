# import * from "./generated/prisma.graphql"

scalar DateTime 

type Query {
  userLoggedIn: User
  user(id: ID!): User
  users: [User]!
  postsGlobal: [Post]!
  postsLocal(lat: Float, lon: Float, radius: Int): [Post]!
  postsUser(id: ID!): [Post]!
  singlePost(id: ID!): Post!
  # allComments(postId: ID!, isUpdate: Boolean): [Comment!]!

  
  # singleUpdate(id: ID!): Update!
}

type Mutation {
  # user
  signup(firstName: String!, lastName: String!, email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload

  # profile
  editBio(id: ID!, data: UserUpdateInput!): User!
  editSkills(id: ID!, skills: [SkillCreateWithoutOwnerInput!]): User!

  #experience
  createExperience(owner: ID!, experience: ExperienceCreateWithoutOwnerInput!): User!
  editExperience(owner: ID!, id: ID!, experience: ExperienceUpdateInput!): User!
  deleteExperience(owner: ID!, id: ID!): User!

  # education
  createEducation(owner: ID!, education: EducationCreateWithoutOwnerInput!): User!
  editEducation(owner: ID!, id: ID!, education: EducationUpdateInput!): User!
  deleteEducation(owner: ID!, id: ID!): User!

  # post
  createPost(owner: ID!, post: PostCreateInput!): Post
  deletePost(owner: ID!, id: ID!): Education
  likePost(postId: ID!): Post!

  #update
  createUpdate(postId: ID!, update: UpdateCreateWithoutParentPostInput!): Post
  likeUpdate(updateId: ID!): Update!

  # comment
  createComment(comment: CommentCreateInput!): Comment
  likeComment(id: ID!): Comment!
  deleteComment(owner: ID!, id: ID!): Comment
}

type AuthPayload {
  token: String
  user: User
}

enum Role {
  ADMIN
  PRO
  USER
  BUSINESS
  SUSPENDED
}
