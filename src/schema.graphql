# import * from "../generated/prisma.graphql"

scalar DateTime 

type Query {
  # users
  userLoggedIn: User
  user(id: ID!): User
  users: [User]!
  allConnections: AllConnections

  # posts
  postsGlobal(after: String): PostConnection!
  postsLocal(lat: Float, lon: Float, radius: Int, after: String): PostConnection!
  postsTopic(topicID: String!, after: String): PostConnection!
  postsSearch(text: String, goal: String, topicID: String, lat: Float, lon: Float, after: String): PostConnection!
  postsUser(id: ID!): [Post]!
  singlePost(id: ID!): PostWithMatches!
  activeGoalsUser: [PostWithMatches]!
}

type Mutation {
  # user
  signup(firstName: String!, lastName: String!, email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload

  # profile
  editBio(id: ID!, data: UserUpdateInput!): User!
  editSkills(id: ID!, skills: [SkillCreateWithoutOwnerInput!]): User!
  editTopicsFocus(id: ID!, topics: [TopicWhereUniqueInput]!): User!
  editTopicsInterest(id: ID!, topics: [TopicWhereUniqueInput]!): User!
  editTopicsFreelance(id: ID!, topics: [TopicWhereUniqueInput]!): User!
  editTopicsInvest(id: ID!, topics: [TopicWhereUniqueInput]!): User!
  editTopicsMentor(id: ID!, topics: [TopicWhereUniqueInput]!): User!

  #experience
  createExperience(owner: ID!, experience: ExperienceCreateWithoutOwnerInput!): User!
  editExperience(owner: ID!, id: ID!, experience: ExperienceUpdateInput!): User!
  deleteExperience(owner: ID!, id: ID!): User!

  # education
  createEducation(owner: ID!, education: EducationCreateWithoutOwnerInput!): User!
  editEducation(owner: ID!, id: ID!, education: EducationUpdateInput!): User!
  deleteEducation(owner: ID!, id: ID!): User!

  # post
  createPost(owner: ID!, post: PostCreateInput!): Post
  deletePost(owner: ID!, id: ID!): Education
  likePost(postId: ID!): Post!

  #update
  createUpdate(postId: ID!, update: UpdateCreateWithoutParentPostInput!): Post
  likeUpdate(updateId: ID!): Update!
  deleteUpdate(owner: ID!, id: ID!): Update

  # comment
  createComment(comment: CommentCreateInput!): Comment
  likeComment(id: ID!): Comment!
  deleteComment(owner: ID!, id: ID!): Comment

  # intro
  editIntro(userId: ID!, title: String, items: [StoryItemCreateWithoutStoryInput!]): User!
}

type AuthPayload {
  token: String
  user: User
}

type Match {
  user: User!
  reason: Reason!
}

type Reason {
  text: String!
  icon: String
}

type PostWithMatches {
  post: Post
  matches: [Match]
}

type AllConnections {
  postsWithMatches: [PostWithMatches]!
  matches: [Match]
}



enum Role {
  ADMIN
  PRO
  USER
  BUSINESS
  SUSPENDED
}