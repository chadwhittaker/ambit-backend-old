scalar DateTime

enum Role {
  ADMIN
  PRO
  USER
  BUSINESS
  SUSPENDED
}

enum NotificationStyle {
  LIKE_GOAL
  LIKES_GOAL
  LIKE_POST
  LIKES_POST
  LIKE_UPDATE
  LIKES_UPDATE
  LIKE_COMMENT
  LIKES_COMMENT
  COMMENT_GOAL
  COMMENT_POST
  COMMENT_UPDATE

  LIKE_GOAL_MENTIONEDIN
  LIKES_GOAL_MENTIONEDIN
  LIKE_POST_MENTIONEDIN
  LIKES_POST_MENTIONEDIN
  LIKE_UPDATE_MENTIONEDIN
  LIKES_UPDATE_MENTIONEDIN
  LIKE_COMMENT_MENTIONEDIN
  LIKES_COMMENT_MENTIONEDIN
  COMMENT_GOAL_MENTIONEDIN
  COMMENT_POST_MENTIONEDIN
  COMMENT_UPDATE_MENTIONEDIN

  MENTIONED_IN_GOAL
  MENTIONED_IN_POST
  MENTIONED_IN_UPDATE
  MENTIONED_IN_COMMENT
}

type User {
  id: ID! @id
  createdAt: DateTime! @createdAt
  name: String!
  firstName: String!
  lastName: String!
  email: String! @unique
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: [Topic]! @relation(name: "TopicsMentorUser")
  topicsFreelance: [Topic]! @relation(name: "TopicsFreelanceUser")
  topicsInvest: [Topic]! @relation(name: "TopicsInvestUser")
  topicsAgency: [Topic]! @relation(name: "TopicsAgencyUser")
  topicsFocus: [Topic]! @relation(name: "TopicsFocusUser")
  topicsInterest: [Topic]! @relation(name: "TopicsInterestUser")
  skills: [Skill] @relation(name: "SkillsByUser" onDelete: CASCADE)
  experience: [Experience] @relation(name: "ExperiencesByUser" onDelete: CASCADE)
  education: [Education] @relation(name: "EducationByUser" onDelete: CASCADE)
  posts: [Post] @relation(name: "PostsByUser" onDelete: CASCADE)
  connections: [User] @relation(name: "MyConnections")
  following: [User] @relation(name: "ImFollowing")
  followers: [User] @relation(name: "MyFollowers")
  intro: Story @relation(name: "MyIntro")
  projects: [Story] @relation(name: "MyProjects")
  meetings: [Meeting]
  roles: [Role] @scalarList(strategy: RELATION)
  chats: [Chat]
  notifications: [Notification] @relation(name: "MyNotifications" onDelete: CASCADE)
}

type Notification {
  id: ID!
  target: User! @relation(name: "MyNotifications")
  style: NotificationStyle!
  users: [User]
  post: Post
  update: Update
  comment: Comment
  seen: Boolean! @default(value: false)
}

type Story {
  id: ID! @id
  title: String!
  items: [StoryItem!]! @relation(name: "StoryToStoryItem" onDelete: CASCADE)
}

type StoryItem {
  id: ID! @id
  story: Story! @relation(name: "StoryToStoryItem")
  type: String!
  url: String!
  link: String
  text: String
  duration: Float
}

type Skill {
  id: ID! @id
  owner: User! @relation(name: "SkillsByUser")
  skill: String!
  isExpert: Boolean! @default(value: false)
}

type Experience {
  id: ID! @id
  owner: User! @relation(name: "ExperiencesByUser")
  name: String!
  subText: String!
  startDateMonth: String!
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean @default(value: false)
}

type Education {
  id: ID! @id
  owner: User! @relation(name: "EducationByUser")
  name: String!
  subText: String!
  startDateMonth: String
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean @default(value: false)
}

type Post {
  id: ID! @id
  createdAt: DateTime! @createdAt
  lastUpdated: DateTime!
  owner: User! @relation(name: "PostsByUser")
  isGoal: Boolean! @default(value: false)
  goal: String
  subField: Topic @relation(name: "SubFieldOnPost")
  topics: [Topic] @relation(name: "TopicsOnPost")
  location: String!
  locationID: String!
  locationLat: Float!
  locationLon: Float!
  content: String!
  images: [String]! @scalarList(strategy: RELATION)
  video: String
  pitch: String
  isPrivate: Boolean! @default(value: false)
  comments: [Comment]! @relation(name: "CommentToPostRelation" onDelete: CASCADE)
  updates: [Update]! @relation(name: "UpdateToPostRelation" onDelete: CASCADE)
  likes: [String]! @scalarList(strategy: RELATION)
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
}

type Update {
  id: ID! @id
  createdAt: DateTime! @createdAt
  parentPost: Post! @relation(name: "UpdateToPostRelation")
  content: String!
  image: String
  likes: [String]! @scalarList(strategy: RELATION)
  likesCount: Int
  likedByMe: Boolean
  comments: [Comment]! @relation(name: "CommentToUpdateRelation" onDelete: CASCADE)
  commentsCount: Int
  sharesCount: Int
}

type Comment {
  id: ID! @id
  createdAt: DateTime! @createdAt
  owner: User!
  parentPost: Post @relation(name: "CommentToPostRelation")
  parentUpdate: Update @relation(name: "CommentToUpdateRelation")
  parentComment: Comment @relation(name: "CommentToCommentRelation")
  content: String
  image: String
  likes: [String]! @scalarList(strategy: RELATION)
  likesCount: Int
  likedByMe: Boolean
  comments: [Comment]! @relation(name: "CommentToCommentRelation" onDelete: CASCADE)
  commentsCount: Int
}

type Meeting {
  id: ID! @id
  createdAt: DateTime! @createdAt
  users: [User!]!
  startTime: DateTime!
  endTime: DateTime!
  place: String
}


type List {
  id: ID! @id
  listName: String! @unique
  icon: String
  mainTopics: [Topic]! @relation(name: "ListToTopicRelation" onDelete: CASCADE)
}

type Topic {
  id: ID! @id
  topicID: String! @unique
  name: String!
  parentList: List @relation(name: "ListToTopicRelation")
  parentTopic: Topic @relation(name: "TopicToTopicRelation")
  children: [Topic]! @relation(name: "TopicToTopicRelation" onDelete: CASCADE)
  icon: String
  order: Int
}

type Chat {
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  users: [User!]!
  messages: [Message] @relation(name: "MessageToChatRelation" onDelete: CASCADE)
  latestMessage: Message @relation(name: "LatestMessageToChatRelation")
}

type Message {
  id: ID! @id
  createdAt: DateTime! @createdAt
  chat: Chat! @relation(name: "MessageToChatRelation")
  from: User!
  content: String!
}

