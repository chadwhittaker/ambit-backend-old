// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  education: (where?: EducationWhereInput) => Promise<boolean>;
  experience: (where?: ExperienceWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  list: (where?: ListWhereInput) => Promise<boolean>;
  meeting: (where?: MeetingWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  skill: (where?: SkillWhereInput) => Promise<boolean>;
  story: (where?: StoryWhereInput) => Promise<boolean>;
  storyItem: (where?: StoryItemWhereInput) => Promise<boolean>;
  topic: (where?: TopicWhereInput) => Promise<boolean>;
  update: (where?: UpdateWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  education: (where: EducationWhereUniqueInput) => EducationNullablePromise;
  educations: (args?: {
    where?: EducationWhereInput;
    orderBy?: EducationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Education>;
  educationsConnection: (args?: {
    where?: EducationWhereInput;
    orderBy?: EducationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EducationConnectionPromise;
  experience: (where: ExperienceWhereUniqueInput) => ExperienceNullablePromise;
  experiences: (args?: {
    where?: ExperienceWhereInput;
    orderBy?: ExperienceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Experience>;
  experiencesConnection: (args?: {
    where?: ExperienceWhereInput;
    orderBy?: ExperienceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ExperienceConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  list: (where: ListWhereUniqueInput) => ListNullablePromise;
  lists: (args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<List>;
  listsConnection: (args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ListConnectionPromise;
  meeting: (where: MeetingWhereUniqueInput) => MeetingNullablePromise;
  meetings: (args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Meeting>;
  meetingsConnection: (args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MeetingConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  skill: (where: SkillWhereUniqueInput) => SkillNullablePromise;
  skills: (args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Skill>;
  skillsConnection: (args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SkillConnectionPromise;
  story: (where: StoryWhereUniqueInput) => StoryNullablePromise;
  stories: (args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Story>;
  storiesConnection: (args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StoryConnectionPromise;
  storyItem: (where: StoryItemWhereUniqueInput) => StoryItemNullablePromise;
  storyItems: (args?: {
    where?: StoryItemWhereInput;
    orderBy?: StoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<StoryItem>;
  storyItemsConnection: (args?: {
    where?: StoryItemWhereInput;
    orderBy?: StoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StoryItemConnectionPromise;
  topic: (where: TopicWhereUniqueInput) => TopicNullablePromise;
  topics: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Topic>;
  topicsConnection: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TopicConnectionPromise;
  update: (where: UpdateWhereUniqueInput) => UpdateNullablePromise;
  updates: (args?: {
    where?: UpdateWhereInput;
    orderBy?: UpdateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Update>;
  updatesConnection: (args?: {
    where?: UpdateWhereInput;
    orderBy?: UpdateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UpdateConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createEducation: (data: EducationCreateInput) => EducationPromise;
  updateEducation: (args: {
    data: EducationUpdateInput;
    where: EducationWhereUniqueInput;
  }) => EducationPromise;
  updateManyEducations: (args: {
    data: EducationUpdateManyMutationInput;
    where?: EducationWhereInput;
  }) => BatchPayloadPromise;
  upsertEducation: (args: {
    where: EducationWhereUniqueInput;
    create: EducationCreateInput;
    update: EducationUpdateInput;
  }) => EducationPromise;
  deleteEducation: (where: EducationWhereUniqueInput) => EducationPromise;
  deleteManyEducations: (where?: EducationWhereInput) => BatchPayloadPromise;
  createExperience: (data: ExperienceCreateInput) => ExperiencePromise;
  updateExperience: (args: {
    data: ExperienceUpdateInput;
    where: ExperienceWhereUniqueInput;
  }) => ExperiencePromise;
  updateManyExperiences: (args: {
    data: ExperienceUpdateManyMutationInput;
    where?: ExperienceWhereInput;
  }) => BatchPayloadPromise;
  upsertExperience: (args: {
    where: ExperienceWhereUniqueInput;
    create: ExperienceCreateInput;
    update: ExperienceUpdateInput;
  }) => ExperiencePromise;
  deleteExperience: (where: ExperienceWhereUniqueInput) => ExperiencePromise;
  deleteManyExperiences: (where?: ExperienceWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createList: (data: ListCreateInput) => ListPromise;
  updateList: (args: {
    data: ListUpdateInput;
    where: ListWhereUniqueInput;
  }) => ListPromise;
  updateManyLists: (args: {
    data: ListUpdateManyMutationInput;
    where?: ListWhereInput;
  }) => BatchPayloadPromise;
  upsertList: (args: {
    where: ListWhereUniqueInput;
    create: ListCreateInput;
    update: ListUpdateInput;
  }) => ListPromise;
  deleteList: (where: ListWhereUniqueInput) => ListPromise;
  deleteManyLists: (where?: ListWhereInput) => BatchPayloadPromise;
  createMeeting: (data: MeetingCreateInput) => MeetingPromise;
  updateMeeting: (args: {
    data: MeetingUpdateInput;
    where: MeetingWhereUniqueInput;
  }) => MeetingPromise;
  updateManyMeetings: (args: {
    data: MeetingUpdateManyMutationInput;
    where?: MeetingWhereInput;
  }) => BatchPayloadPromise;
  upsertMeeting: (args: {
    where: MeetingWhereUniqueInput;
    create: MeetingCreateInput;
    update: MeetingUpdateInput;
  }) => MeetingPromise;
  deleteMeeting: (where: MeetingWhereUniqueInput) => MeetingPromise;
  deleteManyMeetings: (where?: MeetingWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createSkill: (data: SkillCreateInput) => SkillPromise;
  updateSkill: (args: {
    data: SkillUpdateInput;
    where: SkillWhereUniqueInput;
  }) => SkillPromise;
  updateManySkills: (args: {
    data: SkillUpdateManyMutationInput;
    where?: SkillWhereInput;
  }) => BatchPayloadPromise;
  upsertSkill: (args: {
    where: SkillWhereUniqueInput;
    create: SkillCreateInput;
    update: SkillUpdateInput;
  }) => SkillPromise;
  deleteSkill: (where: SkillWhereUniqueInput) => SkillPromise;
  deleteManySkills: (where?: SkillWhereInput) => BatchPayloadPromise;
  createStory: (data: StoryCreateInput) => StoryPromise;
  updateStory: (args: {
    data: StoryUpdateInput;
    where: StoryWhereUniqueInput;
  }) => StoryPromise;
  updateManyStories: (args: {
    data: StoryUpdateManyMutationInput;
    where?: StoryWhereInput;
  }) => BatchPayloadPromise;
  upsertStory: (args: {
    where: StoryWhereUniqueInput;
    create: StoryCreateInput;
    update: StoryUpdateInput;
  }) => StoryPromise;
  deleteStory: (where: StoryWhereUniqueInput) => StoryPromise;
  deleteManyStories: (where?: StoryWhereInput) => BatchPayloadPromise;
  createStoryItem: (data: StoryItemCreateInput) => StoryItemPromise;
  updateStoryItem: (args: {
    data: StoryItemUpdateInput;
    where: StoryItemWhereUniqueInput;
  }) => StoryItemPromise;
  updateManyStoryItems: (args: {
    data: StoryItemUpdateManyMutationInput;
    where?: StoryItemWhereInput;
  }) => BatchPayloadPromise;
  upsertStoryItem: (args: {
    where: StoryItemWhereUniqueInput;
    create: StoryItemCreateInput;
    update: StoryItemUpdateInput;
  }) => StoryItemPromise;
  deleteStoryItem: (where: StoryItemWhereUniqueInput) => StoryItemPromise;
  deleteManyStoryItems: (where?: StoryItemWhereInput) => BatchPayloadPromise;
  createTopic: (data: TopicCreateInput) => TopicPromise;
  updateTopic: (args: {
    data: TopicUpdateInput;
    where: TopicWhereUniqueInput;
  }) => TopicPromise;
  updateManyTopics: (args: {
    data: TopicUpdateManyMutationInput;
    where?: TopicWhereInput;
  }) => BatchPayloadPromise;
  upsertTopic: (args: {
    where: TopicWhereUniqueInput;
    create: TopicCreateInput;
    update: TopicUpdateInput;
  }) => TopicPromise;
  deleteTopic: (where: TopicWhereUniqueInput) => TopicPromise;
  deleteManyTopics: (where?: TopicWhereInput) => BatchPayloadPromise;
  createUpdate: (data: UpdateCreateInput) => UpdatePromise;
  updateUpdate: (args: {
    data: UpdateUpdateInput;
    where: UpdateWhereUniqueInput;
  }) => UpdatePromise;
  updateManyUpdates: (args: {
    data: UpdateUpdateManyMutationInput;
    where?: UpdateWhereInput;
  }) => BatchPayloadPromise;
  upsertUpdate: (args: {
    where: UpdateWhereUniqueInput;
    create: UpdateCreateInput;
    update: UpdateUpdateInput;
  }) => UpdatePromise;
  deleteUpdate: (where: UpdateWhereUniqueInput) => UpdatePromise;
  deleteManyUpdates: (where?: UpdateWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  education: (
    where?: EducationSubscriptionWhereInput
  ) => EducationSubscriptionPayloadSubscription;
  experience: (
    where?: ExperienceSubscriptionWhereInput
  ) => ExperienceSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  list: (
    where?: ListSubscriptionWhereInput
  ) => ListSubscriptionPayloadSubscription;
  meeting: (
    where?: MeetingSubscriptionWhereInput
  ) => MeetingSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  skill: (
    where?: SkillSubscriptionWhereInput
  ) => SkillSubscriptionPayloadSubscription;
  story: (
    where?: StorySubscriptionWhereInput
  ) => StorySubscriptionPayloadSubscription;
  storyItem: (
    where?: StoryItemSubscriptionWhereInput
  ) => StoryItemSubscriptionPayloadSubscription;
  topic: (
    where?: TopicSubscriptionWhereInput
  ) => TopicSubscriptionPayloadSubscription;
  update: (
    where?: UpdateSubscriptionWhereInput
  ) => UpdateSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "profilePic_ASC"
  | "profilePic_DESC"
  | "bannerPic_ASC"
  | "bannerPic_DESC"
  | "location_ASC"
  | "location_DESC"
  | "locationID_ASC"
  | "locationID_DESC"
  | "locationLat_ASC"
  | "locationLat_DESC"
  | "locationLon_ASC"
  | "locationLon_DESC"
  | "headline_ASC"
  | "headline_DESC"
  | "website_ASC"
  | "website_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "about_ASC"
  | "about_DESC"
  | "connectionsCount_ASC"
  | "connectionsCount_DESC"
  | "followingCount_ASC"
  | "followingCount_DESC"
  | "followersCount_ASC"
  | "followersCount_DESC"
  | "unReadMessagesCount_ASC"
  | "unReadMessagesCount_DESC";

export type NotificationStyle =
  | "LIKE_GOAL"
  | "LIKES_GOAL"
  | "LIKE_POST"
  | "LIKES_POST"
  | "LIKE_UPDATE"
  | "LIKES_UPDATE"
  | "LIKE_COMMENT"
  | "LIKES_COMMENT"
  | "COMMENT_GOAL"
  | "COMMENT_POST"
  | "COMMENT_UPDATE"
  | "COMMENT_COMMENT"
  | "LIKE_GOAL_MENTIONEDIN"
  | "LIKES_GOAL_MENTIONEDIN"
  | "LIKE_POST_MENTIONEDIN"
  | "LIKES_POST_MENTIONEDIN"
  | "LIKE_UPDATE_MENTIONEDIN"
  | "LIKES_UPDATE_MENTIONEDIN"
  | "LIKE_COMMENT_MENTIONEDIN"
  | "LIKES_COMMENT_MENTIONEDIN"
  | "COMMENT_GOAL_MENTIONEDIN"
  | "COMMENT_POST_MENTIONEDIN"
  | "COMMENT_UPDATE_MENTIONEDIN"
  | "MENTIONED_IN_GOAL"
  | "MENTIONED_IN_POST"
  | "MENTIONED_IN_UPDATE"
  | "MENTIONED_IN_COMMENT";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "style_ASC"
  | "style_DESC"
  | "seen_ASC"
  | "seen_DESC";

export type ListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "listName_ASC"
  | "listName_DESC"
  | "icon_ASC"
  | "icon_DESC";

export type UpdateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "content_ASC"
  | "content_DESC"
  | "image_ASC"
  | "image_DESC"
  | "likesCount_ASC"
  | "likesCount_DESC"
  | "likedByMe_ASC"
  | "likedByMe_DESC"
  | "commentsCount_ASC"
  | "commentsCount_DESC"
  | "sharesCount_ASC"
  | "sharesCount_DESC"
  | "_deleted_ASC"
  | "_deleted_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "content_ASC"
  | "content_DESC"
  | "image_ASC"
  | "image_DESC"
  | "likesCount_ASC"
  | "likesCount_DESC"
  | "likedByMe_ASC"
  | "likedByMe_DESC"
  | "commentsCount_ASC"
  | "commentsCount_DESC"
  | "_deleted_ASC"
  | "_deleted_DESC";

export type MeetingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "place_ASC"
  | "place_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "lastUpdated_ASC"
  | "lastUpdated_DESC"
  | "isGoal_ASC"
  | "isGoal_DESC"
  | "goal_ASC"
  | "goal_DESC"
  | "goalStatus_ASC"
  | "goalStatus_DESC"
  | "location_ASC"
  | "location_DESC"
  | "locationID_ASC"
  | "locationID_DESC"
  | "locationLat_ASC"
  | "locationLat_DESC"
  | "locationLon_ASC"
  | "locationLon_DESC"
  | "content_ASC"
  | "content_DESC"
  | "video_ASC"
  | "video_DESC"
  | "pitch_ASC"
  | "pitch_DESC"
  | "likesCount_ASC"
  | "likesCount_DESC"
  | "likedByMe_ASC"
  | "likedByMe_DESC"
  | "commentsCount_ASC"
  | "commentsCount_DESC"
  | "sharesCount_ASC"
  | "sharesCount_DESC"
  | "_deleted_ASC"
  | "_deleted_DESC";

export type StoryItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC"
  | "preview_ASC"
  | "preview_DESC"
  | "link_ASC"
  | "link_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "inProject_ASC"
  | "inProject_DESC"
  | "likesCount_ASC"
  | "likesCount_DESC"
  | "likedByMe_ASC"
  | "likedByMe_DESC";

export type EducationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "subText_ASC"
  | "subText_DESC"
  | "startDateMonth_ASC"
  | "startDateMonth_DESC"
  | "startDateYear_ASC"
  | "startDateYear_DESC"
  | "endDateMonth_ASC"
  | "endDateMonth_DESC"
  | "endDateYear_ASC"
  | "endDateYear_DESC"
  | "location_ASC"
  | "location_DESC"
  | "locationID_ASC"
  | "locationID_DESC"
  | "locationLat_ASC"
  | "locationLat_DESC"
  | "locationLon_ASC"
  | "locationLon_DESC"
  | "currentRole_ASC"
  | "currentRole_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type StoryType = "INTRO" | "MYSTORY" | "PROJECT" | "SOLO";

export type StoryItemType = "IMAGE" | "VIDEO";

export type SkillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "skill_ASC"
  | "skill_DESC"
  | "isExpert_ASC"
  | "isExpert_DESC";

export type ExperienceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "subText_ASC"
  | "subText_DESC"
  | "startDateMonth_ASC"
  | "startDateMonth_DESC"
  | "startDateYear_ASC"
  | "startDateYear_DESC"
  | "endDateMonth_ASC"
  | "endDateMonth_DESC"
  | "endDateYear_ASC"
  | "endDateYear_DESC"
  | "location_ASC"
  | "location_DESC"
  | "locationID_ASC"
  | "locationID_DESC"
  | "locationLat_ASC"
  | "locationLat_DESC"
  | "locationLon_ASC"
  | "locationLon_DESC"
  | "currentRole_ASC"
  | "currentRole_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "content_ASC"
  | "content_DESC";

export type TopicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "topicID_ASC"
  | "topicID_DESC"
  | "name_ASC"
  | "name_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "color_ASC"
  | "color_DESC"
  | "image_ASC"
  | "image_DESC"
  | "order_ASC"
  | "order_DESC";

export type StoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "type_ASC"
  | "type_DESC"
  | "preview_ASC"
  | "preview_DESC"
  | "showcase_ASC"
  | "showcase_DESC"
  | "save_ASC"
  | "save_DESC";

export type Role = "ADMIN" | "PRO" | "USER" | "BUSINESS" | "SUSPENDED";

export interface UserUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface StoryUpdateDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutStoriesInput>;
  title?: Maybe<String>;
  type?: Maybe<StoryType>;
  topics?: Maybe<TopicUpdateManyInput>;
  items?: Maybe<StoryItemUpdateManyWithoutStoriesInput>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  target?: Maybe<UserWhereInput>;
  style?: Maybe<NotificationStyle>;
  style_not?: Maybe<NotificationStyle>;
  style_in?: Maybe<NotificationStyle[] | NotificationStyle>;
  style_not_in?: Maybe<NotificationStyle[] | NotificationStyle>;
  user?: Maybe<UserWhereInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  update?: Maybe<UpdateWhereInput>;
  comment?: Maybe<CommentWhereInput>;
  seen?: Maybe<Boolean>;
  seen_not?: Maybe<Boolean>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface UserUpdateOneRequiredWithoutStoriesInput {
  create?: Maybe<UserCreateWithoutStoriesInput>;
  update?: Maybe<UserUpdateWithoutStoriesDataInput>;
  upsert?: Maybe<UserUpsertWithoutStoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UpdateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  parentPost?: Maybe<PostWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  likesCount?: Maybe<Int>;
  likesCount_not?: Maybe<Int>;
  likesCount_in?: Maybe<Int[] | Int>;
  likesCount_not_in?: Maybe<Int[] | Int>;
  likesCount_lt?: Maybe<Int>;
  likesCount_lte?: Maybe<Int>;
  likesCount_gt?: Maybe<Int>;
  likesCount_gte?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  likedByMe_not?: Maybe<Boolean>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  commentsCount?: Maybe<Int>;
  commentsCount_not?: Maybe<Int>;
  commentsCount_in?: Maybe<Int[] | Int>;
  commentsCount_not_in?: Maybe<Int[] | Int>;
  commentsCount_lt?: Maybe<Int>;
  commentsCount_lte?: Maybe<Int>;
  commentsCount_gt?: Maybe<Int>;
  commentsCount_gte?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  sharesCount_not?: Maybe<Int>;
  sharesCount_in?: Maybe<Int[] | Int>;
  sharesCount_not_in?: Maybe<Int[] | Int>;
  sharesCount_lt?: Maybe<Int>;
  sharesCount_lte?: Maybe<Int>;
  sharesCount_gt?: Maybe<Int>;
  sharesCount_gte?: Maybe<Int>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  _deleted?: Maybe<Boolean>;
  _deleted_not?: Maybe<Boolean>;
  AND?: Maybe<UpdateWhereInput[] | UpdateWhereInput>;
  OR?: Maybe<UpdateWhereInput[] | UpdateWhereInput>;
  NOT?: Maybe<UpdateWhereInput[] | UpdateWhereInput>;
}

export interface UserUpdateWithoutStoriesDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  parentPost?: Maybe<PostWhereInput>;
  parentUpdate?: Maybe<UpdateWhereInput>;
  parentComment?: Maybe<CommentWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  likesCount?: Maybe<Int>;
  likesCount_not?: Maybe<Int>;
  likesCount_in?: Maybe<Int[] | Int>;
  likesCount_not_in?: Maybe<Int[] | Int>;
  likesCount_lt?: Maybe<Int>;
  likesCount_lte?: Maybe<Int>;
  likesCount_gt?: Maybe<Int>;
  likesCount_gte?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  likedByMe_not?: Maybe<Boolean>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  commentsCount?: Maybe<Int>;
  commentsCount_not?: Maybe<Int>;
  commentsCount_in?: Maybe<Int[] | Int>;
  commentsCount_not_in?: Maybe<Int[] | Int>;
  commentsCount_lt?: Maybe<Int>;
  commentsCount_lte?: Maybe<Int>;
  commentsCount_gt?: Maybe<Int>;
  commentsCount_gte?: Maybe<Int>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  _deleted?: Maybe<Boolean>;
  _deleted_not?: Maybe<Boolean>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface MeetingUpdateManyWithoutUsersInput {
  create?: Maybe<
    MeetingCreateWithoutUsersInput[] | MeetingCreateWithoutUsersInput
  >;
  delete?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  connect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  set?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  disconnect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  update?: Maybe<
    | MeetingUpdateWithWhereUniqueWithoutUsersInput[]
    | MeetingUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | MeetingUpsertWithWhereUniqueWithoutUsersInput[]
    | MeetingUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  updateMany?: Maybe<
    | MeetingUpdateManyWithWhereNestedInput[]
    | MeetingUpdateManyWithWhereNestedInput
  >;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  latestMessage?: Maybe<MessageWhereInput>;
  hidden_every?: Maybe<UserWhereInput>;
  hidden_some?: Maybe<UserWhereInput>;
  hidden_none?: Maybe<UserWhereInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface MeetingUpdateWithWhereUniqueWithoutUsersInput {
  where: MeetingWhereUniqueInput;
  data: MeetingUpdateWithoutUsersDataInput;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastUpdated?: Maybe<DateTimeInput>;
  lastUpdated_not?: Maybe<DateTimeInput>;
  lastUpdated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_lt?: Maybe<DateTimeInput>;
  lastUpdated_lte?: Maybe<DateTimeInput>;
  lastUpdated_gt?: Maybe<DateTimeInput>;
  lastUpdated_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  isGoal?: Maybe<Boolean>;
  isGoal_not?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goal_not?: Maybe<String>;
  goal_in?: Maybe<String[] | String>;
  goal_not_in?: Maybe<String[] | String>;
  goal_lt?: Maybe<String>;
  goal_lte?: Maybe<String>;
  goal_gt?: Maybe<String>;
  goal_gte?: Maybe<String>;
  goal_contains?: Maybe<String>;
  goal_not_contains?: Maybe<String>;
  goal_starts_with?: Maybe<String>;
  goal_not_starts_with?: Maybe<String>;
  goal_ends_with?: Maybe<String>;
  goal_not_ends_with?: Maybe<String>;
  goalStatus?: Maybe<String>;
  goalStatus_not?: Maybe<String>;
  goalStatus_in?: Maybe<String[] | String>;
  goalStatus_not_in?: Maybe<String[] | String>;
  goalStatus_lt?: Maybe<String>;
  goalStatus_lte?: Maybe<String>;
  goalStatus_gt?: Maybe<String>;
  goalStatus_gte?: Maybe<String>;
  goalStatus_contains?: Maybe<String>;
  goalStatus_not_contains?: Maybe<String>;
  goalStatus_starts_with?: Maybe<String>;
  goalStatus_not_starts_with?: Maybe<String>;
  goalStatus_ends_with?: Maybe<String>;
  goalStatus_not_ends_with?: Maybe<String>;
  subField?: Maybe<TopicWhereInput>;
  topics_every?: Maybe<TopicWhereInput>;
  topics_some?: Maybe<TopicWhereInput>;
  topics_none?: Maybe<TopicWhereInput>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  locationID?: Maybe<String>;
  locationID_not?: Maybe<String>;
  locationID_in?: Maybe<String[] | String>;
  locationID_not_in?: Maybe<String[] | String>;
  locationID_lt?: Maybe<String>;
  locationID_lte?: Maybe<String>;
  locationID_gt?: Maybe<String>;
  locationID_gte?: Maybe<String>;
  locationID_contains?: Maybe<String>;
  locationID_not_contains?: Maybe<String>;
  locationID_starts_with?: Maybe<String>;
  locationID_not_starts_with?: Maybe<String>;
  locationID_ends_with?: Maybe<String>;
  locationID_not_ends_with?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLat_not?: Maybe<Float>;
  locationLat_in?: Maybe<Float[] | Float>;
  locationLat_not_in?: Maybe<Float[] | Float>;
  locationLat_lt?: Maybe<Float>;
  locationLat_lte?: Maybe<Float>;
  locationLat_gt?: Maybe<Float>;
  locationLat_gte?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  locationLon_not?: Maybe<Float>;
  locationLon_in?: Maybe<Float[] | Float>;
  locationLon_not_in?: Maybe<Float[] | Float>;
  locationLon_lt?: Maybe<Float>;
  locationLon_lte?: Maybe<Float>;
  locationLon_gt?: Maybe<Float>;
  locationLon_gte?: Maybe<Float>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  video?: Maybe<String>;
  video_not?: Maybe<String>;
  video_in?: Maybe<String[] | String>;
  video_not_in?: Maybe<String[] | String>;
  video_lt?: Maybe<String>;
  video_lte?: Maybe<String>;
  video_gt?: Maybe<String>;
  video_gte?: Maybe<String>;
  video_contains?: Maybe<String>;
  video_not_contains?: Maybe<String>;
  video_starts_with?: Maybe<String>;
  video_not_starts_with?: Maybe<String>;
  video_ends_with?: Maybe<String>;
  video_not_ends_with?: Maybe<String>;
  pitch?: Maybe<String>;
  pitch_not?: Maybe<String>;
  pitch_in?: Maybe<String[] | String>;
  pitch_not_in?: Maybe<String[] | String>;
  pitch_lt?: Maybe<String>;
  pitch_lte?: Maybe<String>;
  pitch_gt?: Maybe<String>;
  pitch_gte?: Maybe<String>;
  pitch_contains?: Maybe<String>;
  pitch_not_contains?: Maybe<String>;
  pitch_starts_with?: Maybe<String>;
  pitch_not_starts_with?: Maybe<String>;
  pitch_ends_with?: Maybe<String>;
  pitch_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  updates_every?: Maybe<UpdateWhereInput>;
  updates_some?: Maybe<UpdateWhereInput>;
  updates_none?: Maybe<UpdateWhereInput>;
  likesCount?: Maybe<Int>;
  likesCount_not?: Maybe<Int>;
  likesCount_in?: Maybe<Int[] | Int>;
  likesCount_not_in?: Maybe<Int[] | Int>;
  likesCount_lt?: Maybe<Int>;
  likesCount_lte?: Maybe<Int>;
  likesCount_gt?: Maybe<Int>;
  likesCount_gte?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  likedByMe_not?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  commentsCount_not?: Maybe<Int>;
  commentsCount_in?: Maybe<Int[] | Int>;
  commentsCount_not_in?: Maybe<Int[] | Int>;
  commentsCount_lt?: Maybe<Int>;
  commentsCount_lte?: Maybe<Int>;
  commentsCount_gt?: Maybe<Int>;
  commentsCount_gte?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  sharesCount_not?: Maybe<Int>;
  sharesCount_in?: Maybe<Int[] | Int>;
  sharesCount_not_in?: Maybe<Int[] | Int>;
  sharesCount_lt?: Maybe<Int>;
  sharesCount_lte?: Maybe<Int>;
  sharesCount_gt?: Maybe<Int>;
  sharesCount_gte?: Maybe<Int>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  _deleted?: Maybe<Boolean>;
  _deleted_not?: Maybe<Boolean>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface MeetingUpdateWithoutUsersDataInput {
  startTime?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
}

export interface EducationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subText?: Maybe<String>;
  subText_not?: Maybe<String>;
  subText_in?: Maybe<String[] | String>;
  subText_not_in?: Maybe<String[] | String>;
  subText_lt?: Maybe<String>;
  subText_lte?: Maybe<String>;
  subText_gt?: Maybe<String>;
  subText_gte?: Maybe<String>;
  subText_contains?: Maybe<String>;
  subText_not_contains?: Maybe<String>;
  subText_starts_with?: Maybe<String>;
  subText_not_starts_with?: Maybe<String>;
  subText_ends_with?: Maybe<String>;
  subText_not_ends_with?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateMonth_not?: Maybe<String>;
  startDateMonth_in?: Maybe<String[] | String>;
  startDateMonth_not_in?: Maybe<String[] | String>;
  startDateMonth_lt?: Maybe<String>;
  startDateMonth_lte?: Maybe<String>;
  startDateMonth_gt?: Maybe<String>;
  startDateMonth_gte?: Maybe<String>;
  startDateMonth_contains?: Maybe<String>;
  startDateMonth_not_contains?: Maybe<String>;
  startDateMonth_starts_with?: Maybe<String>;
  startDateMonth_not_starts_with?: Maybe<String>;
  startDateMonth_ends_with?: Maybe<String>;
  startDateMonth_not_ends_with?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  startDateYear_not?: Maybe<Int>;
  startDateYear_in?: Maybe<Int[] | Int>;
  startDateYear_not_in?: Maybe<Int[] | Int>;
  startDateYear_lt?: Maybe<Int>;
  startDateYear_lte?: Maybe<Int>;
  startDateYear_gt?: Maybe<Int>;
  startDateYear_gte?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateMonth_not?: Maybe<String>;
  endDateMonth_in?: Maybe<String[] | String>;
  endDateMonth_not_in?: Maybe<String[] | String>;
  endDateMonth_lt?: Maybe<String>;
  endDateMonth_lte?: Maybe<String>;
  endDateMonth_gt?: Maybe<String>;
  endDateMonth_gte?: Maybe<String>;
  endDateMonth_contains?: Maybe<String>;
  endDateMonth_not_contains?: Maybe<String>;
  endDateMonth_starts_with?: Maybe<String>;
  endDateMonth_not_starts_with?: Maybe<String>;
  endDateMonth_ends_with?: Maybe<String>;
  endDateMonth_not_ends_with?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  endDateYear_not?: Maybe<Int>;
  endDateYear_in?: Maybe<Int[] | Int>;
  endDateYear_not_in?: Maybe<Int[] | Int>;
  endDateYear_lt?: Maybe<Int>;
  endDateYear_lte?: Maybe<Int>;
  endDateYear_gt?: Maybe<Int>;
  endDateYear_gte?: Maybe<Int>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  locationID?: Maybe<String>;
  locationID_not?: Maybe<String>;
  locationID_in?: Maybe<String[] | String>;
  locationID_not_in?: Maybe<String[] | String>;
  locationID_lt?: Maybe<String>;
  locationID_lte?: Maybe<String>;
  locationID_gt?: Maybe<String>;
  locationID_gte?: Maybe<String>;
  locationID_contains?: Maybe<String>;
  locationID_not_contains?: Maybe<String>;
  locationID_starts_with?: Maybe<String>;
  locationID_not_starts_with?: Maybe<String>;
  locationID_ends_with?: Maybe<String>;
  locationID_not_ends_with?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLat_not?: Maybe<Float>;
  locationLat_in?: Maybe<Float[] | Float>;
  locationLat_not_in?: Maybe<Float[] | Float>;
  locationLat_lt?: Maybe<Float>;
  locationLat_lte?: Maybe<Float>;
  locationLat_gt?: Maybe<Float>;
  locationLat_gte?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  locationLon_not?: Maybe<Float>;
  locationLon_in?: Maybe<Float[] | Float>;
  locationLon_not_in?: Maybe<Float[] | Float>;
  locationLon_lt?: Maybe<Float>;
  locationLon_lte?: Maybe<Float>;
  locationLon_gt?: Maybe<Float>;
  locationLon_gte?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
  currentRole_not?: Maybe<Boolean>;
  AND?: Maybe<EducationWhereInput[] | EducationWhereInput>;
  OR?: Maybe<EducationWhereInput[] | EducationWhereInput>;
  NOT?: Maybe<EducationWhereInput[] | EducationWhereInput>;
}

export interface SkillUpsertWithWhereUniqueWithoutOwnerInput {
  where: SkillWhereUniqueInput;
  update: SkillUpdateWithoutOwnerDataInput;
  create: SkillCreateWithoutOwnerInput;
}

export interface GroupUpdateInput {
  users?: Maybe<UserUpdateManyWithoutGroupsInput>;
  messages?: Maybe<MessageUpdateManyWithoutToInput>;
  latestMessage?: Maybe<MessageUpdateOneInput>;
  hidden?: Maybe<UserUpdateManyInput>;
}

export interface SkillScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  skill?: Maybe<String>;
  skill_not?: Maybe<String>;
  skill_in?: Maybe<String[] | String>;
  skill_not_in?: Maybe<String[] | String>;
  skill_lt?: Maybe<String>;
  skill_lte?: Maybe<String>;
  skill_gt?: Maybe<String>;
  skill_gte?: Maybe<String>;
  skill_contains?: Maybe<String>;
  skill_not_contains?: Maybe<String>;
  skill_starts_with?: Maybe<String>;
  skill_not_starts_with?: Maybe<String>;
  skill_ends_with?: Maybe<String>;
  skill_not_ends_with?: Maybe<String>;
  isExpert?: Maybe<Boolean>;
  isExpert_not?: Maybe<Boolean>;
  AND?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
  OR?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
  NOT?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
}

export interface MeetingUpsertWithWhereUniqueWithoutUsersInput {
  where: MeetingWhereUniqueInput;
  update: MeetingUpdateWithoutUsersDataInput;
  create: MeetingCreateWithoutUsersInput;
}

export interface SkillUpdateManyWithWhereNestedInput {
  where: SkillScalarWhereInput;
  data: SkillUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface SkillUpdateManyDataInput {
  skill?: Maybe<String>;
  isExpert?: Maybe<Boolean>;
}

export interface SkillWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  skill?: Maybe<String>;
  skill_not?: Maybe<String>;
  skill_in?: Maybe<String[] | String>;
  skill_not_in?: Maybe<String[] | String>;
  skill_lt?: Maybe<String>;
  skill_lte?: Maybe<String>;
  skill_gt?: Maybe<String>;
  skill_gte?: Maybe<String>;
  skill_contains?: Maybe<String>;
  skill_not_contains?: Maybe<String>;
  skill_starts_with?: Maybe<String>;
  skill_not_starts_with?: Maybe<String>;
  skill_ends_with?: Maybe<String>;
  skill_not_ends_with?: Maybe<String>;
  isExpert?: Maybe<Boolean>;
  isExpert_not?: Maybe<Boolean>;
  AND?: Maybe<SkillWhereInput[] | SkillWhereInput>;
  OR?: Maybe<SkillWhereInput[] | SkillWhereInput>;
  NOT?: Maybe<SkillWhereInput[] | SkillWhereInput>;
}

export interface ExperienceUpdateManyWithoutOwnerInput {
  create?: Maybe<
    ExperienceCreateWithoutOwnerInput[] | ExperienceCreateWithoutOwnerInput
  >;
  delete?: Maybe<ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput>;
  connect?: Maybe<ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput>;
  set?: Maybe<ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput>;
  disconnect?: Maybe<ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput>;
  update?: Maybe<
    | ExperienceUpdateWithWhereUniqueWithoutOwnerInput[]
    | ExperienceUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ExperienceUpsertWithWhereUniqueWithoutOwnerInput[]
    | ExperienceUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<ExperienceScalarWhereInput[] | ExperienceScalarWhereInput>;
  updateMany?: Maybe<
    | ExperienceUpdateManyWithWhereNestedInput[]
    | ExperienceUpdateManyWithWhereNestedInput
  >;
}

export interface TopicSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TopicWhereInput>;
  AND?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
  OR?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
  NOT?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
}

export interface ExperienceUpdateWithWhereUniqueWithoutOwnerInput {
  where: ExperienceWhereUniqueInput;
  data: ExperienceUpdateWithoutOwnerDataInput;
}

export interface StorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StoryWhereInput>;
  AND?: Maybe<StorySubscriptionWhereInput[] | StorySubscriptionWhereInput>;
  OR?: Maybe<StorySubscriptionWhereInput[] | StorySubscriptionWhereInput>;
  NOT?: Maybe<StorySubscriptionWhereInput[] | StorySubscriptionWhereInput>;
}

export interface ExperienceUpdateWithoutOwnerDataInput {
  name?: Maybe<String>;
  subText?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface ExperienceUpsertWithWhereUniqueWithoutOwnerInput {
  where: ExperienceWhereUniqueInput;
  update: ExperienceUpdateWithoutOwnerDataInput;
  create: ExperienceCreateWithoutOwnerInput;
}

export interface ListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  listName?: Maybe<String>;
  listName_not?: Maybe<String>;
  listName_in?: Maybe<String[] | String>;
  listName_not_in?: Maybe<String[] | String>;
  listName_lt?: Maybe<String>;
  listName_lte?: Maybe<String>;
  listName_gt?: Maybe<String>;
  listName_gte?: Maybe<String>;
  listName_contains?: Maybe<String>;
  listName_not_contains?: Maybe<String>;
  listName_starts_with?: Maybe<String>;
  listName_not_starts_with?: Maybe<String>;
  listName_ends_with?: Maybe<String>;
  listName_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  mainTopics_every?: Maybe<TopicWhereInput>;
  mainTopics_some?: Maybe<TopicWhereInput>;
  mainTopics_none?: Maybe<TopicWhereInput>;
  AND?: Maybe<ListWhereInput[] | ListWhereInput>;
  OR?: Maybe<ListWhereInput[] | ListWhereInput>;
  NOT?: Maybe<ListWhereInput[] | ListWhereInput>;
}

export interface ExperienceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subText?: Maybe<String>;
  subText_not?: Maybe<String>;
  subText_in?: Maybe<String[] | String>;
  subText_not_in?: Maybe<String[] | String>;
  subText_lt?: Maybe<String>;
  subText_lte?: Maybe<String>;
  subText_gt?: Maybe<String>;
  subText_gte?: Maybe<String>;
  subText_contains?: Maybe<String>;
  subText_not_contains?: Maybe<String>;
  subText_starts_with?: Maybe<String>;
  subText_not_starts_with?: Maybe<String>;
  subText_ends_with?: Maybe<String>;
  subText_not_ends_with?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateMonth_not?: Maybe<String>;
  startDateMonth_in?: Maybe<String[] | String>;
  startDateMonth_not_in?: Maybe<String[] | String>;
  startDateMonth_lt?: Maybe<String>;
  startDateMonth_lte?: Maybe<String>;
  startDateMonth_gt?: Maybe<String>;
  startDateMonth_gte?: Maybe<String>;
  startDateMonth_contains?: Maybe<String>;
  startDateMonth_not_contains?: Maybe<String>;
  startDateMonth_starts_with?: Maybe<String>;
  startDateMonth_not_starts_with?: Maybe<String>;
  startDateMonth_ends_with?: Maybe<String>;
  startDateMonth_not_ends_with?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  startDateYear_not?: Maybe<Int>;
  startDateYear_in?: Maybe<Int[] | Int>;
  startDateYear_not_in?: Maybe<Int[] | Int>;
  startDateYear_lt?: Maybe<Int>;
  startDateYear_lte?: Maybe<Int>;
  startDateYear_gt?: Maybe<Int>;
  startDateYear_gte?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateMonth_not?: Maybe<String>;
  endDateMonth_in?: Maybe<String[] | String>;
  endDateMonth_not_in?: Maybe<String[] | String>;
  endDateMonth_lt?: Maybe<String>;
  endDateMonth_lte?: Maybe<String>;
  endDateMonth_gt?: Maybe<String>;
  endDateMonth_gte?: Maybe<String>;
  endDateMonth_contains?: Maybe<String>;
  endDateMonth_not_contains?: Maybe<String>;
  endDateMonth_starts_with?: Maybe<String>;
  endDateMonth_not_starts_with?: Maybe<String>;
  endDateMonth_ends_with?: Maybe<String>;
  endDateMonth_not_ends_with?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  endDateYear_not?: Maybe<Int>;
  endDateYear_in?: Maybe<Int[] | Int>;
  endDateYear_not_in?: Maybe<Int[] | Int>;
  endDateYear_lt?: Maybe<Int>;
  endDateYear_lte?: Maybe<Int>;
  endDateYear_gt?: Maybe<Int>;
  endDateYear_gte?: Maybe<Int>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  locationID?: Maybe<String>;
  locationID_not?: Maybe<String>;
  locationID_in?: Maybe<String[] | String>;
  locationID_not_in?: Maybe<String[] | String>;
  locationID_lt?: Maybe<String>;
  locationID_lte?: Maybe<String>;
  locationID_gt?: Maybe<String>;
  locationID_gte?: Maybe<String>;
  locationID_contains?: Maybe<String>;
  locationID_not_contains?: Maybe<String>;
  locationID_starts_with?: Maybe<String>;
  locationID_not_starts_with?: Maybe<String>;
  locationID_ends_with?: Maybe<String>;
  locationID_not_ends_with?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLat_not?: Maybe<Float>;
  locationLat_in?: Maybe<Float[] | Float>;
  locationLat_not_in?: Maybe<Float[] | Float>;
  locationLat_lt?: Maybe<Float>;
  locationLat_lte?: Maybe<Float>;
  locationLat_gt?: Maybe<Float>;
  locationLat_gte?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  locationLon_not?: Maybe<Float>;
  locationLon_in?: Maybe<Float[] | Float>;
  locationLon_not_in?: Maybe<Float[] | Float>;
  locationLon_lt?: Maybe<Float>;
  locationLon_lte?: Maybe<Float>;
  locationLon_gt?: Maybe<Float>;
  locationLon_gte?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
  currentRole_not?: Maybe<Boolean>;
  AND?: Maybe<ExperienceScalarWhereInput[] | ExperienceScalarWhereInput>;
  OR?: Maybe<ExperienceScalarWhereInput[] | ExperienceScalarWhereInput>;
  NOT?: Maybe<ExperienceScalarWhereInput[] | ExperienceScalarWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface ExperienceUpdateManyWithWhereNestedInput {
  where: ExperienceScalarWhereInput;
  data: ExperienceUpdateManyDataInput;
}

export interface ListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ListWhereInput>;
  AND?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
  OR?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
  NOT?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
}

export interface ExperienceUpdateManyDataInput {
  name?: Maybe<String>;
  subText?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface ExperienceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ExperienceWhereInput>;
  AND?: Maybe<
    ExperienceSubscriptionWhereInput[] | ExperienceSubscriptionWhereInput
  >;
  OR?: Maybe<
    ExperienceSubscriptionWhereInput[] | ExperienceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ExperienceSubscriptionWhereInput[] | ExperienceSubscriptionWhereInput
  >;
}

export interface EducationUpdateManyWithoutOwnerInput {
  create?: Maybe<
    EducationCreateWithoutOwnerInput[] | EducationCreateWithoutOwnerInput
  >;
  delete?: Maybe<EducationWhereUniqueInput[] | EducationWhereUniqueInput>;
  connect?: Maybe<EducationWhereUniqueInput[] | EducationWhereUniqueInput>;
  set?: Maybe<EducationWhereUniqueInput[] | EducationWhereUniqueInput>;
  disconnect?: Maybe<EducationWhereUniqueInput[] | EducationWhereUniqueInput>;
  update?: Maybe<
    | EducationUpdateWithWhereUniqueWithoutOwnerInput[]
    | EducationUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | EducationUpsertWithWhereUniqueWithoutOwnerInput[]
    | EducationUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<EducationScalarWhereInput[] | EducationScalarWhereInput>;
  updateMany?: Maybe<
    | EducationUpdateManyWithWhereNestedInput[]
    | EducationUpdateManyWithWhereNestedInput
  >;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface EducationUpdateWithWhereUniqueWithoutOwnerInput {
  where: EducationWhereUniqueInput;
  data: EducationUpdateWithoutOwnerDataInput;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface EducationUpdateWithoutOwnerDataInput {
  name?: Maybe<String>;
  subText?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export type EducationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EducationUpsertWithWhereUniqueWithoutOwnerInput {
  where: EducationWhereUniqueInput;
  update: EducationUpdateWithoutOwnerDataInput;
  create: EducationCreateWithoutOwnerInput;
}

export interface UpdateCreateInput {
  id?: Maybe<ID_Input>;
  parentPost: PostCreateOneWithoutUpdatesInput;
  content: String;
  image?: Maybe<String>;
  likes?: Maybe<UpdateCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutParentUpdateInput>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutUpdateInput>;
  _deleted?: Maybe<Boolean>;
}

export interface EducationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subText?: Maybe<String>;
  subText_not?: Maybe<String>;
  subText_in?: Maybe<String[] | String>;
  subText_not_in?: Maybe<String[] | String>;
  subText_lt?: Maybe<String>;
  subText_lte?: Maybe<String>;
  subText_gt?: Maybe<String>;
  subText_gte?: Maybe<String>;
  subText_contains?: Maybe<String>;
  subText_not_contains?: Maybe<String>;
  subText_starts_with?: Maybe<String>;
  subText_not_starts_with?: Maybe<String>;
  subText_ends_with?: Maybe<String>;
  subText_not_ends_with?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateMonth_not?: Maybe<String>;
  startDateMonth_in?: Maybe<String[] | String>;
  startDateMonth_not_in?: Maybe<String[] | String>;
  startDateMonth_lt?: Maybe<String>;
  startDateMonth_lte?: Maybe<String>;
  startDateMonth_gt?: Maybe<String>;
  startDateMonth_gte?: Maybe<String>;
  startDateMonth_contains?: Maybe<String>;
  startDateMonth_not_contains?: Maybe<String>;
  startDateMonth_starts_with?: Maybe<String>;
  startDateMonth_not_starts_with?: Maybe<String>;
  startDateMonth_ends_with?: Maybe<String>;
  startDateMonth_not_ends_with?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  startDateYear_not?: Maybe<Int>;
  startDateYear_in?: Maybe<Int[] | Int>;
  startDateYear_not_in?: Maybe<Int[] | Int>;
  startDateYear_lt?: Maybe<Int>;
  startDateYear_lte?: Maybe<Int>;
  startDateYear_gt?: Maybe<Int>;
  startDateYear_gte?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateMonth_not?: Maybe<String>;
  endDateMonth_in?: Maybe<String[] | String>;
  endDateMonth_not_in?: Maybe<String[] | String>;
  endDateMonth_lt?: Maybe<String>;
  endDateMonth_lte?: Maybe<String>;
  endDateMonth_gt?: Maybe<String>;
  endDateMonth_gte?: Maybe<String>;
  endDateMonth_contains?: Maybe<String>;
  endDateMonth_not_contains?: Maybe<String>;
  endDateMonth_starts_with?: Maybe<String>;
  endDateMonth_not_starts_with?: Maybe<String>;
  endDateMonth_ends_with?: Maybe<String>;
  endDateMonth_not_ends_with?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  endDateYear_not?: Maybe<Int>;
  endDateYear_in?: Maybe<Int[] | Int>;
  endDateYear_not_in?: Maybe<Int[] | Int>;
  endDateYear_lt?: Maybe<Int>;
  endDateYear_lte?: Maybe<Int>;
  endDateYear_gt?: Maybe<Int>;
  endDateYear_gte?: Maybe<Int>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  locationID?: Maybe<String>;
  locationID_not?: Maybe<String>;
  locationID_in?: Maybe<String[] | String>;
  locationID_not_in?: Maybe<String[] | String>;
  locationID_lt?: Maybe<String>;
  locationID_lte?: Maybe<String>;
  locationID_gt?: Maybe<String>;
  locationID_gte?: Maybe<String>;
  locationID_contains?: Maybe<String>;
  locationID_not_contains?: Maybe<String>;
  locationID_starts_with?: Maybe<String>;
  locationID_not_starts_with?: Maybe<String>;
  locationID_ends_with?: Maybe<String>;
  locationID_not_ends_with?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLat_not?: Maybe<Float>;
  locationLat_in?: Maybe<Float[] | Float>;
  locationLat_not_in?: Maybe<Float[] | Float>;
  locationLat_lt?: Maybe<Float>;
  locationLat_lte?: Maybe<Float>;
  locationLat_gt?: Maybe<Float>;
  locationLat_gte?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  locationLon_not?: Maybe<Float>;
  locationLon_in?: Maybe<Float[] | Float>;
  locationLon_not_in?: Maybe<Float[] | Float>;
  locationLon_lt?: Maybe<Float>;
  locationLon_lte?: Maybe<Float>;
  locationLon_gt?: Maybe<Float>;
  locationLon_gte?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
  currentRole_not?: Maybe<Boolean>;
  AND?: Maybe<EducationScalarWhereInput[] | EducationScalarWhereInput>;
  OR?: Maybe<EducationScalarWhereInput[] | EducationScalarWhereInput>;
  NOT?: Maybe<EducationScalarWhereInput[] | EducationScalarWhereInput>;
}

export type ExperienceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EducationUpdateManyWithWhereNestedInput {
  where: EducationScalarWhereInput;
  data: EducationUpdateManyDataInput;
}

export interface StoryItemUpdateManyMutationInput {
  type?: Maybe<StoryItemType>;
  url?: Maybe<String>;
  preview?: Maybe<String>;
  link?: Maybe<String>;
  text?: Maybe<StoryItemUpdatetextInput>;
  duration?: Maybe<Float>;
  inProject?: Maybe<Boolean>;
  likes?: Maybe<StoryItemUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
}

export interface EducationUpdateManyDataInput {
  name?: Maybe<String>;
  subText?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateManyWithoutOwnerInput {
  create?: Maybe<PostCreateWithoutOwnerInput[] | PostCreateWithoutOwnerInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutOwnerInput[]
    | PostUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutOwnerInput[]
    | PostUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface StoryUpdateWithWhereUniqueWithoutItemsInput {
  where: StoryWhereUniqueInput;
  data: StoryUpdateWithoutItemsDataInput;
}

export interface PostUpdateWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutOwnerDataInput;
}

export type ListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  listName?: Maybe<String>;
}>;

export interface PostUpdateWithoutOwnerDataInput {
  lastUpdated?: Maybe<DateTimeInput>;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicUpdateOneInput>;
  topics?: Maybe<TopicUpdateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content?: Maybe<String>;
  images?: Maybe<PostUpdateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutParentPostInput>;
  updates?: Maybe<UpdateUpdateManyWithoutParentPostInput>;
  likes?: Maybe<PostUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutPostInput>;
  _deleted?: Maybe<Boolean>;
}

export interface StoryCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutStoriesInput;
  title?: Maybe<String>;
  type: StoryType;
  topics?: Maybe<TopicCreateManyInput>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface TopicUpdateOneInput {
  create?: Maybe<TopicCreateInput>;
  update?: Maybe<TopicUpdateDataInput>;
  upsert?: Maybe<TopicUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface StoryItemCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  stories?: Maybe<StoryCreateManyWithoutItemsInput>;
  type: StoryItemType;
  url: String;
  preview: String;
  link?: Maybe<String>;
  text?: Maybe<StoryItemCreatetextInput>;
  duration?: Maybe<Float>;
  inProject?: Maybe<Boolean>;
  likes?: Maybe<StoryItemCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
}

export interface TopicUpsertNestedInput {
  update: TopicUpdateDataInput;
  create: TopicCreateInput;
}

export interface StoryUpdateManyMutationInput {
  title?: Maybe<String>;
  type?: Maybe<StoryType>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface PostUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface SkillUpdateManyMutationInput {
  skill?: Maybe<String>;
  isExpert?: Maybe<Boolean>;
}

export interface CommentUpdateManyWithoutParentPostInput {
  create?: Maybe<
    CommentCreateWithoutParentPostInput[] | CommentCreateWithoutParentPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutParentPostInput[]
    | CommentUpdateWithWhereUniqueWithoutParentPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutParentPostInput[]
    | CommentUpsertWithWhereUniqueWithoutParentPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutSkillsInput {
  update: UserUpdateWithoutSkillsDataInput;
  create: UserCreateWithoutSkillsInput;
}

export interface CommentUpdateWithWhereUniqueWithoutParentPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutParentPostDataInput;
}

export interface UserUpdateOneRequiredWithoutSkillsInput {
  create?: Maybe<UserCreateWithoutSkillsInput>;
  update?: Maybe<UserUpdateWithoutSkillsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSkillsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CommentUpdateWithoutParentPostDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  parentUpdate?: Maybe<UpdateUpdateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentUpdateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface SkillUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutSkillsInput>;
  skill?: Maybe<String>;
  isExpert?: Maybe<Boolean>;
}

export interface UpdateUpdateOneWithoutCommentsInput {
  create?: Maybe<UpdateCreateWithoutCommentsInput>;
  update?: Maybe<UpdateUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UpdateUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UpdateWhereUniqueInput>;
}

export interface UserCreateOneWithoutSkillsInput {
  create?: Maybe<UserCreateWithoutSkillsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UpdateUpdateWithoutCommentsDataInput {
  parentPost?: Maybe<PostUpdateOneRequiredWithoutUpdatesInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<UpdateUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutUpdateInput>;
  _deleted?: Maybe<Boolean>;
}

export interface SkillCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutSkillsInput;
  skill: String;
  isExpert?: Maybe<Boolean>;
}

export interface PostUpdateOneRequiredWithoutUpdatesInput {
  create?: Maybe<PostCreateWithoutUpdatesInput>;
  update?: Maybe<PostUpdateWithoutUpdatesDataInput>;
  upsert?: Maybe<PostUpsertWithoutUpdatesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateInput {
  lastUpdated?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicUpdateOneInput>;
  topics?: Maybe<TopicUpdateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content?: Maybe<String>;
  images?: Maybe<PostUpdateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutParentPostInput>;
  updates?: Maybe<UpdateUpdateManyWithoutParentPostInput>;
  likes?: Maybe<PostUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutPostInput>;
  _deleted?: Maybe<Boolean>;
}

export interface PostUpdateWithoutUpdatesDataInput {
  lastUpdated?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicUpdateOneInput>;
  topics?: Maybe<TopicUpdateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content?: Maybe<String>;
  images?: Maybe<PostUpdateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutParentPostInput>;
  likes?: Maybe<PostUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutPostInput>;
  _deleted?: Maybe<Boolean>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  lastUpdated: DateTimeInput;
  owner: UserCreateOneWithoutPostsInput;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicCreateOneInput>;
  topics?: Maybe<TopicCreateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content: String;
  images?: Maybe<PostCreateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  comments?: Maybe<CommentCreateManyWithoutParentPostInput>;
  updates?: Maybe<UpdateCreateManyWithoutParentPostInput>;
  likes?: Maybe<PostCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutPostInput>;
  _deleted?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NotificationUpdateInput {
  target?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
  style?: Maybe<NotificationStyle>;
  user?: Maybe<UserUpdateOneInput>;
  users?: Maybe<UserUpdateManyInput>;
  post?: Maybe<PostUpdateOneWithoutNotificationsInput>;
  update?: Maybe<UpdateUpdateOneWithoutNotificationsInput>;
  comment?: Maybe<CommentUpdateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface TopicUpdateWithWhereUniqueWithoutParentListInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutParentListDataInput;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  target: UserCreateOneWithoutNotificationsInput;
  style: NotificationStyle;
  user?: Maybe<UserCreateOneInput>;
  users?: Maybe<UserCreateManyInput>;
  post?: Maybe<PostCreateOneWithoutNotificationsInput>;
  update?: Maybe<UpdateCreateOneWithoutNotificationsInput>;
  comment?: Maybe<CommentCreateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface UserUpdateManyWithoutConnectionsInput {
  create?: Maybe<
    UserCreateWithoutConnectionsInput[] | UserCreateWithoutConnectionsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutConnectionsInput[]
    | UserUpdateWithWhereUniqueWithoutConnectionsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutConnectionsInput[]
    | UserUpsertWithWhereUniqueWithoutConnectionsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateInput {
  to?: Maybe<GroupUpdateOneRequiredWithoutMessagesInput>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  hidden?: Maybe<UserUpdateManyInput>;
}

export interface UserUpdateWithWhereUniqueWithoutConnectionsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutConnectionsDataInput;
}

export interface MeetingUpdateManyMutationInput {
  startTime?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
}

export interface UserUpdateWithoutConnectionsDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UserUpdateWithoutMeetingsDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutMeetingsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMeetingsDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface MeetingUpdateInput {
  users?: Maybe<UserUpdateManyWithoutMeetingsInput>;
  startTime?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
}

export interface UserUpdateWithoutFollowingDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UserCreateWithoutMeetingsInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface MeetingCreateInput {
  id?: Maybe<ID_Input>;
  users?: Maybe<UserCreateManyWithoutMeetingsInput>;
  startTime: DateTimeInput;
  endTime: DateTimeInput;
  place?: Maybe<String>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface ListUpdateManyMutationInput {
  listName?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface UserUpdateWithoutFollowersDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface TopicUpdateWithoutParentListDataInput {
  topicID?: Maybe<String>;
  name?: Maybe<String>;
  parentTopic?: Maybe<TopicUpdateOneWithoutChildrenInput>;
  children?: Maybe<TopicUpdateManyWithoutParentTopicInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface StoryUpdateOneInput {
  create?: Maybe<StoryCreateInput>;
  update?: Maybe<StoryUpdateDataInput>;
  upsert?: Maybe<StoryUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<StoryWhereUniqueInput>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  parentPost?: Maybe<PostCreateOneWithoutCommentsInput>;
  parentUpdate?: Maybe<UpdateCreateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentCreateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface StoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  type?: Maybe<StoryType>;
  type_not?: Maybe<StoryType>;
  type_in?: Maybe<StoryType[] | StoryType>;
  type_not_in?: Maybe<StoryType[] | StoryType>;
  topics_every?: Maybe<TopicWhereInput>;
  topics_some?: Maybe<TopicWhereInput>;
  topics_none?: Maybe<TopicWhereInput>;
  items_every?: Maybe<StoryItemWhereInput>;
  items_some?: Maybe<StoryItemWhereInput>;
  items_none?: Maybe<StoryItemWhereInput>;
  preview?: Maybe<String>;
  preview_not?: Maybe<String>;
  preview_in?: Maybe<String[] | String>;
  preview_not_in?: Maybe<String[] | String>;
  preview_lt?: Maybe<String>;
  preview_lte?: Maybe<String>;
  preview_gt?: Maybe<String>;
  preview_gte?: Maybe<String>;
  preview_contains?: Maybe<String>;
  preview_not_contains?: Maybe<String>;
  preview_starts_with?: Maybe<String>;
  preview_not_starts_with?: Maybe<String>;
  preview_ends_with?: Maybe<String>;
  preview_not_ends_with?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  showcase_not?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
  save_not?: Maybe<Boolean>;
  AND?: Maybe<StoryWhereInput[] | StoryWhereInput>;
  OR?: Maybe<StoryWhereInput[] | StoryWhereInput>;
  NOT?: Maybe<StoryWhereInput[] | StoryWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface StoryItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  stories_every?: Maybe<StoryWhereInput>;
  stories_some?: Maybe<StoryWhereInput>;
  stories_none?: Maybe<StoryWhereInput>;
  type?: Maybe<StoryItemType>;
  type_not?: Maybe<StoryItemType>;
  type_in?: Maybe<StoryItemType[] | StoryItemType>;
  type_not_in?: Maybe<StoryItemType[] | StoryItemType>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  preview?: Maybe<String>;
  preview_not?: Maybe<String>;
  preview_in?: Maybe<String[] | String>;
  preview_not_in?: Maybe<String[] | String>;
  preview_lt?: Maybe<String>;
  preview_lte?: Maybe<String>;
  preview_gt?: Maybe<String>;
  preview_gte?: Maybe<String>;
  preview_contains?: Maybe<String>;
  preview_not_contains?: Maybe<String>;
  preview_starts_with?: Maybe<String>;
  preview_not_starts_with?: Maybe<String>;
  preview_ends_with?: Maybe<String>;
  preview_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  duration?: Maybe<Float>;
  duration_not?: Maybe<Float>;
  duration_in?: Maybe<Float[] | Float>;
  duration_not_in?: Maybe<Float[] | Float>;
  duration_lt?: Maybe<Float>;
  duration_lte?: Maybe<Float>;
  duration_gt?: Maybe<Float>;
  duration_gte?: Maybe<Float>;
  inProject?: Maybe<Boolean>;
  inProject_not?: Maybe<Boolean>;
  likesCount?: Maybe<Int>;
  likesCount_not?: Maybe<Int>;
  likesCount_in?: Maybe<Int[] | Int>;
  likesCount_not_in?: Maybe<Int[] | Int>;
  likesCount_lt?: Maybe<Int>;
  likesCount_lte?: Maybe<Int>;
  likesCount_gt?: Maybe<Int>;
  likesCount_gte?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  likedByMe_not?: Maybe<Boolean>;
  AND?: Maybe<StoryItemWhereInput[] | StoryItemWhereInput>;
  OR?: Maybe<StoryItemWhereInput[] | StoryItemWhereInput>;
  NOT?: Maybe<StoryItemWhereInput[] | StoryItemWhereInput>;
}

export interface TopicCreateInput {
  id?: Maybe<ID_Input>;
  topicID: String;
  name: String;
  parentList?: Maybe<ListCreateOneWithoutMainTopicsInput>;
  parentTopic?: Maybe<TopicCreateOneWithoutChildrenInput>;
  children?: Maybe<TopicCreateManyWithoutParentTopicInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface MeetingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  startTime?: Maybe<DateTimeInput>;
  startTime_not?: Maybe<DateTimeInput>;
  startTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startTime_lt?: Maybe<DateTimeInput>;
  startTime_lte?: Maybe<DateTimeInput>;
  startTime_gt?: Maybe<DateTimeInput>;
  startTime_gte?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
  endTime_not?: Maybe<DateTimeInput>;
  endTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endTime_lt?: Maybe<DateTimeInput>;
  endTime_lte?: Maybe<DateTimeInput>;
  endTime_gt?: Maybe<DateTimeInput>;
  endTime_gte?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
  place_not?: Maybe<String>;
  place_in?: Maybe<String[] | String>;
  place_not_in?: Maybe<String[] | String>;
  place_lt?: Maybe<String>;
  place_lte?: Maybe<String>;
  place_gt?: Maybe<String>;
  place_gte?: Maybe<String>;
  place_contains?: Maybe<String>;
  place_not_contains?: Maybe<String>;
  place_starts_with?: Maybe<String>;
  place_not_starts_with?: Maybe<String>;
  place_ends_with?: Maybe<String>;
  place_not_ends_with?: Maybe<String>;
  AND?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
  OR?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
  NOT?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
}

export interface ListCreateWithoutMainTopicsInput {
  id?: Maybe<ID_Input>;
  listName: String;
  icon?: Maybe<String>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  to?: Maybe<GroupWhereInput>;
  from?: Maybe<UserWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  hidden_every?: Maybe<UserWhereInput>;
  hidden_some?: Maybe<UserWhereInput>;
  hidden_none?: Maybe<UserWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface TopicCreateWithoutChildrenInput {
  id?: Maybe<ID_Input>;
  topicID: String;
  name: String;
  parentList?: Maybe<ListCreateOneWithoutMainTopicsInput>;
  parentTopic?: Maybe<TopicCreateOneWithoutChildrenInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface TopicUpdateManyWithoutParentListInput {
  create?: Maybe<
    TopicCreateWithoutParentListInput[] | TopicCreateWithoutParentListInput
  >;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutParentListInput[]
    | TopicUpdateWithWhereUniqueWithoutParentListInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutParentListInput[]
    | TopicUpsertWithWhereUniqueWithoutParentListInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface TopicCreateWithoutParentTopicInput {
  id?: Maybe<ID_Input>;
  topicID: String;
  name: String;
  parentList?: Maybe<ListCreateOneWithoutMainTopicsInput>;
  children?: Maybe<TopicCreateManyWithoutParentTopicInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface ListUpdateInput {
  listName?: Maybe<String>;
  icon?: Maybe<String>;
  mainTopics?: Maybe<TopicUpdateManyWithoutParentListInput>;
}

export interface SkillCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  skill: String;
  isExpert?: Maybe<Boolean>;
}

export interface TopicCreateWithoutParentListInput {
  id?: Maybe<ID_Input>;
  topicID: String;
  name: String;
  parentTopic?: Maybe<TopicCreateOneWithoutChildrenInput>;
  children?: Maybe<TopicCreateManyWithoutParentTopicInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface ExperienceCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  name: String;
  subText: String;
  startDateMonth: String;
  startDateYear: Int;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface MeetingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  startTime?: Maybe<DateTimeInput>;
  startTime_not?: Maybe<DateTimeInput>;
  startTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startTime_lt?: Maybe<DateTimeInput>;
  startTime_lte?: Maybe<DateTimeInput>;
  startTime_gt?: Maybe<DateTimeInput>;
  startTime_gte?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
  endTime_not?: Maybe<DateTimeInput>;
  endTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endTime_lt?: Maybe<DateTimeInput>;
  endTime_lte?: Maybe<DateTimeInput>;
  endTime_gt?: Maybe<DateTimeInput>;
  endTime_gte?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
  place_not?: Maybe<String>;
  place_in?: Maybe<String[] | String>;
  place_not_in?: Maybe<String[] | String>;
  place_lt?: Maybe<String>;
  place_lte?: Maybe<String>;
  place_gt?: Maybe<String>;
  place_gte?: Maybe<String>;
  place_contains?: Maybe<String>;
  place_not_contains?: Maybe<String>;
  place_starts_with?: Maybe<String>;
  place_not_starts_with?: Maybe<String>;
  place_ends_with?: Maybe<String>;
  place_not_ends_with?: Maybe<String>;
  AND?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  OR?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  NOT?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
}

export interface EducationCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  name: String;
  subText: String;
  startDateMonth?: Maybe<String>;
  startDateYear: Int;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface MeetingUpdateManyWithWhereNestedInput {
  where: MeetingScalarWhereInput;
  data: MeetingUpdateManyDataInput;
}

export interface PostCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  lastUpdated: DateTimeInput;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicCreateOneInput>;
  topics?: Maybe<TopicCreateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content: String;
  images?: Maybe<PostCreateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  comments?: Maybe<CommentCreateManyWithoutParentPostInput>;
  updates?: Maybe<UpdateCreateManyWithoutParentPostInput>;
  likes?: Maybe<PostCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutPostInput>;
  _deleted?: Maybe<Boolean>;
}

export interface MeetingUpdateManyDataInput {
  startTime?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
}

export interface PostCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdaterolesInput {
  set?: Maybe<Role[] | Role>;
}

export interface CommentCreateWithoutParentPostInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  parentUpdate?: Maybe<UpdateCreateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentCreateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface GroupUpdateManyWithoutUsersInput {
  create?: Maybe<GroupCreateWithoutUsersInput[] | GroupCreateWithoutUsersInput>;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutUsersInput[]
    | GroupUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutUsersInput[]
    | GroupUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface UpdateCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  parentPost: PostCreateOneWithoutUpdatesInput;
  content: String;
  image?: Maybe<String>;
  likes?: Maybe<UpdateCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutUpdateInput>;
  _deleted?: Maybe<Boolean>;
}

export interface GroupUpdateWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutUsersDataInput;
}

export interface PostCreateWithoutUpdatesInput {
  id?: Maybe<ID_Input>;
  lastUpdated: DateTimeInput;
  owner: UserCreateOneWithoutPostsInput;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicCreateOneInput>;
  topics?: Maybe<TopicCreateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content: String;
  images?: Maybe<PostCreateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  comments?: Maybe<CommentCreateManyWithoutParentPostInput>;
  likes?: Maybe<PostCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutPostInput>;
  _deleted?: Maybe<Boolean>;
}

export interface GroupUpdateWithoutUsersDataInput {
  messages?: Maybe<MessageUpdateManyWithoutToInput>;
  latestMessage?: Maybe<MessageUpdateOneInput>;
  hidden?: Maybe<UserUpdateManyInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface MessageUpdateManyWithoutToInput {
  create?: Maybe<MessageCreateWithoutToInput[] | MessageCreateWithoutToInput>;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutToInput[]
    | MessageUpdateWithWhereUniqueWithoutToInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutToInput[]
    | MessageUpsertWithWhereUniqueWithoutToInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutConnectionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface MessageUpdateWithWhereUniqueWithoutToInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutToDataInput;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface MessageUpdateWithoutToDataInput {
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  hidden?: Maybe<UserUpdateManyInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface StoryCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutStoriesInput;
  title?: Maybe<String>;
  type: StoryType;
  topics?: Maybe<TopicCreateManyInput>;
  items?: Maybe<StoryItemCreateManyWithoutStoriesInput>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserCreateWithoutStoriesInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MeetingCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  startTime: DateTimeInput;
  endTime: DateTimeInput;
  place?: Maybe<String>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profilePic?: Maybe<String>;
  profilePic_not?: Maybe<String>;
  profilePic_in?: Maybe<String[] | String>;
  profilePic_not_in?: Maybe<String[] | String>;
  profilePic_lt?: Maybe<String>;
  profilePic_lte?: Maybe<String>;
  profilePic_gt?: Maybe<String>;
  profilePic_gte?: Maybe<String>;
  profilePic_contains?: Maybe<String>;
  profilePic_not_contains?: Maybe<String>;
  profilePic_starts_with?: Maybe<String>;
  profilePic_not_starts_with?: Maybe<String>;
  profilePic_ends_with?: Maybe<String>;
  profilePic_not_ends_with?: Maybe<String>;
  bannerPic?: Maybe<String>;
  bannerPic_not?: Maybe<String>;
  bannerPic_in?: Maybe<String[] | String>;
  bannerPic_not_in?: Maybe<String[] | String>;
  bannerPic_lt?: Maybe<String>;
  bannerPic_lte?: Maybe<String>;
  bannerPic_gt?: Maybe<String>;
  bannerPic_gte?: Maybe<String>;
  bannerPic_contains?: Maybe<String>;
  bannerPic_not_contains?: Maybe<String>;
  bannerPic_starts_with?: Maybe<String>;
  bannerPic_not_starts_with?: Maybe<String>;
  bannerPic_ends_with?: Maybe<String>;
  bannerPic_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  locationID?: Maybe<String>;
  locationID_not?: Maybe<String>;
  locationID_in?: Maybe<String[] | String>;
  locationID_not_in?: Maybe<String[] | String>;
  locationID_lt?: Maybe<String>;
  locationID_lte?: Maybe<String>;
  locationID_gt?: Maybe<String>;
  locationID_gte?: Maybe<String>;
  locationID_contains?: Maybe<String>;
  locationID_not_contains?: Maybe<String>;
  locationID_starts_with?: Maybe<String>;
  locationID_not_starts_with?: Maybe<String>;
  locationID_ends_with?: Maybe<String>;
  locationID_not_ends_with?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLat_not?: Maybe<Float>;
  locationLat_in?: Maybe<Float[] | Float>;
  locationLat_not_in?: Maybe<Float[] | Float>;
  locationLat_lt?: Maybe<Float>;
  locationLat_lte?: Maybe<Float>;
  locationLat_gt?: Maybe<Float>;
  locationLat_gte?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  locationLon_not?: Maybe<Float>;
  locationLon_in?: Maybe<Float[] | Float>;
  locationLon_not_in?: Maybe<Float[] | Float>;
  locationLon_lt?: Maybe<Float>;
  locationLon_lte?: Maybe<Float>;
  locationLon_gt?: Maybe<Float>;
  locationLon_gte?: Maybe<Float>;
  headline?: Maybe<String>;
  headline_not?: Maybe<String>;
  headline_in?: Maybe<String[] | String>;
  headline_not_in?: Maybe<String[] | String>;
  headline_lt?: Maybe<String>;
  headline_lte?: Maybe<String>;
  headline_gt?: Maybe<String>;
  headline_gte?: Maybe<String>;
  headline_contains?: Maybe<String>;
  headline_not_contains?: Maybe<String>;
  headline_starts_with?: Maybe<String>;
  headline_not_starts_with?: Maybe<String>;
  headline_ends_with?: Maybe<String>;
  headline_not_ends_with?: Maybe<String>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  about?: Maybe<String>;
  about_not?: Maybe<String>;
  about_in?: Maybe<String[] | String>;
  about_not_in?: Maybe<String[] | String>;
  about_lt?: Maybe<String>;
  about_lte?: Maybe<String>;
  about_gt?: Maybe<String>;
  about_gte?: Maybe<String>;
  about_contains?: Maybe<String>;
  about_not_contains?: Maybe<String>;
  about_starts_with?: Maybe<String>;
  about_not_starts_with?: Maybe<String>;
  about_ends_with?: Maybe<String>;
  about_not_ends_with?: Maybe<String>;
  connectionsCount?: Maybe<Int>;
  connectionsCount_not?: Maybe<Int>;
  connectionsCount_in?: Maybe<Int[] | Int>;
  connectionsCount_not_in?: Maybe<Int[] | Int>;
  connectionsCount_lt?: Maybe<Int>;
  connectionsCount_lte?: Maybe<Int>;
  connectionsCount_gt?: Maybe<Int>;
  connectionsCount_gte?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followingCount_not?: Maybe<Int>;
  followingCount_in?: Maybe<Int[] | Int>;
  followingCount_not_in?: Maybe<Int[] | Int>;
  followingCount_lt?: Maybe<Int>;
  followingCount_lte?: Maybe<Int>;
  followingCount_gt?: Maybe<Int>;
  followingCount_gte?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  followersCount_not?: Maybe<Int>;
  followersCount_in?: Maybe<Int[] | Int>;
  followersCount_not_in?: Maybe<Int[] | Int>;
  followersCount_lt?: Maybe<Int>;
  followersCount_lte?: Maybe<Int>;
  followersCount_gt?: Maybe<Int>;
  followersCount_gte?: Maybe<Int>;
  unReadMessagesCount?: Maybe<Int>;
  unReadMessagesCount_not?: Maybe<Int>;
  unReadMessagesCount_in?: Maybe<Int[] | Int>;
  unReadMessagesCount_not_in?: Maybe<Int[] | Int>;
  unReadMessagesCount_lt?: Maybe<Int>;
  unReadMessagesCount_lte?: Maybe<Int>;
  unReadMessagesCount_gt?: Maybe<Int>;
  unReadMessagesCount_gte?: Maybe<Int>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface GroupCreateManyWithoutUsersInput {
  create?: Maybe<GroupCreateWithoutUsersInput[] | GroupCreateWithoutUsersInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface MessageCreateManyWithoutToInput {
  create?: Maybe<MessageCreateWithoutToInput[] | MessageCreateWithoutToInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  roles?: Maybe<UserUpdaterolesInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface MessageUpsertWithWhereUniqueWithoutToInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutToDataInput;
  create: MessageCreateWithoutToInput;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  to: GroupCreateOneWithoutMessagesInput;
  from: UserCreateOneInput;
  content: String;
  hidden?: Maybe<UserCreateManyInput>;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface GroupCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  users?: Maybe<UserCreateManyWithoutGroupsInput>;
  latestMessage?: Maybe<MessageCreateOneInput>;
  hidden?: Maybe<UserCreateManyInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface UserCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface MessageUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface StoryCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  type: StoryType;
  topics?: Maybe<TopicCreateManyInput>;
  items?: Maybe<StoryItemCreateManyWithoutStoriesInput>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface MessageUpdateOneInput {
  create?: Maybe<MessageCreateInput>;
  update?: Maybe<MessageUpdateDataInput>;
  upsert?: Maybe<MessageUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MessageWhereUniqueInput>;
}

export interface StoryItemCreateWithoutStoriesInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  type: StoryItemType;
  url: String;
  preview: String;
  link?: Maybe<String>;
  text?: Maybe<StoryItemCreatetextInput>;
  duration?: Maybe<Float>;
  inProject?: Maybe<Boolean>;
  likes?: Maybe<StoryItemCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
}

export interface MessageUpdateDataInput {
  to?: Maybe<GroupUpdateOneRequiredWithoutMessagesInput>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  hidden?: Maybe<UserUpdateManyInput>;
}

export interface StoryItemCreatelikesInput {
  set?: Maybe<String[] | String>;
}

export interface GroupUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<GroupCreateWithoutMessagesInput>;
  update?: Maybe<GroupUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<GroupUpsertWithoutMessagesInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface NotificationCreateWithoutTargetInput {
  id?: Maybe<ID_Input>;
  style: NotificationStyle;
  user?: Maybe<UserCreateOneInput>;
  users?: Maybe<UserCreateManyInput>;
  post?: Maybe<PostCreateOneWithoutNotificationsInput>;
  update?: Maybe<UpdateCreateOneWithoutNotificationsInput>;
  comment?: Maybe<CommentCreateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface GroupUpdateWithoutMessagesDataInput {
  users?: Maybe<UserUpdateManyWithoutGroupsInput>;
  latestMessage?: Maybe<MessageUpdateOneInput>;
  hidden?: Maybe<UserUpdateManyInput>;
}

export interface PostCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  lastUpdated: DateTimeInput;
  owner: UserCreateOneWithoutPostsInput;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicCreateOneInput>;
  topics?: Maybe<TopicCreateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content: String;
  images?: Maybe<PostCreateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  comments?: Maybe<CommentCreateManyWithoutParentPostInput>;
  updates?: Maybe<UpdateCreateManyWithoutParentPostInput>;
  likes?: Maybe<PostCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface UserUpdateManyWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput[] | UserCreateWithoutGroupsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutGroupsInput[]
    | UserUpdateWithWhereUniqueWithoutGroupsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutGroupsInput[]
    | UserUpsertWithWhereUniqueWithoutGroupsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UpdateCreateWithoutParentPostInput {
  id?: Maybe<ID_Input>;
  content: String;
  image?: Maybe<String>;
  likes?: Maybe<UpdateCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutParentUpdateInput>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutUpdateInput>;
  _deleted?: Maybe<Boolean>;
}

export interface UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutGroupsDataInput;
}

export interface CommentCreateManyWithoutParentUpdateInput {
  create?: Maybe<
    | CommentCreateWithoutParentUpdateInput[]
    | CommentCreateWithoutParentUpdateInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface UserUpdateWithoutGroupsDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface StoryUpdateManyWithoutOwnerInput {
  create?: Maybe<StoryCreateWithoutOwnerInput[] | StoryCreateWithoutOwnerInput>;
  delete?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  connect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  set?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  disconnect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  update?: Maybe<
    | StoryUpdateWithWhereUniqueWithoutOwnerInput[]
    | StoryUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | StoryUpsertWithWhereUniqueWithoutOwnerInput[]
    | StoryUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
  updateMany?: Maybe<
    StoryUpdateManyWithWhereNestedInput[] | StoryUpdateManyWithWhereNestedInput
  >;
}

export interface PostCreatelikesInput {
  set?: Maybe<String[] | String>;
}

export interface StoryUpdateWithWhereUniqueWithoutOwnerInput {
  where: StoryWhereUniqueInput;
  data: StoryUpdateWithoutOwnerDataInput;
}

export interface NotificationCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  target: UserCreateOneWithoutNotificationsInput;
  style: NotificationStyle;
  user?: Maybe<UserCreateOneInput>;
  users?: Maybe<UserCreateManyInput>;
  update?: Maybe<UpdateCreateOneWithoutNotificationsInput>;
  comment?: Maybe<CommentCreateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface StoryUpdateWithoutOwnerDataInput {
  title?: Maybe<String>;
  type?: Maybe<StoryType>;
  topics?: Maybe<TopicUpdateManyInput>;
  items?: Maybe<StoryItemUpdateManyWithoutStoriesInput>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface StoryItemUpdateManyWithoutStoriesInput {
  create?: Maybe<
    StoryItemCreateWithoutStoriesInput[] | StoryItemCreateWithoutStoriesInput
  >;
  delete?: Maybe<StoryItemWhereUniqueInput[] | StoryItemWhereUniqueInput>;
  connect?: Maybe<StoryItemWhereUniqueInput[] | StoryItemWhereUniqueInput>;
  set?: Maybe<StoryItemWhereUniqueInput[] | StoryItemWhereUniqueInput>;
  disconnect?: Maybe<StoryItemWhereUniqueInput[] | StoryItemWhereUniqueInput>;
  update?: Maybe<
    | StoryItemUpdateWithWhereUniqueWithoutStoriesInput[]
    | StoryItemUpdateWithWhereUniqueWithoutStoriesInput
  >;
  upsert?: Maybe<
    | StoryItemUpsertWithWhereUniqueWithoutStoriesInput[]
    | StoryItemUpsertWithWhereUniqueWithoutStoriesInput
  >;
  deleteMany?: Maybe<StoryItemScalarWhereInput[] | StoryItemScalarWhereInput>;
  updateMany?: Maybe<
    | StoryItemUpdateManyWithWhereNestedInput[]
    | StoryItemUpdateManyWithWhereNestedInput
  >;
}

export interface UpdateCreateOneWithoutNotificationsInput {
  create?: Maybe<UpdateCreateWithoutNotificationsInput>;
  connect?: Maybe<UpdateWhereUniqueInput>;
}

export interface StoryItemUpdateWithWhereUniqueWithoutStoriesInput {
  where: StoryItemWhereUniqueInput;
  data: StoryItemUpdateWithoutStoriesDataInput;
}

export interface CommentCreateOneWithoutNotificationsInput {
  create?: Maybe<CommentCreateWithoutNotificationsInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface StoryItemUpdateWithoutStoriesDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  type?: Maybe<StoryItemType>;
  url?: Maybe<String>;
  preview?: Maybe<String>;
  link?: Maybe<String>;
  text?: Maybe<StoryItemUpdatetextInput>;
  duration?: Maybe<Float>;
  inProject?: Maybe<Boolean>;
  likes?: Maybe<StoryItemUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
}

export interface CommentCreateOneWithoutCommentsInput {
  create?: Maybe<CommentCreateWithoutCommentsInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface StoryItemUpdatetextInput {
  set?: Maybe<String[] | String>;
}

export interface CommentCreatelikesInput {
  set?: Maybe<String[] | String>;
}

export interface StoryItemUpdatelikesInput {
  set?: Maybe<String[] | String>;
}

export interface NotificationCreateWithoutCommentInput {
  id?: Maybe<ID_Input>;
  target: UserCreateOneWithoutNotificationsInput;
  style: NotificationStyle;
  user?: Maybe<UserCreateOneInput>;
  users?: Maybe<UserCreateManyInput>;
  post?: Maybe<PostCreateOneWithoutNotificationsInput>;
  update?: Maybe<UpdateCreateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface StoryItemUpsertWithWhereUniqueWithoutStoriesInput {
  where: StoryItemWhereUniqueInput;
  update: StoryItemUpdateWithoutStoriesDataInput;
  create: StoryItemCreateWithoutStoriesInput;
}

export interface CommentCreateWithoutParentCommentInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  parentPost?: Maybe<PostCreateOneWithoutCommentsInput>;
  parentUpdate?: Maybe<UpdateCreateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface StoryItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<StoryItemType>;
  type_not?: Maybe<StoryItemType>;
  type_in?: Maybe<StoryItemType[] | StoryItemType>;
  type_not_in?: Maybe<StoryItemType[] | StoryItemType>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  preview?: Maybe<String>;
  preview_not?: Maybe<String>;
  preview_in?: Maybe<String[] | String>;
  preview_not_in?: Maybe<String[] | String>;
  preview_lt?: Maybe<String>;
  preview_lte?: Maybe<String>;
  preview_gt?: Maybe<String>;
  preview_gte?: Maybe<String>;
  preview_contains?: Maybe<String>;
  preview_not_contains?: Maybe<String>;
  preview_starts_with?: Maybe<String>;
  preview_not_starts_with?: Maybe<String>;
  preview_ends_with?: Maybe<String>;
  preview_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  duration?: Maybe<Float>;
  duration_not?: Maybe<Float>;
  duration_in?: Maybe<Float[] | Float>;
  duration_not_in?: Maybe<Float[] | Float>;
  duration_lt?: Maybe<Float>;
  duration_lte?: Maybe<Float>;
  duration_gt?: Maybe<Float>;
  duration_gte?: Maybe<Float>;
  inProject?: Maybe<Boolean>;
  inProject_not?: Maybe<Boolean>;
  likesCount?: Maybe<Int>;
  likesCount_not?: Maybe<Int>;
  likesCount_in?: Maybe<Int[] | Int>;
  likesCount_not_in?: Maybe<Int[] | Int>;
  likesCount_lt?: Maybe<Int>;
  likesCount_lte?: Maybe<Int>;
  likesCount_gt?: Maybe<Int>;
  likesCount_gte?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  likedByMe_not?: Maybe<Boolean>;
  AND?: Maybe<StoryItemScalarWhereInput[] | StoryItemScalarWhereInput>;
  OR?: Maybe<StoryItemScalarWhereInput[] | StoryItemScalarWhereInput>;
  NOT?: Maybe<StoryItemScalarWhereInput[] | StoryItemScalarWhereInput>;
}

export interface NotificationCreateWithoutUpdateInput {
  id?: Maybe<ID_Input>;
  target: UserCreateOneWithoutNotificationsInput;
  style: NotificationStyle;
  user?: Maybe<UserCreateOneInput>;
  users?: Maybe<UserCreateManyInput>;
  post?: Maybe<PostCreateOneWithoutNotificationsInput>;
  comment?: Maybe<CommentCreateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface StoryItemUpdateManyWithWhereNestedInput {
  where: StoryItemScalarWhereInput;
  data: StoryItemUpdateManyDataInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface StoryItemUpdateManyDataInput {
  type?: Maybe<StoryItemType>;
  url?: Maybe<String>;
  preview?: Maybe<String>;
  link?: Maybe<String>;
  text?: Maybe<StoryItemUpdatetextInput>;
  duration?: Maybe<Float>;
  inProject?: Maybe<Boolean>;
  likes?: Maybe<StoryItemUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
}

export interface TopicUpdateManyInput {
  create?: Maybe<TopicCreateInput[] | TopicCreateInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueNestedInput[]
    | TopicUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueNestedInput[]
    | TopicUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface StoryUpsertWithWhereUniqueWithoutOwnerInput {
  where: StoryWhereUniqueInput;
  update: StoryUpdateWithoutOwnerDataInput;
  create: StoryCreateWithoutOwnerInput;
}

export interface TopicUpdateDataInput {
  topicID?: Maybe<String>;
  name?: Maybe<String>;
  parentList?: Maybe<ListUpdateOneWithoutMainTopicsInput>;
  parentTopic?: Maybe<TopicUpdateOneWithoutChildrenInput>;
  children?: Maybe<TopicUpdateManyWithoutParentTopicInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface StoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  type?: Maybe<StoryType>;
  type_not?: Maybe<StoryType>;
  type_in?: Maybe<StoryType[] | StoryType>;
  type_not_in?: Maybe<StoryType[] | StoryType>;
  preview?: Maybe<String>;
  preview_not?: Maybe<String>;
  preview_in?: Maybe<String[] | String>;
  preview_not_in?: Maybe<String[] | String>;
  preview_lt?: Maybe<String>;
  preview_lte?: Maybe<String>;
  preview_gt?: Maybe<String>;
  preview_gte?: Maybe<String>;
  preview_contains?: Maybe<String>;
  preview_not_contains?: Maybe<String>;
  preview_starts_with?: Maybe<String>;
  preview_not_starts_with?: Maybe<String>;
  preview_ends_with?: Maybe<String>;
  preview_not_ends_with?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  showcase_not?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
  save_not?: Maybe<Boolean>;
  AND?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
  OR?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
  NOT?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
}

export interface ListUpdateWithoutMainTopicsDataInput {
  listName?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface StoryUpdateManyWithWhereNestedInput {
  where: StoryScalarWhereInput;
  data: StoryUpdateManyDataInput;
}

export interface TopicUpdateOneWithoutChildrenInput {
  create?: Maybe<TopicCreateWithoutChildrenInput>;
  update?: Maybe<TopicUpdateWithoutChildrenDataInput>;
  upsert?: Maybe<TopicUpsertWithoutChildrenInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface StoryUpdateManyDataInput {
  title?: Maybe<String>;
  type?: Maybe<StoryType>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface TopicUpsertWithoutChildrenInput {
  update: TopicUpdateWithoutChildrenDataInput;
  create: TopicCreateWithoutChildrenInput;
}

export interface NotificationUpdateManyWithoutTargetInput {
  create?: Maybe<
    | NotificationCreateWithoutTargetInput[]
    | NotificationCreateWithoutTargetInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutTargetInput[]
    | NotificationUpdateWithWhereUniqueWithoutTargetInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutTargetInput[]
    | NotificationUpsertWithWhereUniqueWithoutTargetInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface TopicUpdateWithWhereUniqueWithoutParentTopicInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutParentTopicDataInput;
}

export interface NotificationUpdateWithWhereUniqueWithoutTargetInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutTargetDataInput;
}

export interface TopicUpsertWithWhereUniqueWithoutParentTopicInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutParentTopicDataInput;
  create: TopicCreateWithoutParentTopicInput;
}

export interface NotificationUpdateWithoutTargetDataInput {
  style?: Maybe<NotificationStyle>;
  user?: Maybe<UserUpdateOneInput>;
  users?: Maybe<UserUpdateManyInput>;
  post?: Maybe<PostUpdateOneWithoutNotificationsInput>;
  update?: Maybe<UpdateUpdateOneWithoutNotificationsInput>;
  comment?: Maybe<CommentUpdateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput;
  data: TopicUpdateManyDataInput;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TopicUpsertWithWhereUniqueNestedInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateDataInput;
  create: TopicCreateInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface SkillUpdateWithWhereUniqueWithoutOwnerInput {
  where: SkillWhereUniqueInput;
  data: SkillUpdateWithoutOwnerDataInput;
}

export interface PostUpdateOneWithoutNotificationsInput {
  create?: Maybe<PostCreateWithoutNotificationsInput>;
  update?: Maybe<PostUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<PostUpsertWithoutNotificationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface ExperienceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subText?: Maybe<String>;
  subText_not?: Maybe<String>;
  subText_in?: Maybe<String[] | String>;
  subText_not_in?: Maybe<String[] | String>;
  subText_lt?: Maybe<String>;
  subText_lte?: Maybe<String>;
  subText_gt?: Maybe<String>;
  subText_gte?: Maybe<String>;
  subText_contains?: Maybe<String>;
  subText_not_contains?: Maybe<String>;
  subText_starts_with?: Maybe<String>;
  subText_not_starts_with?: Maybe<String>;
  subText_ends_with?: Maybe<String>;
  subText_not_ends_with?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateMonth_not?: Maybe<String>;
  startDateMonth_in?: Maybe<String[] | String>;
  startDateMonth_not_in?: Maybe<String[] | String>;
  startDateMonth_lt?: Maybe<String>;
  startDateMonth_lte?: Maybe<String>;
  startDateMonth_gt?: Maybe<String>;
  startDateMonth_gte?: Maybe<String>;
  startDateMonth_contains?: Maybe<String>;
  startDateMonth_not_contains?: Maybe<String>;
  startDateMonth_starts_with?: Maybe<String>;
  startDateMonth_not_starts_with?: Maybe<String>;
  startDateMonth_ends_with?: Maybe<String>;
  startDateMonth_not_ends_with?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  startDateYear_not?: Maybe<Int>;
  startDateYear_in?: Maybe<Int[] | Int>;
  startDateYear_not_in?: Maybe<Int[] | Int>;
  startDateYear_lt?: Maybe<Int>;
  startDateYear_lte?: Maybe<Int>;
  startDateYear_gt?: Maybe<Int>;
  startDateYear_gte?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateMonth_not?: Maybe<String>;
  endDateMonth_in?: Maybe<String[] | String>;
  endDateMonth_not_in?: Maybe<String[] | String>;
  endDateMonth_lt?: Maybe<String>;
  endDateMonth_lte?: Maybe<String>;
  endDateMonth_gt?: Maybe<String>;
  endDateMonth_gte?: Maybe<String>;
  endDateMonth_contains?: Maybe<String>;
  endDateMonth_not_contains?: Maybe<String>;
  endDateMonth_starts_with?: Maybe<String>;
  endDateMonth_not_starts_with?: Maybe<String>;
  endDateMonth_ends_with?: Maybe<String>;
  endDateMonth_not_ends_with?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  endDateYear_not?: Maybe<Int>;
  endDateYear_in?: Maybe<Int[] | Int>;
  endDateYear_not_in?: Maybe<Int[] | Int>;
  endDateYear_lt?: Maybe<Int>;
  endDateYear_lte?: Maybe<Int>;
  endDateYear_gt?: Maybe<Int>;
  endDateYear_gte?: Maybe<Int>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  locationID?: Maybe<String>;
  locationID_not?: Maybe<String>;
  locationID_in?: Maybe<String[] | String>;
  locationID_not_in?: Maybe<String[] | String>;
  locationID_lt?: Maybe<String>;
  locationID_lte?: Maybe<String>;
  locationID_gt?: Maybe<String>;
  locationID_gte?: Maybe<String>;
  locationID_contains?: Maybe<String>;
  locationID_not_contains?: Maybe<String>;
  locationID_starts_with?: Maybe<String>;
  locationID_not_starts_with?: Maybe<String>;
  locationID_ends_with?: Maybe<String>;
  locationID_not_ends_with?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLat_not?: Maybe<Float>;
  locationLat_in?: Maybe<Float[] | Float>;
  locationLat_not_in?: Maybe<Float[] | Float>;
  locationLat_lt?: Maybe<Float>;
  locationLat_lte?: Maybe<Float>;
  locationLat_gt?: Maybe<Float>;
  locationLat_gte?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  locationLon_not?: Maybe<Float>;
  locationLon_in?: Maybe<Float[] | Float>;
  locationLon_not_in?: Maybe<Float[] | Float>;
  locationLon_lt?: Maybe<Float>;
  locationLon_lte?: Maybe<Float>;
  locationLon_gt?: Maybe<Float>;
  locationLon_gte?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
  currentRole_not?: Maybe<Boolean>;
  AND?: Maybe<ExperienceWhereInput[] | ExperienceWhereInput>;
  OR?: Maybe<ExperienceWhereInput[] | ExperienceWhereInput>;
  NOT?: Maybe<ExperienceWhereInput[] | ExperienceWhereInput>;
}

export interface PostUpdateWithoutNotificationsDataInput {
  lastUpdated?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicUpdateOneInput>;
  topics?: Maybe<TopicUpdateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content?: Maybe<String>;
  images?: Maybe<PostUpdateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutParentPostInput>;
  updates?: Maybe<UpdateUpdateManyWithoutParentPostInput>;
  likes?: Maybe<PostUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface UpdateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UpdateWhereInput>;
  AND?: Maybe<UpdateSubscriptionWhereInput[] | UpdateSubscriptionWhereInput>;
  OR?: Maybe<UpdateSubscriptionWhereInput[] | UpdateSubscriptionWhereInput>;
  NOT?: Maybe<UpdateSubscriptionWhereInput[] | UpdateSubscriptionWhereInput>;
}

export interface UpdateUpdateManyWithoutParentPostInput {
  create?: Maybe<
    UpdateCreateWithoutParentPostInput[] | UpdateCreateWithoutParentPostInput
  >;
  delete?: Maybe<UpdateWhereUniqueInput[] | UpdateWhereUniqueInput>;
  connect?: Maybe<UpdateWhereUniqueInput[] | UpdateWhereUniqueInput>;
  set?: Maybe<UpdateWhereUniqueInput[] | UpdateWhereUniqueInput>;
  disconnect?: Maybe<UpdateWhereUniqueInput[] | UpdateWhereUniqueInput>;
  update?: Maybe<
    | UpdateUpdateWithWhereUniqueWithoutParentPostInput[]
    | UpdateUpdateWithWhereUniqueWithoutParentPostInput
  >;
  upsert?: Maybe<
    | UpdateUpsertWithWhereUniqueWithoutParentPostInput[]
    | UpdateUpsertWithWhereUniqueWithoutParentPostInput
  >;
  deleteMany?: Maybe<UpdateScalarWhereInput[] | UpdateScalarWhereInput>;
  updateMany?: Maybe<
    | UpdateUpdateManyWithWhereNestedInput[]
    | UpdateUpdateManyWithWhereNestedInput
  >;
}

export interface SkillSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SkillWhereInput>;
  AND?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
  OR?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
  NOT?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
}

export interface UpdateUpdateWithWhereUniqueWithoutParentPostInput {
  where: UpdateWhereUniqueInput;
  data: UpdateUpdateWithoutParentPostDataInput;
}

export interface TopicWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  topicID?: Maybe<String>;
  topicID_not?: Maybe<String>;
  topicID_in?: Maybe<String[] | String>;
  topicID_not_in?: Maybe<String[] | String>;
  topicID_lt?: Maybe<String>;
  topicID_lte?: Maybe<String>;
  topicID_gt?: Maybe<String>;
  topicID_gte?: Maybe<String>;
  topicID_contains?: Maybe<String>;
  topicID_not_contains?: Maybe<String>;
  topicID_starts_with?: Maybe<String>;
  topicID_not_starts_with?: Maybe<String>;
  topicID_ends_with?: Maybe<String>;
  topicID_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  parentList?: Maybe<ListWhereInput>;
  parentTopic?: Maybe<TopicWhereInput>;
  children_every?: Maybe<TopicWhereInput>;
  children_some?: Maybe<TopicWhereInput>;
  children_none?: Maybe<TopicWhereInput>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<TopicWhereInput[] | TopicWhereInput>;
  OR?: Maybe<TopicWhereInput[] | TopicWhereInput>;
  NOT?: Maybe<TopicWhereInput[] | TopicWhereInput>;
}

export interface UpdateUpdateWithoutParentPostDataInput {
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<UpdateUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutParentUpdateInput>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutUpdateInput>;
  _deleted?: Maybe<Boolean>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface UpdateUpdatelikesInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  roles?: Maybe<UserUpdaterolesInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface CommentUpdateManyWithoutParentUpdateInput {
  create?: Maybe<
    | CommentCreateWithoutParentUpdateInput[]
    | CommentCreateWithoutParentUpdateInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutParentUpdateInput[]
    | CommentUpdateWithWhereUniqueWithoutParentUpdateInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutParentUpdateInput[]
    | CommentUpsertWithWhereUniqueWithoutParentUpdateInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface UpdateUpdateInput {
  parentPost?: Maybe<PostUpdateOneRequiredWithoutUpdatesInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<UpdateUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutParentUpdateInput>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutUpdateInput>;
  _deleted?: Maybe<Boolean>;
}

export interface CommentUpdateWithWhereUniqueWithoutParentUpdateInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutParentUpdateDataInput;
}

export interface TopicUpdateInput {
  topicID?: Maybe<String>;
  name?: Maybe<String>;
  parentList?: Maybe<ListUpdateOneWithoutMainTopicsInput>;
  parentTopic?: Maybe<TopicUpdateOneWithoutChildrenInput>;
  children?: Maybe<TopicUpdateManyWithoutParentTopicInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface CommentUpdateWithoutParentUpdateDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  parentPost?: Maybe<PostUpdateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentUpdateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface StoryUpdateWithoutItemsDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutStoriesInput>;
  title?: Maybe<String>;
  type?: Maybe<StoryType>;
  topics?: Maybe<TopicUpdateManyInput>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface PostUpdateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface StoryItemUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  stories?: Maybe<StoryUpdateManyWithoutItemsInput>;
  type?: Maybe<StoryItemType>;
  url?: Maybe<String>;
  preview?: Maybe<String>;
  link?: Maybe<String>;
  text?: Maybe<StoryItemUpdatetextInput>;
  duration?: Maybe<Float>;
  inProject?: Maybe<Boolean>;
  likes?: Maybe<StoryItemUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
}

export interface PostUpdateWithoutCommentsDataInput {
  lastUpdated?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicUpdateOneInput>;
  topics?: Maybe<TopicUpdateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content?: Maybe<String>;
  images?: Maybe<PostUpdateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  updates?: Maybe<UpdateUpdateManyWithoutParentPostInput>;
  likes?: Maybe<PostUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutPostInput>;
  _deleted?: Maybe<Boolean>;
}

export type MeetingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdatelikesInput {
  set?: Maybe<String[] | String>;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NotificationUpdateManyWithoutPostInput {
  create?: Maybe<
    NotificationCreateWithoutPostInput[] | NotificationCreateWithoutPostInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutPostInput[]
    | NotificationUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutPostInput[]
    | NotificationUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NotificationUpdateWithWhereUniqueWithoutPostInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutPostDataInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NotificationUpdateWithoutPostDataInput {
  target?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
  style?: Maybe<NotificationStyle>;
  user?: Maybe<UserUpdateOneInput>;
  users?: Maybe<UserUpdateManyInput>;
  update?: Maybe<UpdateUpdateOneWithoutNotificationsInput>;
  comment?: Maybe<CommentUpdateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export type SkillWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneRequiredWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type StoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutNotificationsDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export type StoryItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageUpdateManyInput {
  create?: Maybe<MessageCreateInput[] | MessageCreateInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueNestedInput[]
    | MessageUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueNestedInput[]
    | MessageUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export type TopicWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  topicID?: Maybe<String>;
}>;

export interface MessageUpdateWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateDataInput;
}

export type UpdateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageUpsertWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateDataInput;
  create: MessageCreateInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface TopicCreateManyInput {
  create?: Maybe<TopicCreateInput[] | TopicCreateInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface UpdateUpdateOneWithoutNotificationsInput {
  create?: Maybe<UpdateCreateWithoutNotificationsInput>;
  update?: Maybe<UpdateUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UpdateUpsertWithoutNotificationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UpdateWhereUniqueInput>;
}

export interface TopicCreateOneWithoutChildrenInput {
  create?: Maybe<TopicCreateWithoutChildrenInput>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface UpdateUpdateWithoutNotificationsDataInput {
  parentPost?: Maybe<PostUpdateOneRequiredWithoutUpdatesInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<UpdateUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutParentUpdateInput>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface SkillCreateManyWithoutOwnerInput {
  create?: Maybe<SkillCreateWithoutOwnerInput[] | SkillCreateWithoutOwnerInput>;
  connect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
}

export interface UpdateUpsertWithoutNotificationsInput {
  update: UpdateUpdateWithoutNotificationsDataInput;
  create: UpdateCreateWithoutNotificationsInput;
}

export interface EducationCreateManyWithoutOwnerInput {
  create?: Maybe<
    EducationCreateWithoutOwnerInput[] | EducationCreateWithoutOwnerInput
  >;
  connect?: Maybe<EducationWhereUniqueInput[] | EducationWhereUniqueInput>;
}

export interface CommentUpdateOneWithoutNotificationsInput {
  create?: Maybe<CommentCreateWithoutNotificationsInput>;
  update?: Maybe<CommentUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<CommentUpsertWithoutNotificationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface TopicCreateOneInput {
  create?: Maybe<TopicCreateInput>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface CommentUpdateWithoutNotificationsDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  parentPost?: Maybe<PostUpdateOneWithoutCommentsInput>;
  parentUpdate?: Maybe<UpdateUpdateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentUpdateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface UpdateCreateOneWithoutCommentsInput {
  create?: Maybe<UpdateCreateWithoutCommentsInput>;
  connect?: Maybe<UpdateWhereUniqueInput>;
}

export interface CommentUpdateOneWithoutCommentsInput {
  create?: Maybe<CommentCreateWithoutCommentsInput>;
  update?: Maybe<CommentUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<CommentUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CommentUpdateWithoutCommentsDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  parentPost?: Maybe<PostUpdateOneWithoutCommentsInput>;
  parentUpdate?: Maybe<UpdateUpdateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentUpdateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface CommentUpdatelikesInput {
  set?: Maybe<String[] | String>;
}

export interface StoryCreateOneInput {
  create?: Maybe<StoryCreateInput>;
  connect?: Maybe<StoryWhereUniqueInput>;
}

export interface NotificationUpdateManyWithoutCommentInput {
  create?: Maybe<
    | NotificationCreateWithoutCommentInput[]
    | NotificationCreateWithoutCommentInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutCommentInput[]
    | NotificationUpdateWithWhereUniqueWithoutCommentInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutCommentInput[]
    | NotificationUpsertWithWhereUniqueWithoutCommentInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface MeetingCreateManyWithoutUsersInput {
  create?: Maybe<
    MeetingCreateWithoutUsersInput[] | MeetingCreateWithoutUsersInput
  >;
  connect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
}

export interface NotificationUpdateWithWhereUniqueWithoutCommentInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutCommentDataInput;
}

export interface GroupCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutToInput>;
  latestMessage?: Maybe<MessageCreateOneInput>;
  hidden?: Maybe<UserCreateManyInput>;
}

export interface NotificationUpdateWithoutCommentDataInput {
  target?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
  style?: Maybe<NotificationStyle>;
  user?: Maybe<UserUpdateOneInput>;
  users?: Maybe<UserUpdateManyInput>;
  post?: Maybe<PostUpdateOneWithoutNotificationsInput>;
  update?: Maybe<UpdateUpdateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface MessageCreateOneInput {
  create?: Maybe<MessageCreateInput>;
  connect?: Maybe<MessageWhereUniqueInput>;
}

export interface NotificationUpsertWithWhereUniqueWithoutCommentInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutCommentDataInput;
  create: NotificationCreateWithoutCommentInput;
}

export interface UserCreateManyWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput[] | UserCreateWithoutGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  style?: Maybe<NotificationStyle>;
  style_not?: Maybe<NotificationStyle>;
  style_in?: Maybe<NotificationStyle[] | NotificationStyle>;
  style_not_in?: Maybe<NotificationStyle[] | NotificationStyle>;
  seen?: Maybe<Boolean>;
  seen_not?: Maybe<Boolean>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface StoryItemCreateManyWithoutStoriesInput {
  create?: Maybe<
    StoryItemCreateWithoutStoriesInput[] | StoryItemCreateWithoutStoriesInput
  >;
  connect?: Maybe<StoryItemWhereUniqueInput[] | StoryItemWhereUniqueInput>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface NotificationCreateManyWithoutTargetInput {
  create?: Maybe<
    | NotificationCreateWithoutTargetInput[]
    | NotificationCreateWithoutTargetInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface NotificationUpdateManyDataInput {
  style?: Maybe<NotificationStyle>;
  seen?: Maybe<Boolean>;
}

export interface UpdateCreateManyWithoutParentPostInput {
  create?: Maybe<
    UpdateCreateWithoutParentPostInput[] | UpdateCreateWithoutParentPostInput
  >;
  connect?: Maybe<UpdateWhereUniqueInput[] | UpdateWhereUniqueInput>;
}

export interface CommentUpsertWithoutCommentsInput {
  update: CommentUpdateWithoutCommentsDataInput;
  create: CommentCreateWithoutCommentsInput;
}

export interface CommentCreateWithoutParentUpdateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  parentPost?: Maybe<PostCreateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentCreateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface CommentUpdateManyWithoutParentCommentInput {
  create?: Maybe<
    | CommentCreateWithoutParentCommentInput[]
    | CommentCreateWithoutParentCommentInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutParentCommentInput[]
    | CommentUpdateWithWhereUniqueWithoutParentCommentInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutParentCommentInput[]
    | CommentUpsertWithWhereUniqueWithoutParentCommentInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationCreateManyWithoutPostInput {
  create?: Maybe<
    NotificationCreateWithoutPostInput[] | NotificationCreateWithoutPostInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutParentCommentInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutParentCommentDataInput;
}

export interface MessageCreateManyInput {
  create?: Maybe<MessageCreateInput[] | MessageCreateInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface CommentUpdateWithoutParentCommentDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  parentPost?: Maybe<PostUpdateOneWithoutCommentsInput>;
  parentUpdate?: Maybe<UpdateUpdateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface CommentCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  parentPost?: Maybe<PostCreateOneWithoutCommentsInput>;
  parentUpdate?: Maybe<UpdateCreateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentCreateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface CommentUpsertWithWhereUniqueWithoutParentCommentInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutParentCommentDataInput;
  create: CommentCreateWithoutParentCommentInput;
}

export interface NotificationCreateManyWithoutCommentInput {
  create?: Maybe<
    | NotificationCreateWithoutCommentInput[]
    | NotificationCreateWithoutCommentInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  likesCount?: Maybe<Int>;
  likesCount_not?: Maybe<Int>;
  likesCount_in?: Maybe<Int[] | Int>;
  likesCount_not_in?: Maybe<Int[] | Int>;
  likesCount_lt?: Maybe<Int>;
  likesCount_lte?: Maybe<Int>;
  likesCount_gt?: Maybe<Int>;
  likesCount_gte?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  likedByMe_not?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  commentsCount_not?: Maybe<Int>;
  commentsCount_in?: Maybe<Int[] | Int>;
  commentsCount_not_in?: Maybe<Int[] | Int>;
  commentsCount_lt?: Maybe<Int>;
  commentsCount_lte?: Maybe<Int>;
  commentsCount_gt?: Maybe<Int>;
  commentsCount_gte?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
  _deleted_not?: Maybe<Boolean>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface NotificationCreateManyWithoutUpdateInput {
  create?: Maybe<
    | NotificationCreateWithoutUpdateInput[]
    | NotificationCreateWithoutUpdateInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface CommentUpdateManyDataInput {
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface ListUpdateOneWithoutMainTopicsInput {
  create?: Maybe<ListCreateWithoutMainTopicsInput>;
  update?: Maybe<ListUpdateWithoutMainTopicsDataInput>;
  upsert?: Maybe<ListUpsertWithoutMainTopicsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ListWhereUniqueInput>;
}

export interface CommentUpsertWithoutNotificationsInput {
  update: CommentUpdateWithoutNotificationsDataInput;
  create: CommentCreateWithoutNotificationsInput;
}

export interface TopicUpdateWithoutChildrenDataInput {
  topicID?: Maybe<String>;
  name?: Maybe<String>;
  parentList?: Maybe<ListUpdateOneWithoutMainTopicsInput>;
  parentTopic?: Maybe<TopicUpdateOneWithoutChildrenInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface NotificationUpsertWithWhereUniqueWithoutPostInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutPostDataInput;
  create: NotificationCreateWithoutPostInput;
}

export interface TopicUpdateWithoutParentTopicDataInput {
  topicID?: Maybe<String>;
  name?: Maybe<String>;
  parentList?: Maybe<ListUpdateOneWithoutMainTopicsInput>;
  children?: Maybe<TopicUpdateManyWithoutParentTopicInput>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface TopicUpdateManyDataInput {
  topicID?: Maybe<String>;
  name?: Maybe<String>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface CommentUpsertWithWhereUniqueWithoutParentUpdateInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutParentUpdateDataInput;
  create: CommentCreateWithoutParentUpdateInput;
}

export interface SkillUpdateWithoutOwnerDataInput {
  skill?: Maybe<String>;
  isExpert?: Maybe<Boolean>;
}

export interface NotificationUpdateManyWithoutUpdateInput {
  create?: Maybe<
    | NotificationCreateWithoutUpdateInput[]
    | NotificationCreateWithoutUpdateInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutUpdateInput[]
    | NotificationUpdateWithWhereUniqueWithoutUpdateInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutUpdateInput[]
    | NotificationUpsertWithWhereUniqueWithoutUpdateInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface StoryItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StoryItemWhereInput>;
  AND?: Maybe<
    StoryItemSubscriptionWhereInput[] | StoryItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    StoryItemSubscriptionWhereInput[] | StoryItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    StoryItemSubscriptionWhereInput[] | StoryItemSubscriptionWhereInput
  >;
}

export interface NotificationUpdateWithWhereUniqueWithoutUpdateInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutUpdateDataInput;
}

export interface MeetingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MeetingWhereInput>;
  AND?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
  OR?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
  NOT?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
}

export interface NotificationUpdateWithoutUpdateDataInput {
  target?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
  style?: Maybe<NotificationStyle>;
  user?: Maybe<UserUpdateOneInput>;
  users?: Maybe<UserUpdateManyInput>;
  post?: Maybe<PostUpdateOneWithoutNotificationsInput>;
  comment?: Maybe<CommentUpdateOneWithoutNotificationsInput>;
  seen?: Maybe<Boolean>;
}

export interface UpdateUpdateManyMutationInput {
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<UpdateUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface NotificationUpsertWithWhereUniqueWithoutUpdateInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutUpdateDataInput;
  create: NotificationCreateWithoutUpdateInput;
}

export interface StoryUpsertWithWhereUniqueWithoutItemsInput {
  where: StoryWhereUniqueInput;
  update: StoryUpdateWithoutItemsDataInput;
  create: StoryCreateWithoutItemsInput;
}

export interface UpdateUpsertWithWhereUniqueWithoutParentPostInput {
  where: UpdateWhereUniqueInput;
  update: UpdateUpdateWithoutParentPostDataInput;
  create: UpdateCreateWithoutParentPostInput;
}

export interface StoryCreateManyWithoutItemsInput {
  create?: Maybe<StoryCreateWithoutItemsInput[] | StoryCreateWithoutItemsInput>;
  connect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
}

export interface UpdateScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  likesCount?: Maybe<Int>;
  likesCount_not?: Maybe<Int>;
  likesCount_in?: Maybe<Int[] | Int>;
  likesCount_not_in?: Maybe<Int[] | Int>;
  likesCount_lt?: Maybe<Int>;
  likesCount_lte?: Maybe<Int>;
  likesCount_gt?: Maybe<Int>;
  likesCount_gte?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  likedByMe_not?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  commentsCount_not?: Maybe<Int>;
  commentsCount_in?: Maybe<Int[] | Int>;
  commentsCount_not_in?: Maybe<Int[] | Int>;
  commentsCount_lt?: Maybe<Int>;
  commentsCount_lte?: Maybe<Int>;
  commentsCount_gt?: Maybe<Int>;
  commentsCount_gte?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  sharesCount_not?: Maybe<Int>;
  sharesCount_in?: Maybe<Int[] | Int>;
  sharesCount_not_in?: Maybe<Int[] | Int>;
  sharesCount_lt?: Maybe<Int>;
  sharesCount_lte?: Maybe<Int>;
  sharesCount_gt?: Maybe<Int>;
  sharesCount_gte?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
  _deleted_not?: Maybe<Boolean>;
  AND?: Maybe<UpdateScalarWhereInput[] | UpdateScalarWhereInput>;
  OR?: Maybe<UpdateScalarWhereInput[] | UpdateScalarWhereInput>;
  NOT?: Maybe<UpdateScalarWhereInput[] | UpdateScalarWhereInput>;
}

export interface UserUpdateWithoutSkillsDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UpdateUpdateManyWithWhereNestedInput {
  where: UpdateScalarWhereInput;
  data: UpdateUpdateManyDataInput;
}

export interface PostUpdateManyMutationInput {
  lastUpdated?: Maybe<DateTimeInput>;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content?: Maybe<String>;
  images?: Maybe<PostUpdateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  likes?: Maybe<PostUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface UpdateUpdateManyDataInput {
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<UpdateUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface MessageUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface PostUpsertWithoutNotificationsInput {
  update: PostUpdateWithoutNotificationsDataInput;
  create: PostCreateWithoutNotificationsInput;
}

export interface UserUpdateManyWithoutMeetingsInput {
  create?: Maybe<
    UserCreateWithoutMeetingsInput[] | UserCreateWithoutMeetingsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutMeetingsInput[]
    | UserUpdateWithWhereUniqueWithoutMeetingsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutMeetingsInput[]
    | UserUpsertWithWhereUniqueWithoutMeetingsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpsertWithWhereUniqueWithoutTargetInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutTargetDataInput;
  create: NotificationCreateWithoutTargetInput;
}

export interface TopicUpsertWithWhereUniqueWithoutParentListInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutParentListDataInput;
  create: TopicCreateWithoutParentListInput;
}

export interface UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutGroupsDataInput;
  create: UserCreateWithoutGroupsInput;
}

export interface ListCreateOneWithoutMainTopicsInput {
  create?: Maybe<ListCreateWithoutMainTopicsInput>;
  connect?: Maybe<ListWhereUniqueInput>;
}

export interface GroupUpsertWithoutMessagesInput {
  update: GroupUpdateWithoutMessagesDataInput;
  create: GroupCreateWithoutMessagesInput;
}

export interface ExperienceCreateManyWithoutOwnerInput {
  create?: Maybe<
    ExperienceCreateWithoutOwnerInput[] | ExperienceCreateWithoutOwnerInput
  >;
  connect?: Maybe<ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput>;
}

export interface MessageUpsertNestedInput {
  update: MessageUpdateDataInput;
  create: MessageCreateInput;
}

export interface CommentCreateManyWithoutParentPostInput {
  create?: Maybe<
    CommentCreateWithoutParentPostInput[] | CommentCreateWithoutParentPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface GroupUpsertWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutUsersDataInput;
  create: GroupCreateWithoutUsersInput;
}

export interface UserCreateManyWithoutConnectionsInput {
  create?: Maybe<
    UserCreateWithoutConnectionsInput[] | UserCreateWithoutConnectionsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  OR?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  NOT?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface UserCreateOneWithoutStoriesInput {
  create?: Maybe<UserCreateWithoutStoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithoutStoriesInput {
  update: UserUpdateWithoutStoriesDataInput;
  create: UserCreateWithoutStoriesInput;
}

export interface MessageCreateWithoutToInput {
  id?: Maybe<ID_Input>;
  from: UserCreateOneInput;
  content: String;
  hidden?: Maybe<UserCreateManyInput>;
}

export interface StoryUpsertNestedInput {
  update: StoryUpdateDataInput;
  create: StoryCreateInput;
}

export interface StoryCreateManyWithoutOwnerInput {
  create?: Maybe<StoryCreateWithoutOwnerInput[] | StoryCreateWithoutOwnerInput>;
  connect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface PostCreateOneWithoutNotificationsInput {
  create?: Maybe<PostCreateWithoutNotificationsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  lastUpdated: DateTimeInput;
  owner: UserCreateOneWithoutPostsInput;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  subField?: Maybe<TopicCreateOneInput>;
  topics?: Maybe<TopicCreateManyInput>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content: String;
  images?: Maybe<PostCreateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  updates?: Maybe<UpdateCreateManyWithoutParentPostInput>;
  likes?: Maybe<PostCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutPostInput>;
  _deleted?: Maybe<Boolean>;
}

export interface UserUpsertWithWhereUniqueWithoutConnectionsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutConnectionsDataInput;
  create: UserCreateWithoutConnectionsInput;
}

export interface UpdateCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  parentPost: PostCreateOneWithoutUpdatesInput;
  content: String;
  image?: Maybe<String>;
  likes?: Maybe<UpdateCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutParentUpdateInput>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface CommentCreateManyWithoutParentCommentInput {
  create?: Maybe<
    | CommentCreateWithoutParentCommentInput[]
    | CommentCreateWithoutParentCommentInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface PostUpsertWithoutUpdatesInput {
  update: PostUpdateWithoutUpdatesDataInput;
  create: PostCreateWithoutUpdatesInput;
}

export interface TopicUpdateWithWhereUniqueNestedInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateDataInput;
}

export interface UpdateUpsertWithoutCommentsInput {
  update: UpdateUpdateWithoutCommentsDataInput;
  create: UpdateCreateWithoutCommentsInput;
}

export interface TopicUpdateManyWithoutParentTopicInput {
  create?: Maybe<
    TopicCreateWithoutParentTopicInput[] | TopicCreateWithoutParentTopicInput
  >;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutParentTopicInput[]
    | TopicUpdateWithWhereUniqueWithoutParentTopicInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutParentTopicInput[]
    | TopicUpsertWithWhereUniqueWithoutParentTopicInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpsertWithWhereUniqueWithoutParentPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutParentPostDataInput;
  create: CommentCreateWithoutParentPostInput;
}

export interface SkillUpdateManyWithoutOwnerInput {
  create?: Maybe<SkillCreateWithoutOwnerInput[] | SkillCreateWithoutOwnerInput>;
  delete?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  connect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  set?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  disconnect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  update?: Maybe<
    | SkillUpdateWithWhereUniqueWithoutOwnerInput[]
    | SkillUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | SkillUpsertWithWhereUniqueWithoutOwnerInput[]
    | SkillUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
  updateMany?: Maybe<
    SkillUpdateManyWithWhereNestedInput[] | SkillUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpsertWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutOwnerDataInput;
  create: PostCreateWithoutOwnerInput;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastUpdated?: Maybe<DateTimeInput>;
  lastUpdated_not?: Maybe<DateTimeInput>;
  lastUpdated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_lt?: Maybe<DateTimeInput>;
  lastUpdated_lte?: Maybe<DateTimeInput>;
  lastUpdated_gt?: Maybe<DateTimeInput>;
  lastUpdated_gte?: Maybe<DateTimeInput>;
  isGoal?: Maybe<Boolean>;
  isGoal_not?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goal_not?: Maybe<String>;
  goal_in?: Maybe<String[] | String>;
  goal_not_in?: Maybe<String[] | String>;
  goal_lt?: Maybe<String>;
  goal_lte?: Maybe<String>;
  goal_gt?: Maybe<String>;
  goal_gte?: Maybe<String>;
  goal_contains?: Maybe<String>;
  goal_not_contains?: Maybe<String>;
  goal_starts_with?: Maybe<String>;
  goal_not_starts_with?: Maybe<String>;
  goal_ends_with?: Maybe<String>;
  goal_not_ends_with?: Maybe<String>;
  goalStatus?: Maybe<String>;
  goalStatus_not?: Maybe<String>;
  goalStatus_in?: Maybe<String[] | String>;
  goalStatus_not_in?: Maybe<String[] | String>;
  goalStatus_lt?: Maybe<String>;
  goalStatus_lte?: Maybe<String>;
  goalStatus_gt?: Maybe<String>;
  goalStatus_gte?: Maybe<String>;
  goalStatus_contains?: Maybe<String>;
  goalStatus_not_contains?: Maybe<String>;
  goalStatus_starts_with?: Maybe<String>;
  goalStatus_not_starts_with?: Maybe<String>;
  goalStatus_ends_with?: Maybe<String>;
  goalStatus_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  locationID?: Maybe<String>;
  locationID_not?: Maybe<String>;
  locationID_in?: Maybe<String[] | String>;
  locationID_not_in?: Maybe<String[] | String>;
  locationID_lt?: Maybe<String>;
  locationID_lte?: Maybe<String>;
  locationID_gt?: Maybe<String>;
  locationID_gte?: Maybe<String>;
  locationID_contains?: Maybe<String>;
  locationID_not_contains?: Maybe<String>;
  locationID_starts_with?: Maybe<String>;
  locationID_not_starts_with?: Maybe<String>;
  locationID_ends_with?: Maybe<String>;
  locationID_not_ends_with?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLat_not?: Maybe<Float>;
  locationLat_in?: Maybe<Float[] | Float>;
  locationLat_not_in?: Maybe<Float[] | Float>;
  locationLat_lt?: Maybe<Float>;
  locationLat_lte?: Maybe<Float>;
  locationLat_gt?: Maybe<Float>;
  locationLat_gte?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  locationLon_not?: Maybe<Float>;
  locationLon_in?: Maybe<Float[] | Float>;
  locationLon_not_in?: Maybe<Float[] | Float>;
  locationLon_lt?: Maybe<Float>;
  locationLon_lte?: Maybe<Float>;
  locationLon_gt?: Maybe<Float>;
  locationLon_gte?: Maybe<Float>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  video?: Maybe<String>;
  video_not?: Maybe<String>;
  video_in?: Maybe<String[] | String>;
  video_not_in?: Maybe<String[] | String>;
  video_lt?: Maybe<String>;
  video_lte?: Maybe<String>;
  video_gt?: Maybe<String>;
  video_gte?: Maybe<String>;
  video_contains?: Maybe<String>;
  video_not_contains?: Maybe<String>;
  video_starts_with?: Maybe<String>;
  video_not_starts_with?: Maybe<String>;
  video_ends_with?: Maybe<String>;
  video_not_ends_with?: Maybe<String>;
  pitch?: Maybe<String>;
  pitch_not?: Maybe<String>;
  pitch_in?: Maybe<String[] | String>;
  pitch_not_in?: Maybe<String[] | String>;
  pitch_lt?: Maybe<String>;
  pitch_lte?: Maybe<String>;
  pitch_gt?: Maybe<String>;
  pitch_gte?: Maybe<String>;
  pitch_contains?: Maybe<String>;
  pitch_not_contains?: Maybe<String>;
  pitch_starts_with?: Maybe<String>;
  pitch_not_starts_with?: Maybe<String>;
  pitch_ends_with?: Maybe<String>;
  pitch_not_ends_with?: Maybe<String>;
  likesCount?: Maybe<Int>;
  likesCount_not?: Maybe<Int>;
  likesCount_in?: Maybe<Int[] | Int>;
  likesCount_not_in?: Maybe<Int[] | Int>;
  likesCount_lt?: Maybe<Int>;
  likesCount_lte?: Maybe<Int>;
  likesCount_gt?: Maybe<Int>;
  likesCount_gte?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  likedByMe_not?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  commentsCount_not?: Maybe<Int>;
  commentsCount_in?: Maybe<Int[] | Int>;
  commentsCount_not_in?: Maybe<Int[] | Int>;
  commentsCount_lt?: Maybe<Int>;
  commentsCount_lte?: Maybe<Int>;
  commentsCount_gt?: Maybe<Int>;
  commentsCount_gte?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  sharesCount_not?: Maybe<Int>;
  sharesCount_in?: Maybe<Int[] | Int>;
  sharesCount_not_in?: Maybe<Int[] | Int>;
  sharesCount_lt?: Maybe<Int>;
  sharesCount_lte?: Maybe<Int>;
  sharesCount_gt?: Maybe<Int>;
  sharesCount_gte?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
  _deleted_not?: Maybe<Boolean>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface TopicUpdateManyMutationInput {
  topicID?: Maybe<String>;
  name?: Maybe<String>;
  icon?: Maybe<String>;
  color?: Maybe<String>;
  image?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface StoryUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutStoriesInput>;
  title?: Maybe<String>;
  type?: Maybe<StoryType>;
  topics?: Maybe<TopicUpdateManyInput>;
  items?: Maybe<StoryItemUpdateManyWithoutStoriesInput>;
  preview?: Maybe<String>;
  showcase?: Maybe<Boolean>;
  save?: Maybe<Boolean>;
}

export interface PostUpdateManyDataInput {
  lastUpdated?: Maybe<DateTimeInput>;
  isGoal?: Maybe<Boolean>;
  goal?: Maybe<String>;
  goalStatus?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  content?: Maybe<String>;
  images?: Maybe<PostUpdateimagesInput>;
  video?: Maybe<String>;
  pitch?: Maybe<String>;
  likes?: Maybe<PostUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  sharesCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface NotificationUpdateManyMutationInput {
  style?: Maybe<NotificationStyle>;
  seen?: Maybe<Boolean>;
}

export interface CommentUpdateManyMutationInput {
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  _deleted?: Maybe<Boolean>;
}

export interface UserCreateManyWithoutMeetingsInput {
  create?: Maybe<
    UserCreateWithoutMeetingsInput[] | UserCreateWithoutMeetingsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface TopicCreateManyWithoutParentListInput {
  create?: Maybe<
    TopicCreateWithoutParentListInput[] | TopicCreateWithoutParentListInput
  >;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface TopicCreateManyWithoutParentTopicInput {
  create?: Maybe<
    TopicCreateWithoutParentTopicInput[] | TopicCreateWithoutParentTopicInput
  >;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface ListCreateInput {
  id?: Maybe<ID_Input>;
  listName: String;
  icon?: Maybe<String>;
  mainTopics?: Maybe<TopicCreateManyWithoutParentListInput>;
}

export interface PostCreateOneWithoutUpdatesInput {
  create?: Maybe<PostCreateWithoutUpdatesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface EducationCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutEducationInput;
  name: String;
  subText: String;
  startDateMonth?: Maybe<String>;
  startDateYear: Int;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface UserCreaterolesInput {
  set?: Maybe<Role[] | Role>;
}

export interface UserCreateOneWithoutEducationInput {
  create?: Maybe<UserCreateWithoutEducationInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface StoryItemCreatetextInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateWithoutEducationInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EducationUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutEducationInput>;
  name?: Maybe<String>;
  subText?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface CommentUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  parentPost?: Maybe<PostUpdateOneWithoutCommentsInput>;
  parentUpdate?: Maybe<UpdateUpdateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentUpdateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentUpdatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutParentCommentInput>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationUpdateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutEducationInput {
  create?: Maybe<UserCreateWithoutEducationInput>;
  update?: Maybe<UserUpdateWithoutEducationDataInput>;
  upsert?: Maybe<UserUpsertWithoutEducationInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TopicScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  topicID?: Maybe<String>;
  topicID_not?: Maybe<String>;
  topicID_in?: Maybe<String[] | String>;
  topicID_not_in?: Maybe<String[] | String>;
  topicID_lt?: Maybe<String>;
  topicID_lte?: Maybe<String>;
  topicID_gt?: Maybe<String>;
  topicID_gte?: Maybe<String>;
  topicID_contains?: Maybe<String>;
  topicID_not_contains?: Maybe<String>;
  topicID_starts_with?: Maybe<String>;
  topicID_not_starts_with?: Maybe<String>;
  topicID_ends_with?: Maybe<String>;
  topicID_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  OR?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  NOT?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
}

export interface UserUpdateWithoutEducationDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  experience?: Maybe<ExperienceUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface EducationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EducationWhereInput>;
  AND?: Maybe<
    EducationSubscriptionWhereInput[] | EducationSubscriptionWhereInput
  >;
  OR?: Maybe<
    EducationSubscriptionWhereInput[] | EducationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EducationSubscriptionWhereInput[] | EducationSubscriptionWhereInput
  >;
}

export interface UserUpsertWithoutEducationInput {
  update: UserUpdateWithoutEducationDataInput;
  create: UserCreateWithoutEducationInput;
}

export interface UserCreateWithoutSkillsInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  experience?: Maybe<ExperienceCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface EducationUpdateManyMutationInput {
  name?: Maybe<String>;
  subText?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ExperienceCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutExperienceInput;
  name: String;
  subText: String;
  startDateMonth: String;
  startDateYear: Int;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateOneWithoutExperienceInput {
  create?: Maybe<UserCreateWithoutExperienceInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UpdateCreatelikesInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateWithoutExperienceInput {
  id?: Maybe<ID_Input>;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicCreateManyInput>;
  topicsFreelance?: Maybe<TopicCreateManyInput>;
  topicsInvest?: Maybe<TopicCreateManyInput>;
  topicsAgency?: Maybe<TopicCreateManyInput>;
  topicsFocus?: Maybe<TopicCreateManyInput>;
  topicsInterest?: Maybe<TopicCreateManyInput>;
  skills?: Maybe<SkillCreateManyWithoutOwnerInput>;
  education?: Maybe<EducationCreateManyWithoutOwnerInput>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  connections?: Maybe<UserCreateManyWithoutConnectionsInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryCreateOneInput>;
  myStory?: Maybe<StoryCreateOneInput>;
  stories?: Maybe<StoryCreateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingCreateManyWithoutUsersInput>;
  roles?: Maybe<UserCreaterolesInput>;
  groups?: Maybe<GroupCreateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageCreateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface ListUpsertWithoutMainTopicsInput {
  update: ListUpdateWithoutMainTopicsDataInput;
  create: ListCreateWithoutMainTopicsInput;
}

export interface ExperienceUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutExperienceInput>;
  name?: Maybe<String>;
  subText?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface StoryUpdateManyWithoutItemsInput {
  create?: Maybe<StoryCreateWithoutItemsInput[] | StoryCreateWithoutItemsInput>;
  delete?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  connect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  set?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  disconnect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  update?: Maybe<
    | StoryUpdateWithWhereUniqueWithoutItemsInput[]
    | StoryUpdateWithWhereUniqueWithoutItemsInput
  >;
  upsert?: Maybe<
    | StoryUpsertWithWhereUniqueWithoutItemsInput[]
    | StoryUpsertWithWhereUniqueWithoutItemsInput
  >;
  deleteMany?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
  updateMany?: Maybe<
    StoryUpdateManyWithWhereNestedInput[] | StoryUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateOneRequiredWithoutExperienceInput {
  create?: Maybe<UserCreateWithoutExperienceInput>;
  update?: Maybe<UserUpdateWithoutExperienceDataInput>;
  upsert?: Maybe<UserUpsertWithoutExperienceInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostCreateManyWithoutOwnerInput {
  create?: Maybe<PostCreateWithoutOwnerInput[] | PostCreateWithoutOwnerInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  users?: Maybe<UserCreateManyWithoutGroupsInput>;
  messages?: Maybe<MessageCreateManyWithoutToInput>;
  latestMessage?: Maybe<MessageCreateOneInput>;
  hidden?: Maybe<UserCreateManyInput>;
}

export interface ExperienceUpdateManyMutationInput {
  name?: Maybe<String>;
  subText?: Maybe<String>;
  startDateMonth?: Maybe<String>;
  startDateYear?: Maybe<Int>;
  endDateMonth?: Maybe<String>;
  endDateYear?: Maybe<Int>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  currentRole?: Maybe<Boolean>;
}

export interface UserUpsertWithoutExperienceInput {
  update: UserUpdateWithoutExperienceDataInput;
  create: UserCreateWithoutExperienceInput;
}

export interface UserUpdateWithoutExperienceDataInput {
  name?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  bannerPic?: Maybe<String>;
  location?: Maybe<String>;
  locationID?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  headline?: Maybe<String>;
  website?: Maybe<String>;
  bio?: Maybe<String>;
  about?: Maybe<String>;
  topicsMentor?: Maybe<TopicUpdateManyInput>;
  topicsFreelance?: Maybe<TopicUpdateManyInput>;
  topicsInvest?: Maybe<TopicUpdateManyInput>;
  topicsAgency?: Maybe<TopicUpdateManyInput>;
  topicsFocus?: Maybe<TopicUpdateManyInput>;
  topicsInterest?: Maybe<TopicUpdateManyInput>;
  skills?: Maybe<SkillUpdateManyWithoutOwnerInput>;
  education?: Maybe<EducationUpdateManyWithoutOwnerInput>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  connections?: Maybe<UserUpdateManyWithoutConnectionsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  connectionsCount?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  intro?: Maybe<StoryUpdateOneInput>;
  myStory?: Maybe<StoryUpdateOneInput>;
  stories?: Maybe<StoryUpdateManyWithoutOwnerInput>;
  meetings?: Maybe<MeetingUpdateManyWithoutUsersInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  groups?: Maybe<GroupUpdateManyWithoutUsersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutTargetInput>;
  unReadMessages?: Maybe<MessageUpdateManyInput>;
  unReadMessagesCount?: Maybe<Int>;
}

export interface GroupCreateOneWithoutMessagesInput {
  create?: Maybe<GroupCreateWithoutMessagesInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutMeetingsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMeetingsDataInput;
  create: UserCreateWithoutMeetingsInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profilePic?: Maybe<String>;
  profilePic_not?: Maybe<String>;
  profilePic_in?: Maybe<String[] | String>;
  profilePic_not_in?: Maybe<String[] | String>;
  profilePic_lt?: Maybe<String>;
  profilePic_lte?: Maybe<String>;
  profilePic_gt?: Maybe<String>;
  profilePic_gte?: Maybe<String>;
  profilePic_contains?: Maybe<String>;
  profilePic_not_contains?: Maybe<String>;
  profilePic_starts_with?: Maybe<String>;
  profilePic_not_starts_with?: Maybe<String>;
  profilePic_ends_with?: Maybe<String>;
  profilePic_not_ends_with?: Maybe<String>;
  bannerPic?: Maybe<String>;
  bannerPic_not?: Maybe<String>;
  bannerPic_in?: Maybe<String[] | String>;
  bannerPic_not_in?: Maybe<String[] | String>;
  bannerPic_lt?: Maybe<String>;
  bannerPic_lte?: Maybe<String>;
  bannerPic_gt?: Maybe<String>;
  bannerPic_gte?: Maybe<String>;
  bannerPic_contains?: Maybe<String>;
  bannerPic_not_contains?: Maybe<String>;
  bannerPic_starts_with?: Maybe<String>;
  bannerPic_not_starts_with?: Maybe<String>;
  bannerPic_ends_with?: Maybe<String>;
  bannerPic_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  locationID?: Maybe<String>;
  locationID_not?: Maybe<String>;
  locationID_in?: Maybe<String[] | String>;
  locationID_not_in?: Maybe<String[] | String>;
  locationID_lt?: Maybe<String>;
  locationID_lte?: Maybe<String>;
  locationID_gt?: Maybe<String>;
  locationID_gte?: Maybe<String>;
  locationID_contains?: Maybe<String>;
  locationID_not_contains?: Maybe<String>;
  locationID_starts_with?: Maybe<String>;
  locationID_not_starts_with?: Maybe<String>;
  locationID_ends_with?: Maybe<String>;
  locationID_not_ends_with?: Maybe<String>;
  locationLat?: Maybe<Float>;
  locationLat_not?: Maybe<Float>;
  locationLat_in?: Maybe<Float[] | Float>;
  locationLat_not_in?: Maybe<Float[] | Float>;
  locationLat_lt?: Maybe<Float>;
  locationLat_lte?: Maybe<Float>;
  locationLat_gt?: Maybe<Float>;
  locationLat_gte?: Maybe<Float>;
  locationLon?: Maybe<Float>;
  locationLon_not?: Maybe<Float>;
  locationLon_in?: Maybe<Float[] | Float>;
  locationLon_not_in?: Maybe<Float[] | Float>;
  locationLon_lt?: Maybe<Float>;
  locationLon_lte?: Maybe<Float>;
  locationLon_gt?: Maybe<Float>;
  locationLon_gte?: Maybe<Float>;
  headline?: Maybe<String>;
  headline_not?: Maybe<String>;
  headline_in?: Maybe<String[] | String>;
  headline_not_in?: Maybe<String[] | String>;
  headline_lt?: Maybe<String>;
  headline_lte?: Maybe<String>;
  headline_gt?: Maybe<String>;
  headline_gte?: Maybe<String>;
  headline_contains?: Maybe<String>;
  headline_not_contains?: Maybe<String>;
  headline_starts_with?: Maybe<String>;
  headline_not_starts_with?: Maybe<String>;
  headline_ends_with?: Maybe<String>;
  headline_not_ends_with?: Maybe<String>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  about?: Maybe<String>;
  about_not?: Maybe<String>;
  about_in?: Maybe<String[] | String>;
  about_not_in?: Maybe<String[] | String>;
  about_lt?: Maybe<String>;
  about_lte?: Maybe<String>;
  about_gt?: Maybe<String>;
  about_gte?: Maybe<String>;
  about_contains?: Maybe<String>;
  about_not_contains?: Maybe<String>;
  about_starts_with?: Maybe<String>;
  about_not_starts_with?: Maybe<String>;
  about_ends_with?: Maybe<String>;
  about_not_ends_with?: Maybe<String>;
  topicsMentor_every?: Maybe<TopicWhereInput>;
  topicsMentor_some?: Maybe<TopicWhereInput>;
  topicsMentor_none?: Maybe<TopicWhereInput>;
  topicsFreelance_every?: Maybe<TopicWhereInput>;
  topicsFreelance_some?: Maybe<TopicWhereInput>;
  topicsFreelance_none?: Maybe<TopicWhereInput>;
  topicsInvest_every?: Maybe<TopicWhereInput>;
  topicsInvest_some?: Maybe<TopicWhereInput>;
  topicsInvest_none?: Maybe<TopicWhereInput>;
  topicsAgency_every?: Maybe<TopicWhereInput>;
  topicsAgency_some?: Maybe<TopicWhereInput>;
  topicsAgency_none?: Maybe<TopicWhereInput>;
  topicsFocus_every?: Maybe<TopicWhereInput>;
  topicsFocus_some?: Maybe<TopicWhereInput>;
  topicsFocus_none?: Maybe<TopicWhereInput>;
  topicsInterest_every?: Maybe<TopicWhereInput>;
  topicsInterest_some?: Maybe<TopicWhereInput>;
  topicsInterest_none?: Maybe<TopicWhereInput>;
  skills_every?: Maybe<SkillWhereInput>;
  skills_some?: Maybe<SkillWhereInput>;
  skills_none?: Maybe<SkillWhereInput>;
  experience_every?: Maybe<ExperienceWhereInput>;
  experience_some?: Maybe<ExperienceWhereInput>;
  experience_none?: Maybe<ExperienceWhereInput>;
  education_every?: Maybe<EducationWhereInput>;
  education_some?: Maybe<EducationWhereInput>;
  education_none?: Maybe<EducationWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  connections_every?: Maybe<UserWhereInput>;
  connections_some?: Maybe<UserWhereInput>;
  connections_none?: Maybe<UserWhereInput>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  connectionsCount?: Maybe<Int>;
  connectionsCount_not?: Maybe<Int>;
  connectionsCount_in?: Maybe<Int[] | Int>;
  connectionsCount_not_in?: Maybe<Int[] | Int>;
  connectionsCount_lt?: Maybe<Int>;
  connectionsCount_lte?: Maybe<Int>;
  connectionsCount_gt?: Maybe<Int>;
  connectionsCount_gte?: Maybe<Int>;
  followingCount?: Maybe<Int>;
  followingCount_not?: Maybe<Int>;
  followingCount_in?: Maybe<Int[] | Int>;
  followingCount_not_in?: Maybe<Int[] | Int>;
  followingCount_lt?: Maybe<Int>;
  followingCount_lte?: Maybe<Int>;
  followingCount_gt?: Maybe<Int>;
  followingCount_gte?: Maybe<Int>;
  followersCount?: Maybe<Int>;
  followersCount_not?: Maybe<Int>;
  followersCount_in?: Maybe<Int[] | Int>;
  followersCount_not_in?: Maybe<Int[] | Int>;
  followersCount_lt?: Maybe<Int>;
  followersCount_lte?: Maybe<Int>;
  followersCount_gt?: Maybe<Int>;
  followersCount_gte?: Maybe<Int>;
  intro?: Maybe<StoryWhereInput>;
  myStory?: Maybe<StoryWhereInput>;
  stories_every?: Maybe<StoryWhereInput>;
  stories_some?: Maybe<StoryWhereInput>;
  stories_none?: Maybe<StoryWhereInput>;
  meetings_every?: Maybe<MeetingWhereInput>;
  meetings_some?: Maybe<MeetingWhereInput>;
  meetings_none?: Maybe<MeetingWhereInput>;
  groups_every?: Maybe<GroupWhereInput>;
  groups_some?: Maybe<GroupWhereInput>;
  groups_none?: Maybe<GroupWhereInput>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  unReadMessages_every?: Maybe<MessageWhereInput>;
  unReadMessages_some?: Maybe<MessageWhereInput>;
  unReadMessages_none?: Maybe<MessageWhereInput>;
  unReadMessagesCount?: Maybe<Int>;
  unReadMessagesCount_not?: Maybe<Int>;
  unReadMessagesCount_in?: Maybe<Int[] | Int>;
  unReadMessagesCount_not_in?: Maybe<Int[] | Int>;
  unReadMessagesCount_lt?: Maybe<Int>;
  unReadMessagesCount_lte?: Maybe<Int>;
  unReadMessagesCount_gt?: Maybe<Int>;
  unReadMessagesCount_gte?: Maybe<Int>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  parentPost?: Maybe<PostCreateOneWithoutCommentsInput>;
  parentUpdate?: Maybe<UpdateCreateOneWithoutCommentsInput>;
  parentComment?: Maybe<CommentCreateOneWithoutCommentsInput>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  likes?: Maybe<CommentCreatelikesInput>;
  likesCount?: Maybe<Int>;
  likedByMe?: Maybe<Boolean>;
  commentsCount?: Maybe<Int>;
  notifications?: Maybe<NotificationCreateManyWithoutCommentInput>;
  _deleted?: Maybe<Boolean>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: String;
  bannerPic?: String;
  location?: String;
  locationID?: String;
  locationLat?: Float;
  locationLon?: Float;
  headline?: String;
  website?: String;
  bio?: String;
  about?: String;
  connectionsCount?: Int;
  followingCount?: Int;
  followersCount?: Int;
  roles: Role[];
  unReadMessagesCount?: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profilePic: () => Promise<String>;
  bannerPic: () => Promise<String>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  headline: () => Promise<String>;
  website: () => Promise<String>;
  bio: () => Promise<String>;
  about: () => Promise<String>;
  connectionsCount: () => Promise<Int>;
  followingCount: () => Promise<Int>;
  followersCount: () => Promise<Int>;
  roles: () => Promise<Role[]>;
  unReadMessagesCount: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  bannerPic: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  locationID: () => Promise<AsyncIterator<String>>;
  locationLat: () => Promise<AsyncIterator<Float>>;
  locationLon: () => Promise<AsyncIterator<Float>>;
  headline: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  connectionsCount: () => Promise<AsyncIterator<Int>>;
  followingCount: () => Promise<AsyncIterator<Int>>;
  followersCount: () => Promise<AsyncIterator<Int>>;
  roles: () => Promise<AsyncIterator<Role[]>>;
  unReadMessagesCount: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateEducation {
  count: Int;
}

export interface AggregateEducationPromise
  extends Promise<AggregateEducation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEducationSubscription
  extends Promise<AsyncIterator<AggregateEducation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TopicPreviousValues {
  id: ID_Output;
  topicID: String;
  name: String;
  icon?: String;
  color?: String;
  image?: String;
  order?: Int;
}

export interface TopicPreviousValuesPromise
  extends Promise<TopicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  topicID: () => Promise<String>;
  name: () => Promise<String>;
  icon: () => Promise<String>;
  color: () => Promise<String>;
  image: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface TopicPreviousValuesSubscription
  extends Promise<AsyncIterator<TopicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  topicID: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface EducationEdge {
  node: Education;
  cursor: String;
}

export interface EducationEdgePromise
  extends Promise<EducationEdge>,
    Fragmentable {
  node: <T = EducationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EducationEdgeSubscription
  extends Promise<AsyncIterator<EducationEdge>>,
    Fragmentable {
  node: <T = EducationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EducationConnection {
  pageInfo: PageInfo;
  edges: EducationEdge[];
}

export interface EducationConnectionPromise
  extends Promise<EducationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EducationEdge>>() => T;
  aggregate: <T = AggregateEducationPromise>() => T;
}

export interface EducationConnectionSubscription
  extends Promise<AsyncIterator<EducationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EducationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEducationSubscription>() => T;
}

export interface Experience {
  id: ID_Output;
  name: String;
  subText: String;
  startDateMonth: String;
  startDateYear: Int;
  endDateMonth?: String;
  endDateYear?: Int;
  location?: String;
  locationID?: String;
  locationLat?: Float;
  locationLon?: Float;
  currentRole?: Boolean;
}

export interface ExperiencePromise extends Promise<Experience>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  subText: () => Promise<String>;
  startDateMonth: () => Promise<String>;
  startDateYear: () => Promise<Int>;
  endDateMonth: () => Promise<String>;
  endDateYear: () => Promise<Int>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  currentRole: () => Promise<Boolean>;
}

export interface ExperienceSubscription
  extends Promise<AsyncIterator<Experience>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  subText: () => Promise<AsyncIterator<String>>;
  startDateMonth: () => Promise<AsyncIterator<String>>;
  startDateYear: () => Promise<AsyncIterator<Int>>;
  endDateMonth: () => Promise<AsyncIterator<String>>;
  endDateYear: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  locationID: () => Promise<AsyncIterator<String>>;
  locationLat: () => Promise<AsyncIterator<Float>>;
  locationLon: () => Promise<AsyncIterator<Float>>;
  currentRole: () => Promise<AsyncIterator<Boolean>>;
}

export interface ExperienceNullablePromise
  extends Promise<Experience | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  subText: () => Promise<String>;
  startDateMonth: () => Promise<String>;
  startDateYear: () => Promise<Int>;
  endDateMonth: () => Promise<String>;
  endDateYear: () => Promise<Int>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  currentRole: () => Promise<Boolean>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUpdate {
  count: Int;
}

export interface AggregateUpdatePromise
  extends Promise<AggregateUpdate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUpdateSubscription
  extends Promise<AsyncIterator<AggregateUpdate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface UpdateConnection {
  pageInfo: PageInfo;
  edges: UpdateEdge[];
}

export interface UpdateConnectionPromise
  extends Promise<UpdateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UpdateEdge>>() => T;
  aggregate: <T = AggregateUpdatePromise>() => T;
}

export interface UpdateConnectionSubscription
  extends Promise<AsyncIterator<UpdateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UpdateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUpdateSubscription>() => T;
}

export interface Comment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  content?: String;
  image?: String;
  likes: String[];
  likesCount?: Int;
  likedByMe?: Boolean;
  commentsCount?: Int;
  _deleted?: Boolean;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  parentPost: <T = PostPromise>() => T;
  parentUpdate: <T = UpdatePromise>() => T;
  parentComment: <T = CommentPromise>() => T;
  content: () => Promise<String>;
  image: () => Promise<String>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCount: () => Promise<Int>;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<Boolean>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  parentPost: <T = PostSubscription>() => T;
  parentUpdate: <T = UpdateSubscription>() => T;
  parentComment: <T = CommentSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<String[]>>;
  likesCount: () => Promise<AsyncIterator<Int>>;
  likedByMe: () => Promise<AsyncIterator<Boolean>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  parentPost: <T = PostPromise>() => T;
  parentUpdate: <T = UpdatePromise>() => T;
  parentComment: <T = CommentPromise>() => T;
  content: () => Promise<String>;
  image: () => Promise<String>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCount: () => Promise<Int>;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<Boolean>;
}

export interface TopicEdge {
  node: Topic;
  cursor: String;
}

export interface TopicEdgePromise extends Promise<TopicEdge>, Fragmentable {
  node: <T = TopicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TopicEdgeSubscription
  extends Promise<AsyncIterator<TopicEdge>>,
    Fragmentable {
  node: <T = TopicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface AggregateStoryItem {
  count: Int;
}

export interface AggregateStoryItemPromise
  extends Promise<AggregateStoryItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStoryItemSubscription
  extends Promise<AsyncIterator<AggregateStoryItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  content?: String;
  image?: String;
  likes: String[];
  likesCount?: Int;
  likedByMe?: Boolean;
  commentsCount?: Int;
  _deleted?: Boolean;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  image: () => Promise<String>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  commentsCount: () => Promise<Int>;
  _deleted: () => Promise<Boolean>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<String[]>>;
  likesCount: () => Promise<AsyncIterator<Int>>;
  likedByMe: () => Promise<AsyncIterator<Boolean>>;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  _deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface StoryItemConnection {
  pageInfo: PageInfo;
  edges: StoryItemEdge[];
}

export interface StoryItemConnectionPromise
  extends Promise<StoryItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoryItemEdge>>() => T;
  aggregate: <T = AggregateStoryItemPromise>() => T;
}

export interface StoryItemConnectionSubscription
  extends Promise<AsyncIterator<StoryItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoryItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStoryItemSubscription>() => T;
}

export interface Message {
  id: ID_Output;
  createdAt: DateTimeOutput;
  content: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  to: <T = GroupPromise>() => T;
  from: <T = UserPromise>() => T;
  content: () => Promise<String>;
  hidden: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  to: <T = GroupSubscription>() => T;
  from: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  hidden: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  to: <T = GroupPromise>() => T;
  from: <T = UserPromise>() => T;
  content: () => Promise<String>;
  hidden: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface StoryEdge {
  node: Story;
  cursor: String;
}

export interface StoryEdgePromise extends Promise<StoryEdge>, Fragmentable {
  node: <T = StoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoryEdgeSubscription
  extends Promise<AsyncIterator<StoryEdge>>,
    Fragmentable {
  node: <T = StorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EducationSubscriptionPayload {
  mutation: MutationType;
  node: Education;
  updatedFields: String[];
  previousValues: EducationPreviousValues;
}

export interface EducationSubscriptionPayloadPromise
  extends Promise<EducationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EducationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EducationPreviousValuesPromise>() => T;
}

export interface EducationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EducationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EducationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EducationPreviousValuesSubscription>() => T;
}

export interface AggregateSkill {
  count: Int;
}

export interface AggregateSkillPromise
  extends Promise<AggregateSkill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSkillSubscription
  extends Promise<AsyncIterator<AggregateSkill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EducationPreviousValues {
  id: ID_Output;
  name: String;
  subText: String;
  startDateMonth?: String;
  startDateYear: Int;
  endDateMonth?: String;
  endDateYear?: Int;
  location?: String;
  locationID?: String;
  locationLat?: Float;
  locationLon?: Float;
  currentRole?: Boolean;
}

export interface EducationPreviousValuesPromise
  extends Promise<EducationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subText: () => Promise<String>;
  startDateMonth: () => Promise<String>;
  startDateYear: () => Promise<Int>;
  endDateMonth: () => Promise<String>;
  endDateYear: () => Promise<Int>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  currentRole: () => Promise<Boolean>;
}

export interface EducationPreviousValuesSubscription
  extends Promise<AsyncIterator<EducationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  subText: () => Promise<AsyncIterator<String>>;
  startDateMonth: () => Promise<AsyncIterator<String>>;
  startDateYear: () => Promise<AsyncIterator<Int>>;
  endDateMonth: () => Promise<AsyncIterator<String>>;
  endDateYear: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  locationID: () => Promise<AsyncIterator<String>>;
  locationLat: () => Promise<AsyncIterator<Float>>;
  locationLon: () => Promise<AsyncIterator<Float>>;
  currentRole: () => Promise<AsyncIterator<Boolean>>;
}

export interface SkillConnection {
  pageInfo: PageInfo;
  edges: SkillEdge[];
}

export interface SkillConnectionPromise
  extends Promise<SkillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SkillEdge>>() => T;
  aggregate: <T = AggregateSkillPromise>() => T;
}

export interface SkillConnectionSubscription
  extends Promise<AsyncIterator<SkillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SkillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSkillSubscription>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  profilePic?: String;
  bannerPic?: String;
  location?: String;
  locationID?: String;
  locationLat?: Float;
  locationLon?: Float;
  headline?: String;
  website?: String;
  bio?: String;
  about?: String;
  connectionsCount?: Int;
  followingCount?: Int;
  followersCount?: Int;
  roles: Role[];
  unReadMessagesCount?: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profilePic: () => Promise<String>;
  bannerPic: () => Promise<String>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  headline: () => Promise<String>;
  website: () => Promise<String>;
  bio: () => Promise<String>;
  about: () => Promise<String>;
  topicsMentor: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsFreelance: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsInvest: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsAgency: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsFocus: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsInterest: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  skills: <T = FragmentableArray<Skill>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  experience: <T = FragmentableArray<Experience>>(args?: {
    where?: ExperienceWhereInput;
    orderBy?: ExperienceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  education: <T = FragmentableArray<Education>>(args?: {
    where?: EducationWhereInput;
    orderBy?: EducationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  connections: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  connectionsCount: () => Promise<Int>;
  followingCount: () => Promise<Int>;
  followersCount: () => Promise<Int>;
  intro: <T = StoryPromise>() => T;
  myStory: <T = StoryPromise>() => T;
  stories: <T = FragmentableArray<Story>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  meetings: <T = FragmentableArray<Meeting>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: () => Promise<Role[]>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unReadMessages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unReadMessagesCount: () => Promise<Int>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  bannerPic: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  locationID: () => Promise<AsyncIterator<String>>;
  locationLat: () => Promise<AsyncIterator<Float>>;
  locationLon: () => Promise<AsyncIterator<Float>>;
  headline: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  topicsMentor: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsFreelance: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsInvest: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsAgency: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsFocus: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsInterest: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  skills: <T = Promise<AsyncIterator<SkillSubscription>>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  experience: <T = Promise<AsyncIterator<ExperienceSubscription>>>(args?: {
    where?: ExperienceWhereInput;
    orderBy?: ExperienceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  education: <T = Promise<AsyncIterator<EducationSubscription>>>(args?: {
    where?: EducationWhereInput;
    orderBy?: EducationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  connections: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  connectionsCount: () => Promise<AsyncIterator<Int>>;
  followingCount: () => Promise<AsyncIterator<Int>>;
  followersCount: () => Promise<AsyncIterator<Int>>;
  intro: <T = StorySubscription>() => T;
  myStory: <T = StorySubscription>() => T;
  stories: <T = Promise<AsyncIterator<StorySubscription>>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  meetings: <T = Promise<AsyncIterator<MeetingSubscription>>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: () => Promise<AsyncIterator<Role[]>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unReadMessages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unReadMessagesCount: () => Promise<AsyncIterator<Int>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profilePic: () => Promise<String>;
  bannerPic: () => Promise<String>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  headline: () => Promise<String>;
  website: () => Promise<String>;
  bio: () => Promise<String>;
  about: () => Promise<String>;
  topicsMentor: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsFreelance: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsInvest: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsAgency: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsFocus: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicsInterest: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  skills: <T = FragmentableArray<Skill>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  experience: <T = FragmentableArray<Experience>>(args?: {
    where?: ExperienceWhereInput;
    orderBy?: ExperienceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  education: <T = FragmentableArray<Education>>(args?: {
    where?: EducationWhereInput;
    orderBy?: EducationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  connections: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  connectionsCount: () => Promise<Int>;
  followingCount: () => Promise<Int>;
  followersCount: () => Promise<Int>;
  intro: <T = StoryPromise>() => T;
  myStory: <T = StoryPromise>() => T;
  stories: <T = FragmentableArray<Story>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  meetings: <T = FragmentableArray<Meeting>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: () => Promise<Role[]>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unReadMessages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unReadMessagesCount: () => Promise<Int>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ExperienceSubscriptionPayload {
  mutation: MutationType;
  node: Experience;
  updatedFields: String[];
  previousValues: ExperiencePreviousValues;
}

export interface ExperienceSubscriptionPayloadPromise
  extends Promise<ExperienceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExperiencePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExperiencePreviousValuesPromise>() => T;
}

export interface ExperienceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExperienceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExperienceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ExperiencePreviousValuesSubscription>() => T;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ExperiencePreviousValues {
  id: ID_Output;
  name: String;
  subText: String;
  startDateMonth: String;
  startDateYear: Int;
  endDateMonth?: String;
  endDateYear?: Int;
  location?: String;
  locationID?: String;
  locationLat?: Float;
  locationLon?: Float;
  currentRole?: Boolean;
}

export interface ExperiencePreviousValuesPromise
  extends Promise<ExperiencePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subText: () => Promise<String>;
  startDateMonth: () => Promise<String>;
  startDateYear: () => Promise<Int>;
  endDateMonth: () => Promise<String>;
  endDateYear: () => Promise<Int>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  currentRole: () => Promise<Boolean>;
}

export interface ExperiencePreviousValuesSubscription
  extends Promise<AsyncIterator<ExperiencePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  subText: () => Promise<AsyncIterator<String>>;
  startDateMonth: () => Promise<AsyncIterator<String>>;
  startDateYear: () => Promise<AsyncIterator<Int>>;
  endDateMonth: () => Promise<AsyncIterator<String>>;
  endDateYear: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  locationID: () => Promise<AsyncIterator<String>>;
  locationLat: () => Promise<AsyncIterator<Float>>;
  locationLon: () => Promise<AsyncIterator<Float>>;
  currentRole: () => Promise<AsyncIterator<Boolean>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  updatedAt: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  latestMessage: <T = MessagePromise>() => T;
  hidden: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  latestMessage: <T = MessageSubscription>() => T;
  hidden: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  latestMessage: <T = MessagePromise>() => T;
  hidden: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface AggregateMeeting {
  count: Int;
}

export interface AggregateMeetingPromise
  extends Promise<AggregateMeeting>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMeetingSubscription
  extends Promise<AsyncIterator<AggregateMeeting>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MeetingConnection {
  pageInfo: PageInfo;
  edges: MeetingEdge[];
}

export interface MeetingConnectionPromise
  extends Promise<MeetingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MeetingEdge>>() => T;
  aggregate: <T = AggregateMeetingPromise>() => T;
}

export interface MeetingConnectionSubscription
  extends Promise<AsyncIterator<MeetingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MeetingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMeetingSubscription>() => T;
}

export interface UpdatePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  content: String;
  image?: String;
  likes: String[];
  likesCount?: Int;
  likedByMe?: Boolean;
  commentsCount?: Int;
  sharesCount?: Int;
  _deleted?: Boolean;
}

export interface UpdatePreviousValuesPromise
  extends Promise<UpdatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  image: () => Promise<String>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  commentsCount: () => Promise<Int>;
  sharesCount: () => Promise<Int>;
  _deleted: () => Promise<Boolean>;
}

export interface UpdatePreviousValuesSubscription
  extends Promise<AsyncIterator<UpdatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<String[]>>;
  likesCount: () => Promise<AsyncIterator<Int>>;
  likedByMe: () => Promise<AsyncIterator<Boolean>>;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  sharesCount: () => Promise<AsyncIterator<Int>>;
  _deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ListEdge {
  node: List;
  cursor: String;
}

export interface ListEdgePromise extends Promise<ListEdge>, Fragmentable {
  node: <T = ListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ListEdgeSubscription
  extends Promise<AsyncIterator<ListEdge>>,
    Fragmentable {
  node: <T = ListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ListSubscriptionPayload {
  mutation: MutationType;
  node: List;
  updatedFields: String[];
  previousValues: ListPreviousValues;
}

export interface ListSubscriptionPayloadPromise
  extends Promise<ListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListPreviousValuesPromise>() => T;
}

export interface ListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListPreviousValuesSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  lastUpdated: DateTimeOutput;
  isGoal: Boolean;
  goal?: String;
  goalStatus?: String;
  location?: String;
  locationID?: String;
  locationLat?: Float;
  locationLon?: Float;
  content: String;
  images: String[];
  video?: String;
  pitch?: String;
  likes: String[];
  likesCount?: Int;
  likedByMe?: Boolean;
  commentsCount?: Int;
  sharesCount?: Int;
  _deleted?: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  isGoal: () => Promise<Boolean>;
  goal: () => Promise<String>;
  goalStatus: () => Promise<String>;
  subField: <T = TopicPromise>() => T;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  content: () => Promise<String>;
  images: () => Promise<String[]>;
  video: () => Promise<String>;
  pitch: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updates: <T = FragmentableArray<Update>>(args?: {
    where?: UpdateWhereInput;
    orderBy?: UpdateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  commentsCount: () => Promise<Int>;
  sharesCount: () => Promise<Int>;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<Boolean>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastUpdated: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  isGoal: () => Promise<AsyncIterator<Boolean>>;
  goal: () => Promise<AsyncIterator<String>>;
  goalStatus: () => Promise<AsyncIterator<String>>;
  subField: <T = TopicSubscription>() => T;
  topics: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: () => Promise<AsyncIterator<String>>;
  locationID: () => Promise<AsyncIterator<String>>;
  locationLat: () => Promise<AsyncIterator<Float>>;
  locationLon: () => Promise<AsyncIterator<Float>>;
  content: () => Promise<AsyncIterator<String>>;
  images: () => Promise<AsyncIterator<String[]>>;
  video: () => Promise<AsyncIterator<String>>;
  pitch: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updates: <T = Promise<AsyncIterator<UpdateSubscription>>>(args?: {
    where?: UpdateWhereInput;
    orderBy?: UpdateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: () => Promise<AsyncIterator<String[]>>;
  likesCount: () => Promise<AsyncIterator<Int>>;
  likedByMe: () => Promise<AsyncIterator<Boolean>>;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  sharesCount: () => Promise<AsyncIterator<Int>>;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  isGoal: () => Promise<Boolean>;
  goal: () => Promise<String>;
  goalStatus: () => Promise<String>;
  subField: <T = TopicPromise>() => T;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  content: () => Promise<String>;
  images: () => Promise<String[]>;
  video: () => Promise<String>;
  pitch: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updates: <T = FragmentableArray<Update>>(args?: {
    where?: UpdateWhereInput;
    orderBy?: UpdateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  commentsCount: () => Promise<Int>;
  sharesCount: () => Promise<Int>;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<Boolean>;
}

export interface ListPreviousValues {
  id: ID_Output;
  listName: String;
  icon?: String;
}

export interface ListPreviousValuesPromise
  extends Promise<ListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  listName: () => Promise<String>;
  icon: () => Promise<String>;
}

export interface ListPreviousValuesSubscription
  extends Promise<AsyncIterator<ListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  listName: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UpdateSubscriptionPayload {
  mutation: MutationType;
  node: Update;
  updatedFields: String[];
  previousValues: UpdatePreviousValues;
}

export interface UpdateSubscriptionPayloadPromise
  extends Promise<UpdateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UpdatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UpdatePreviousValuesPromise>() => T;
}

export interface UpdateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UpdateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UpdateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UpdatePreviousValuesSubscription>() => T;
}

export interface AggregateExperience {
  count: Int;
}

export interface AggregateExperiencePromise
  extends Promise<AggregateExperience>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExperienceSubscription
  extends Promise<AsyncIterator<AggregateExperience>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MeetingSubscriptionPayload {
  mutation: MutationType;
  node: Meeting;
  updatedFields: String[];
  previousValues: MeetingPreviousValues;
}

export interface MeetingSubscriptionPayloadPromise
  extends Promise<MeetingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MeetingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MeetingPreviousValuesPromise>() => T;
}

export interface MeetingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MeetingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MeetingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MeetingPreviousValuesSubscription>() => T;
}

export interface ExperienceConnection {
  pageInfo: PageInfo;
  edges: ExperienceEdge[];
}

export interface ExperienceConnectionPromise
  extends Promise<ExperienceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExperienceEdge>>() => T;
  aggregate: <T = AggregateExperiencePromise>() => T;
}

export interface ExperienceConnectionSubscription
  extends Promise<AsyncIterator<ExperienceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ExperienceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateExperienceSubscription>() => T;
}

export interface MeetingPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  startTime: DateTimeOutput;
  endTime: DateTimeOutput;
  place?: String;
}

export interface MeetingPreviousValuesPromise
  extends Promise<MeetingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  place: () => Promise<String>;
}

export interface MeetingPreviousValuesSubscription
  extends Promise<AsyncIterator<MeetingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  place: () => Promise<AsyncIterator<String>>;
}

export interface Skill {
  id: ID_Output;
  skill: String;
  isExpert: Boolean;
}

export interface SkillPromise extends Promise<Skill>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  skill: () => Promise<String>;
  isExpert: () => Promise<Boolean>;
}

export interface SkillSubscription
  extends Promise<AsyncIterator<Skill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  skill: () => Promise<AsyncIterator<String>>;
  isExpert: () => Promise<AsyncIterator<Boolean>>;
}

export interface SkillNullablePromise
  extends Promise<Skill | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  skill: () => Promise<String>;
  isExpert: () => Promise<Boolean>;
}

export interface Meeting {
  id: ID_Output;
  createdAt: DateTimeOutput;
  startTime: DateTimeOutput;
  endTime: DateTimeOutput;
  place?: String;
}

export interface MeetingPromise extends Promise<Meeting>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  place: () => Promise<String>;
}

export interface MeetingSubscription
  extends Promise<AsyncIterator<Meeting>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  place: () => Promise<AsyncIterator<String>>;
}

export interface MeetingNullablePromise
  extends Promise<Meeting | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  place: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface AggregateTopic {
  count: Int;
}

export interface AggregateTopicPromise
  extends Promise<AggregateTopic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTopicSubscription
  extends Promise<AsyncIterator<AggregateTopic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  content: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface StoryItemEdge {
  node: StoryItem;
  cursor: String;
}

export interface StoryItemEdgePromise
  extends Promise<StoryItemEdge>,
    Fragmentable {
  node: <T = StoryItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoryItemEdgeSubscription
  extends Promise<AsyncIterator<StoryItemEdge>>,
    Fragmentable {
  node: <T = StoryItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StoryItem {
  id: ID_Output;
  createdAt: DateTimeOutput;
  type: StoryItemType;
  url: String;
  preview: String;
  link?: String;
  text: String[];
  duration?: Float;
  inProject?: Boolean;
  likes: String[];
  likesCount?: Int;
  likedByMe?: Boolean;
}

export interface StoryItemPromise extends Promise<StoryItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  stories: <T = FragmentableArray<Story>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<StoryItemType>;
  url: () => Promise<String>;
  preview: () => Promise<String>;
  link: () => Promise<String>;
  text: () => Promise<String[]>;
  duration: () => Promise<Float>;
  inProject: () => Promise<Boolean>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
}

export interface StoryItemSubscription
  extends Promise<AsyncIterator<StoryItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  stories: <T = Promise<AsyncIterator<StorySubscription>>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<AsyncIterator<StoryItemType>>;
  url: () => Promise<AsyncIterator<String>>;
  preview: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String[]>>;
  duration: () => Promise<AsyncIterator<Float>>;
  inProject: () => Promise<AsyncIterator<Boolean>>;
  likes: () => Promise<AsyncIterator<String[]>>;
  likesCount: () => Promise<AsyncIterator<Int>>;
  likedByMe: () => Promise<AsyncIterator<Boolean>>;
}

export interface StoryItemNullablePromise
  extends Promise<StoryItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  stories: <T = FragmentableArray<Story>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<StoryItemType>;
  url: () => Promise<String>;
  preview: () => Promise<String>;
  link: () => Promise<String>;
  text: () => Promise<String[]>;
  duration: () => Promise<Float>;
  inProject: () => Promise<Boolean>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
}

export interface StoryConnection {
  pageInfo: PageInfo;
  edges: StoryEdge[];
}

export interface StoryConnectionPromise
  extends Promise<StoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoryEdge>>() => T;
  aggregate: <T = AggregateStoryPromise>() => T;
}

export interface StoryConnectionSubscription
  extends Promise<AsyncIterator<StoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStorySubscription>() => T;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  style: NotificationStyle;
  seen: Boolean;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  style: () => Promise<NotificationStyle>;
  seen: () => Promise<Boolean>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  style: () => Promise<AsyncIterator<NotificationStyle>>;
  seen: () => Promise<AsyncIterator<Boolean>>;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Update {
  id: ID_Output;
  createdAt: DateTimeOutput;
  content: String;
  image?: String;
  likes: String[];
  likesCount?: Int;
  likedByMe?: Boolean;
  commentsCount?: Int;
  sharesCount?: Int;
  _deleted?: Boolean;
}

export interface UpdatePromise extends Promise<Update>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  parentPost: <T = PostPromise>() => T;
  content: () => Promise<String>;
  image: () => Promise<String>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCount: () => Promise<Int>;
  sharesCount: () => Promise<Int>;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<Boolean>;
}

export interface UpdateSubscription
  extends Promise<AsyncIterator<Update>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  parentPost: <T = PostSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<String[]>>;
  likesCount: () => Promise<AsyncIterator<Int>>;
  likedByMe: () => Promise<AsyncIterator<Boolean>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  sharesCount: () => Promise<AsyncIterator<Int>>;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface UpdateNullablePromise
  extends Promise<Update | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  parentPost: <T = PostPromise>() => T;
  content: () => Promise<String>;
  image: () => Promise<String>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCount: () => Promise<Int>;
  sharesCount: () => Promise<Int>;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  _deleted: () => Promise<Boolean>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregateList {
  count: Int;
}

export interface AggregateListPromise
  extends Promise<AggregateList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListSubscription
  extends Promise<AsyncIterator<AggregateList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  lastUpdated: DateTimeOutput;
  isGoal: Boolean;
  goal?: String;
  goalStatus?: String;
  location?: String;
  locationID?: String;
  locationLat?: Float;
  locationLon?: Float;
  content: String;
  images: String[];
  video?: String;
  pitch?: String;
  likes: String[];
  likesCount?: Int;
  likedByMe?: Boolean;
  commentsCount?: Int;
  sharesCount?: Int;
  _deleted?: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
  isGoal: () => Promise<Boolean>;
  goal: () => Promise<String>;
  goalStatus: () => Promise<String>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  content: () => Promise<String>;
  images: () => Promise<String[]>;
  video: () => Promise<String>;
  pitch: () => Promise<String>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
  commentsCount: () => Promise<Int>;
  sharesCount: () => Promise<Int>;
  _deleted: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastUpdated: () => Promise<AsyncIterator<DateTimeOutput>>;
  isGoal: () => Promise<AsyncIterator<Boolean>>;
  goal: () => Promise<AsyncIterator<String>>;
  goalStatus: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  locationID: () => Promise<AsyncIterator<String>>;
  locationLat: () => Promise<AsyncIterator<Float>>;
  locationLon: () => Promise<AsyncIterator<Float>>;
  content: () => Promise<AsyncIterator<String>>;
  images: () => Promise<AsyncIterator<String[]>>;
  video: () => Promise<AsyncIterator<String>>;
  pitch: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<String[]>>;
  likesCount: () => Promise<AsyncIterator<Int>>;
  likedByMe: () => Promise<AsyncIterator<Boolean>>;
  commentsCount: () => Promise<AsyncIterator<Int>>;
  sharesCount: () => Promise<AsyncIterator<Int>>;
  _deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Story {
  id: ID_Output;
  title?: String;
  type: StoryType;
  preview?: String;
  showcase?: Boolean;
  save?: Boolean;
}

export interface StoryPromise extends Promise<Story>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  title: () => Promise<String>;
  type: () => Promise<StoryType>;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<StoryItem>>(args?: {
    where?: StoryItemWhereInput;
    orderBy?: StoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preview: () => Promise<String>;
  showcase: () => Promise<Boolean>;
  save: () => Promise<Boolean>;
}

export interface StorySubscription
  extends Promise<AsyncIterator<Story>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<StoryType>>;
  topics: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = Promise<AsyncIterator<StoryItemSubscription>>>(args?: {
    where?: StoryItemWhereInput;
    orderBy?: StoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preview: () => Promise<AsyncIterator<String>>;
  showcase: () => Promise<AsyncIterator<Boolean>>;
  save: () => Promise<AsyncIterator<Boolean>>;
}

export interface StoryNullablePromise
  extends Promise<Story | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  title: () => Promise<String>;
  type: () => Promise<StoryType>;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<StoryItem>>(args?: {
    where?: StoryItemWhereInput;
    orderBy?: StoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preview: () => Promise<String>;
  showcase: () => Promise<Boolean>;
  save: () => Promise<Boolean>;
}

export interface ExperienceEdge {
  node: Experience;
  cursor: String;
}

export interface ExperienceEdgePromise
  extends Promise<ExperienceEdge>,
    Fragmentable {
  node: <T = ExperiencePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExperienceEdgeSubscription
  extends Promise<AsyncIterator<ExperienceEdge>>,
    Fragmentable {
  node: <T = ExperienceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SkillSubscriptionPayload {
  mutation: MutationType;
  node: Skill;
  updatedFields: String[];
  previousValues: SkillPreviousValues;
}

export interface SkillSubscriptionPayloadPromise
  extends Promise<SkillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SkillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SkillPreviousValuesPromise>() => T;
}

export interface SkillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SkillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SkillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SkillPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SkillPreviousValues {
  id: ID_Output;
  skill: String;
  isExpert: Boolean;
}

export interface SkillPreviousValuesPromise
  extends Promise<SkillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  skill: () => Promise<String>;
  isExpert: () => Promise<Boolean>;
}

export interface SkillPreviousValuesSubscription
  extends Promise<AsyncIterator<SkillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  skill: () => Promise<AsyncIterator<String>>;
  isExpert: () => Promise<AsyncIterator<Boolean>>;
}

export interface TopicConnection {
  pageInfo: PageInfo;
  edges: TopicEdge[];
}

export interface TopicConnectionPromise
  extends Promise<TopicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TopicEdge>>() => T;
  aggregate: <T = AggregateTopicPromise>() => T;
}

export interface TopicConnectionSubscription
  extends Promise<AsyncIterator<TopicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TopicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTopicSubscription>() => T;
}

export interface Topic {
  id: ID_Output;
  topicID: String;
  name: String;
  icon?: String;
  color?: String;
  image?: String;
  order?: Int;
}

export interface TopicPromise extends Promise<Topic>, Fragmentable {
  id: () => Promise<ID_Output>;
  topicID: () => Promise<String>;
  name: () => Promise<String>;
  parentList: <T = ListPromise>() => T;
  parentTopic: <T = TopicPromise>() => T;
  children: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  icon: () => Promise<String>;
  color: () => Promise<String>;
  image: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface TopicSubscription
  extends Promise<AsyncIterator<Topic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  topicID: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  parentList: <T = ListSubscription>() => T;
  parentTopic: <T = TopicSubscription>() => T;
  children: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  icon: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface TopicNullablePromise
  extends Promise<Topic | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  topicID: () => Promise<String>;
  name: () => Promise<String>;
  parentList: <T = ListPromise>() => T;
  parentTopic: <T = TopicPromise>() => T;
  children: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  icon: () => Promise<String>;
  color: () => Promise<String>;
  image: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface SkillEdge {
  node: Skill;
  cursor: String;
}

export interface SkillEdgePromise extends Promise<SkillEdge>, Fragmentable {
  node: <T = SkillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SkillEdgeSubscription
  extends Promise<AsyncIterator<SkillEdge>>,
    Fragmentable {
  node: <T = SkillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StorySubscriptionPayload {
  mutation: MutationType;
  node: Story;
  updatedFields: String[];
  previousValues: StoryPreviousValues;
}

export interface StorySubscriptionPayloadPromise
  extends Promise<StorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoryPreviousValuesPromise>() => T;
}

export interface StorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoryPreviousValuesSubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StoryPreviousValues {
  id: ID_Output;
  title?: String;
  type: StoryType;
  preview?: String;
  showcase?: Boolean;
  save?: Boolean;
}

export interface StoryPreviousValuesPromise
  extends Promise<StoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  type: () => Promise<StoryType>;
  preview: () => Promise<String>;
  showcase: () => Promise<Boolean>;
  save: () => Promise<Boolean>;
}

export interface StoryPreviousValuesSubscription
  extends Promise<AsyncIterator<StoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<StoryType>>;
  preview: () => Promise<AsyncIterator<String>>;
  showcase: () => Promise<AsyncIterator<Boolean>>;
  save: () => Promise<AsyncIterator<Boolean>>;
}

export interface ListConnection {
  pageInfo: PageInfo;
  edges: ListEdge[];
}

export interface ListConnectionPromise
  extends Promise<ListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ListEdge>>() => T;
  aggregate: <T = AggregateListPromise>() => T;
}

export interface ListConnectionSubscription
  extends Promise<AsyncIterator<ListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListSubscription>() => T;
}

export interface Notification {
  id: ID_Output;
  createdAt: DateTimeOutput;
  style: NotificationStyle;
  seen: Boolean;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  target: <T = UserPromise>() => T;
  style: () => Promise<NotificationStyle>;
  user: <T = UserPromise>() => T;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  post: <T = PostPromise>() => T;
  update: <T = UpdatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  seen: () => Promise<Boolean>;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  target: <T = UserSubscription>() => T;
  style: () => Promise<AsyncIterator<NotificationStyle>>;
  user: <T = UserSubscription>() => T;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  post: <T = PostSubscription>() => T;
  update: <T = UpdateSubscription>() => T;
  comment: <T = CommentSubscription>() => T;
  seen: () => Promise<AsyncIterator<Boolean>>;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  target: <T = UserPromise>() => T;
  style: () => Promise<NotificationStyle>;
  user: <T = UserPromise>() => T;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  post: <T = PostPromise>() => T;
  update: <T = UpdatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  seen: () => Promise<Boolean>;
}

export interface Education {
  id: ID_Output;
  name: String;
  subText: String;
  startDateMonth?: String;
  startDateYear: Int;
  endDateMonth?: String;
  endDateYear?: Int;
  location?: String;
  locationID?: String;
  locationLat?: Float;
  locationLon?: Float;
  currentRole?: Boolean;
}

export interface EducationPromise extends Promise<Education>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  subText: () => Promise<String>;
  startDateMonth: () => Promise<String>;
  startDateYear: () => Promise<Int>;
  endDateMonth: () => Promise<String>;
  endDateYear: () => Promise<Int>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  currentRole: () => Promise<Boolean>;
}

export interface EducationSubscription
  extends Promise<AsyncIterator<Education>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  subText: () => Promise<AsyncIterator<String>>;
  startDateMonth: () => Promise<AsyncIterator<String>>;
  startDateYear: () => Promise<AsyncIterator<Int>>;
  endDateMonth: () => Promise<AsyncIterator<String>>;
  endDateYear: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  locationID: () => Promise<AsyncIterator<String>>;
  locationLat: () => Promise<AsyncIterator<Float>>;
  locationLon: () => Promise<AsyncIterator<Float>>;
  currentRole: () => Promise<AsyncIterator<Boolean>>;
}

export interface EducationNullablePromise
  extends Promise<Education | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  subText: () => Promise<String>;
  startDateMonth: () => Promise<String>;
  startDateYear: () => Promise<Int>;
  endDateMonth: () => Promise<String>;
  endDateYear: () => Promise<Int>;
  location: () => Promise<String>;
  locationID: () => Promise<String>;
  locationLat: () => Promise<Float>;
  locationLon: () => Promise<Float>;
  currentRole: () => Promise<Boolean>;
}

export interface AggregateStory {
  count: Int;
}

export interface AggregateStoryPromise
  extends Promise<AggregateStory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStorySubscription
  extends Promise<AsyncIterator<AggregateStory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TopicSubscriptionPayload {
  mutation: MutationType;
  node: Topic;
  updatedFields: String[];
  previousValues: TopicPreviousValues;
}

export interface TopicSubscriptionPayloadPromise
  extends Promise<TopicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TopicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TopicPreviousValuesPromise>() => T;
}

export interface TopicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TopicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TopicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TopicPreviousValuesSubscription>() => T;
}

export interface List {
  id: ID_Output;
  listName: String;
  icon?: String;
}

export interface ListPromise extends Promise<List>, Fragmentable {
  id: () => Promise<ID_Output>;
  listName: () => Promise<String>;
  icon: () => Promise<String>;
  mainTopics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ListSubscription
  extends Promise<AsyncIterator<List>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  listName: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  mainTopics: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ListNullablePromise
  extends Promise<List | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  listName: () => Promise<String>;
  icon: () => Promise<String>;
  mainTopics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface StoryItemPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  type: StoryItemType;
  url: String;
  preview: String;
  link?: String;
  text: String[];
  duration?: Float;
  inProject?: Boolean;
  likes: String[];
  likesCount?: Int;
  likedByMe?: Boolean;
}

export interface StoryItemPreviousValuesPromise
  extends Promise<StoryItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<StoryItemType>;
  url: () => Promise<String>;
  preview: () => Promise<String>;
  link: () => Promise<String>;
  text: () => Promise<String[]>;
  duration: () => Promise<Float>;
  inProject: () => Promise<Boolean>;
  likes: () => Promise<String[]>;
  likesCount: () => Promise<Int>;
  likedByMe: () => Promise<Boolean>;
}

export interface StoryItemPreviousValuesSubscription
  extends Promise<AsyncIterator<StoryItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<StoryItemType>>;
  url: () => Promise<AsyncIterator<String>>;
  preview: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String[]>>;
  duration: () => Promise<AsyncIterator<Float>>;
  inProject: () => Promise<AsyncIterator<Boolean>>;
  likes: () => Promise<AsyncIterator<String[]>>;
  likesCount: () => Promise<AsyncIterator<Int>>;
  likedByMe: () => Promise<AsyncIterator<Boolean>>;
}

export interface StoryItemSubscriptionPayload {
  mutation: MutationType;
  node: StoryItem;
  updatedFields: String[];
  previousValues: StoryItemPreviousValues;
}

export interface StoryItemSubscriptionPayloadPromise
  extends Promise<StoryItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoryItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoryItemPreviousValuesPromise>() => T;
}

export interface StoryItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StoryItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StoryItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoryItemPreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface UpdateEdge {
  node: Update;
  cursor: String;
}

export interface UpdateEdgePromise extends Promise<UpdateEdge>, Fragmentable {
  node: <T = UpdatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UpdateEdgeSubscription
  extends Promise<AsyncIterator<UpdateEdge>>,
    Fragmentable {
  node: <T = UpdateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface MeetingEdge {
  node: Meeting;
  cursor: String;
}

export interface MeetingEdgePromise extends Promise<MeetingEdge>, Fragmentable {
  node: <T = MeetingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MeetingEdgeSubscription
  extends Promise<AsyncIterator<MeetingEdge>>,
    Fragmentable {
  node: <T = MeetingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "StoryType",
    embedded: false
  },
  {
    name: "StoryItemType",
    embedded: false
  },
  {
    name: "NotificationStyle",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "Story",
    embedded: false
  },
  {
    name: "StoryItem",
    embedded: false
  },
  {
    name: "Skill",
    embedded: false
  },
  {
    name: "Experience",
    embedded: false
  },
  {
    name: "Education",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Update",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Meeting",
    embedded: false
  },
  {
    name: "List",
    embedded: false
  },
  {
    name: "Topic",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
