type AggregateComment {
  count: Int!
}

type AggregateEducation {
  count: Int!
}

type AggregateExperience {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateList {
  count: Int!
}

type AggregateMeeting {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSkill {
  count: Int!
}

type AggregateStory {
  count: Int!
}

type AggregateStoryItem {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateUpdate {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  createdAt: DateTime!
  owner: User!
  parentPost: Post
  parentUpdate: Update
  parentComment: Comment
  content: String
  image: String
  likes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  likesCount: Int
  likedByMe: Boolean
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  commentsCount: Int
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  _deleted: Boolean
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  owner: UserCreateOneInput!
  parentPost: PostCreateOneWithoutCommentsInput
  parentUpdate: UpdateCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentCreateManyWithoutParentCommentInput
  commentsCount: Int
  notifications: NotificationCreateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentCreateManyWithoutParentCommentInput {
  create: [CommentCreateWithoutParentCommentInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutParentPostInput {
  create: [CommentCreateWithoutParentPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutParentUpdateInput {
  create: [CommentCreateWithoutParentUpdateInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutCommentsInput {
  create: CommentCreateWithoutCommentsInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutNotificationsInput {
  create: CommentCreateWithoutNotificationsInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutCommentsInput {
  id: ID
  owner: UserCreateOneInput!
  parentPost: PostCreateOneWithoutCommentsInput
  parentUpdate: UpdateCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  notifications: NotificationCreateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentCreateWithoutNotificationsInput {
  id: ID
  owner: UserCreateOneInput!
  parentPost: PostCreateOneWithoutCommentsInput
  parentUpdate: UpdateCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentCreateManyWithoutParentCommentInput
  commentsCount: Int
  _deleted: Boolean
}

input CommentCreateWithoutParentCommentInput {
  id: ID
  owner: UserCreateOneInput!
  parentPost: PostCreateOneWithoutCommentsInput
  parentUpdate: UpdateCreateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentCreateManyWithoutParentCommentInput
  commentsCount: Int
  notifications: NotificationCreateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentCreateWithoutParentPostInput {
  id: ID
  owner: UserCreateOneInput!
  parentUpdate: UpdateCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentCreateManyWithoutParentCommentInput
  commentsCount: Int
  notifications: NotificationCreateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentCreateWithoutParentUpdateInput {
  id: ID
  owner: UserCreateOneInput!
  parentPost: PostCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentCreateManyWithoutParentCommentInput
  commentsCount: Int
  notifications: NotificationCreateManyWithoutCommentInput
  _deleted: Boolean
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
  image_ASC
  image_DESC
  likesCount_ASC
  likesCount_DESC
  likedByMe_ASC
  likedByMe_DESC
  commentsCount_ASC
  commentsCount_DESC
  _deleted_ASC
  _deleted_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  content: String
  image: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  _deleted: Boolean
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  likedByMe: Boolean
  likedByMe_not: Boolean
  commentsCount: Int
  commentsCount_not: Int
  commentsCount_in: [Int!]
  commentsCount_not_in: [Int!]
  commentsCount_lt: Int
  commentsCount_lte: Int
  commentsCount_gt: Int
  commentsCount_gte: Int
  _deleted: Boolean
  _deleted_not: Boolean
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  owner: UserUpdateOneRequiredInput
  parentPost: PostUpdateOneWithoutCommentsInput
  parentUpdate: UpdateUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentUpdateManyWithoutParentCommentInput
  commentsCount: Int
  notifications: NotificationUpdateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentUpdateManyDataInput {
  content: String
  image: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  _deleted: Boolean
}

input CommentUpdateManyMutationInput {
  content: String
  image: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  _deleted: Boolean
}

input CommentUpdateManyWithoutParentCommentInput {
  create: [CommentCreateWithoutParentCommentInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentCommentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentCommentInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutParentPostInput {
  create: [CommentCreateWithoutParentPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutParentUpdateInput {
  create: [CommentCreateWithoutParentUpdateInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentUpdateInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentUpdateInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneWithoutCommentsInput {
  create: CommentCreateWithoutCommentsInput
  update: CommentUpdateWithoutCommentsDataInput
  upsert: CommentUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateOneWithoutNotificationsInput {
  create: CommentCreateWithoutNotificationsInput
  update: CommentUpdateWithoutNotificationsDataInput
  upsert: CommentUpsertWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutCommentsDataInput {
  owner: UserUpdateOneRequiredInput
  parentPost: PostUpdateOneWithoutCommentsInput
  parentUpdate: UpdateUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  notifications: NotificationUpdateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentUpdateWithoutNotificationsDataInput {
  owner: UserUpdateOneRequiredInput
  parentPost: PostUpdateOneWithoutCommentsInput
  parentUpdate: UpdateUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentUpdateManyWithoutParentCommentInput
  commentsCount: Int
  _deleted: Boolean
}

input CommentUpdateWithoutParentCommentDataInput {
  owner: UserUpdateOneRequiredInput
  parentPost: PostUpdateOneWithoutCommentsInput
  parentUpdate: UpdateUpdateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentUpdateManyWithoutParentCommentInput
  commentsCount: Int
  notifications: NotificationUpdateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentUpdateWithoutParentPostDataInput {
  owner: UserUpdateOneRequiredInput
  parentUpdate: UpdateUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentUpdateManyWithoutParentCommentInput
  commentsCount: Int
  notifications: NotificationUpdateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentUpdateWithoutParentUpdateDataInput {
  owner: UserUpdateOneRequiredInput
  parentPost: PostUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutCommentsInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentUpdateManyWithoutParentCommentInput
  commentsCount: Int
  notifications: NotificationUpdateManyWithoutCommentInput
  _deleted: Boolean
}

input CommentUpdateWithWhereUniqueWithoutParentCommentInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutParentCommentDataInput!
}

input CommentUpdateWithWhereUniqueWithoutParentPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutParentPostDataInput!
}

input CommentUpdateWithWhereUniqueWithoutParentUpdateInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutParentUpdateDataInput!
}

input CommentUpsertWithoutCommentsInput {
  update: CommentUpdateWithoutCommentsDataInput!
  create: CommentCreateWithoutCommentsInput!
}

input CommentUpsertWithoutNotificationsInput {
  update: CommentUpdateWithoutNotificationsDataInput!
  create: CommentCreateWithoutNotificationsInput!
}

input CommentUpsertWithWhereUniqueWithoutParentCommentInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutParentCommentDataInput!
  create: CommentCreateWithoutParentCommentInput!
}

input CommentUpsertWithWhereUniqueWithoutParentPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutParentPostDataInput!
  create: CommentCreateWithoutParentPostInput!
}

input CommentUpsertWithWhereUniqueWithoutParentUpdateInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutParentUpdateDataInput!
  create: CommentCreateWithoutParentUpdateInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  owner: UserWhereInput
  parentPost: PostWhereInput
  parentUpdate: UpdateWhereInput
  parentComment: CommentWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  likes_every: UserWhereInput
  likes_some: UserWhereInput
  likes_none: UserWhereInput
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  likedByMe: Boolean
  likedByMe_not: Boolean
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  commentsCount: Int
  commentsCount_not: Int
  commentsCount_in: [Int!]
  commentsCount_not_in: [Int!]
  commentsCount_lt: Int
  commentsCount_lte: Int
  commentsCount_gt: Int
  commentsCount_gte: Int
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  _deleted: Boolean
  _deleted_not: Boolean
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Education {
  id: ID!
  owner: User!
  name: String!
  subText: String!
  startDateMonth: String
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

type EducationConnection {
  pageInfo: PageInfo!
  edges: [EducationEdge]!
  aggregate: AggregateEducation!
}

input EducationCreateInput {
  id: ID
  owner: UserCreateOneWithoutEducationInput!
  name: String!
  subText: String!
  startDateMonth: String
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input EducationCreateManyWithoutOwnerInput {
  create: [EducationCreateWithoutOwnerInput!]
  connect: [EducationWhereUniqueInput!]
}

input EducationCreateWithoutOwnerInput {
  id: ID
  name: String!
  subText: String!
  startDateMonth: String
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

type EducationEdge {
  node: Education!
  cursor: String!
}

enum EducationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  subText_ASC
  subText_DESC
  startDateMonth_ASC
  startDateMonth_DESC
  startDateYear_ASC
  startDateYear_DESC
  endDateMonth_ASC
  endDateMonth_DESC
  endDateYear_ASC
  endDateYear_DESC
  location_ASC
  location_DESC
  locationID_ASC
  locationID_DESC
  locationLat_ASC
  locationLat_DESC
  locationLon_ASC
  locationLon_DESC
  currentRole_ASC
  currentRole_DESC
}

type EducationPreviousValues {
  id: ID!
  name: String!
  subText: String!
  startDateMonth: String
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input EducationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subText: String
  subText_not: String
  subText_in: [String!]
  subText_not_in: [String!]
  subText_lt: String
  subText_lte: String
  subText_gt: String
  subText_gte: String
  subText_contains: String
  subText_not_contains: String
  subText_starts_with: String
  subText_not_starts_with: String
  subText_ends_with: String
  subText_not_ends_with: String
  startDateMonth: String
  startDateMonth_not: String
  startDateMonth_in: [String!]
  startDateMonth_not_in: [String!]
  startDateMonth_lt: String
  startDateMonth_lte: String
  startDateMonth_gt: String
  startDateMonth_gte: String
  startDateMonth_contains: String
  startDateMonth_not_contains: String
  startDateMonth_starts_with: String
  startDateMonth_not_starts_with: String
  startDateMonth_ends_with: String
  startDateMonth_not_ends_with: String
  startDateYear: Int
  startDateYear_not: Int
  startDateYear_in: [Int!]
  startDateYear_not_in: [Int!]
  startDateYear_lt: Int
  startDateYear_lte: Int
  startDateYear_gt: Int
  startDateYear_gte: Int
  endDateMonth: String
  endDateMonth_not: String
  endDateMonth_in: [String!]
  endDateMonth_not_in: [String!]
  endDateMonth_lt: String
  endDateMonth_lte: String
  endDateMonth_gt: String
  endDateMonth_gte: String
  endDateMonth_contains: String
  endDateMonth_not_contains: String
  endDateMonth_starts_with: String
  endDateMonth_not_starts_with: String
  endDateMonth_ends_with: String
  endDateMonth_not_ends_with: String
  endDateYear: Int
  endDateYear_not: Int
  endDateYear_in: [Int!]
  endDateYear_not_in: [Int!]
  endDateYear_lt: Int
  endDateYear_lte: Int
  endDateYear_gt: Int
  endDateYear_gte: Int
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  locationID: String
  locationID_not: String
  locationID_in: [String!]
  locationID_not_in: [String!]
  locationID_lt: String
  locationID_lte: String
  locationID_gt: String
  locationID_gte: String
  locationID_contains: String
  locationID_not_contains: String
  locationID_starts_with: String
  locationID_not_starts_with: String
  locationID_ends_with: String
  locationID_not_ends_with: String
  locationLat: Float
  locationLat_not: Float
  locationLat_in: [Float!]
  locationLat_not_in: [Float!]
  locationLat_lt: Float
  locationLat_lte: Float
  locationLat_gt: Float
  locationLat_gte: Float
  locationLon: Float
  locationLon_not: Float
  locationLon_in: [Float!]
  locationLon_not_in: [Float!]
  locationLon_lt: Float
  locationLon_lte: Float
  locationLon_gt: Float
  locationLon_gte: Float
  currentRole: Boolean
  currentRole_not: Boolean
  AND: [EducationScalarWhereInput!]
  OR: [EducationScalarWhereInput!]
  NOT: [EducationScalarWhereInput!]
}

type EducationSubscriptionPayload {
  mutation: MutationType!
  node: Education
  updatedFields: [String!]
  previousValues: EducationPreviousValues
}

input EducationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EducationWhereInput
  AND: [EducationSubscriptionWhereInput!]
  OR: [EducationSubscriptionWhereInput!]
  NOT: [EducationSubscriptionWhereInput!]
}

input EducationUpdateInput {
  owner: UserUpdateOneRequiredWithoutEducationInput
  name: String
  subText: String
  startDateMonth: String
  startDateYear: Int
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input EducationUpdateManyDataInput {
  name: String
  subText: String
  startDateMonth: String
  startDateYear: Int
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input EducationUpdateManyMutationInput {
  name: String
  subText: String
  startDateMonth: String
  startDateYear: Int
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input EducationUpdateManyWithoutOwnerInput {
  create: [EducationCreateWithoutOwnerInput!]
  delete: [EducationWhereUniqueInput!]
  connect: [EducationWhereUniqueInput!]
  set: [EducationWhereUniqueInput!]
  disconnect: [EducationWhereUniqueInput!]
  update: [EducationUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [EducationUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [EducationScalarWhereInput!]
  updateMany: [EducationUpdateManyWithWhereNestedInput!]
}

input EducationUpdateManyWithWhereNestedInput {
  where: EducationScalarWhereInput!
  data: EducationUpdateManyDataInput!
}

input EducationUpdateWithoutOwnerDataInput {
  name: String
  subText: String
  startDateMonth: String
  startDateYear: Int
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input EducationUpdateWithWhereUniqueWithoutOwnerInput {
  where: EducationWhereUniqueInput!
  data: EducationUpdateWithoutOwnerDataInput!
}

input EducationUpsertWithWhereUniqueWithoutOwnerInput {
  where: EducationWhereUniqueInput!
  update: EducationUpdateWithoutOwnerDataInput!
  create: EducationCreateWithoutOwnerInput!
}

input EducationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subText: String
  subText_not: String
  subText_in: [String!]
  subText_not_in: [String!]
  subText_lt: String
  subText_lte: String
  subText_gt: String
  subText_gte: String
  subText_contains: String
  subText_not_contains: String
  subText_starts_with: String
  subText_not_starts_with: String
  subText_ends_with: String
  subText_not_ends_with: String
  startDateMonth: String
  startDateMonth_not: String
  startDateMonth_in: [String!]
  startDateMonth_not_in: [String!]
  startDateMonth_lt: String
  startDateMonth_lte: String
  startDateMonth_gt: String
  startDateMonth_gte: String
  startDateMonth_contains: String
  startDateMonth_not_contains: String
  startDateMonth_starts_with: String
  startDateMonth_not_starts_with: String
  startDateMonth_ends_with: String
  startDateMonth_not_ends_with: String
  startDateYear: Int
  startDateYear_not: Int
  startDateYear_in: [Int!]
  startDateYear_not_in: [Int!]
  startDateYear_lt: Int
  startDateYear_lte: Int
  startDateYear_gt: Int
  startDateYear_gte: Int
  endDateMonth: String
  endDateMonth_not: String
  endDateMonth_in: [String!]
  endDateMonth_not_in: [String!]
  endDateMonth_lt: String
  endDateMonth_lte: String
  endDateMonth_gt: String
  endDateMonth_gte: String
  endDateMonth_contains: String
  endDateMonth_not_contains: String
  endDateMonth_starts_with: String
  endDateMonth_not_starts_with: String
  endDateMonth_ends_with: String
  endDateMonth_not_ends_with: String
  endDateYear: Int
  endDateYear_not: Int
  endDateYear_in: [Int!]
  endDateYear_not_in: [Int!]
  endDateYear_lt: Int
  endDateYear_lte: Int
  endDateYear_gt: Int
  endDateYear_gte: Int
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  locationID: String
  locationID_not: String
  locationID_in: [String!]
  locationID_not_in: [String!]
  locationID_lt: String
  locationID_lte: String
  locationID_gt: String
  locationID_gte: String
  locationID_contains: String
  locationID_not_contains: String
  locationID_starts_with: String
  locationID_not_starts_with: String
  locationID_ends_with: String
  locationID_not_ends_with: String
  locationLat: Float
  locationLat_not: Float
  locationLat_in: [Float!]
  locationLat_not_in: [Float!]
  locationLat_lt: Float
  locationLat_lte: Float
  locationLat_gt: Float
  locationLat_gte: Float
  locationLon: Float
  locationLon_not: Float
  locationLon_in: [Float!]
  locationLon_not_in: [Float!]
  locationLon_lt: Float
  locationLon_lte: Float
  locationLon_gt: Float
  locationLon_gte: Float
  currentRole: Boolean
  currentRole_not: Boolean
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
}

input EducationWhereUniqueInput {
  id: ID
}

type Experience {
  id: ID!
  owner: User!
  name: String!
  subText: String!
  startDateMonth: String!
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

type ExperienceConnection {
  pageInfo: PageInfo!
  edges: [ExperienceEdge]!
  aggregate: AggregateExperience!
}

input ExperienceCreateInput {
  id: ID
  owner: UserCreateOneWithoutExperienceInput!
  name: String!
  subText: String!
  startDateMonth: String!
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input ExperienceCreateManyWithoutOwnerInput {
  create: [ExperienceCreateWithoutOwnerInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input ExperienceCreateWithoutOwnerInput {
  id: ID
  name: String!
  subText: String!
  startDateMonth: String!
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

type ExperienceEdge {
  node: Experience!
  cursor: String!
}

enum ExperienceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  subText_ASC
  subText_DESC
  startDateMonth_ASC
  startDateMonth_DESC
  startDateYear_ASC
  startDateYear_DESC
  endDateMonth_ASC
  endDateMonth_DESC
  endDateYear_ASC
  endDateYear_DESC
  location_ASC
  location_DESC
  locationID_ASC
  locationID_DESC
  locationLat_ASC
  locationLat_DESC
  locationLon_ASC
  locationLon_DESC
  currentRole_ASC
  currentRole_DESC
}

type ExperiencePreviousValues {
  id: ID!
  name: String!
  subText: String!
  startDateMonth: String!
  startDateYear: Int!
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input ExperienceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subText: String
  subText_not: String
  subText_in: [String!]
  subText_not_in: [String!]
  subText_lt: String
  subText_lte: String
  subText_gt: String
  subText_gte: String
  subText_contains: String
  subText_not_contains: String
  subText_starts_with: String
  subText_not_starts_with: String
  subText_ends_with: String
  subText_not_ends_with: String
  startDateMonth: String
  startDateMonth_not: String
  startDateMonth_in: [String!]
  startDateMonth_not_in: [String!]
  startDateMonth_lt: String
  startDateMonth_lte: String
  startDateMonth_gt: String
  startDateMonth_gte: String
  startDateMonth_contains: String
  startDateMonth_not_contains: String
  startDateMonth_starts_with: String
  startDateMonth_not_starts_with: String
  startDateMonth_ends_with: String
  startDateMonth_not_ends_with: String
  startDateYear: Int
  startDateYear_not: Int
  startDateYear_in: [Int!]
  startDateYear_not_in: [Int!]
  startDateYear_lt: Int
  startDateYear_lte: Int
  startDateYear_gt: Int
  startDateYear_gte: Int
  endDateMonth: String
  endDateMonth_not: String
  endDateMonth_in: [String!]
  endDateMonth_not_in: [String!]
  endDateMonth_lt: String
  endDateMonth_lte: String
  endDateMonth_gt: String
  endDateMonth_gte: String
  endDateMonth_contains: String
  endDateMonth_not_contains: String
  endDateMonth_starts_with: String
  endDateMonth_not_starts_with: String
  endDateMonth_ends_with: String
  endDateMonth_not_ends_with: String
  endDateYear: Int
  endDateYear_not: Int
  endDateYear_in: [Int!]
  endDateYear_not_in: [Int!]
  endDateYear_lt: Int
  endDateYear_lte: Int
  endDateYear_gt: Int
  endDateYear_gte: Int
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  locationID: String
  locationID_not: String
  locationID_in: [String!]
  locationID_not_in: [String!]
  locationID_lt: String
  locationID_lte: String
  locationID_gt: String
  locationID_gte: String
  locationID_contains: String
  locationID_not_contains: String
  locationID_starts_with: String
  locationID_not_starts_with: String
  locationID_ends_with: String
  locationID_not_ends_with: String
  locationLat: Float
  locationLat_not: Float
  locationLat_in: [Float!]
  locationLat_not_in: [Float!]
  locationLat_lt: Float
  locationLat_lte: Float
  locationLat_gt: Float
  locationLat_gte: Float
  locationLon: Float
  locationLon_not: Float
  locationLon_in: [Float!]
  locationLon_not_in: [Float!]
  locationLon_lt: Float
  locationLon_lte: Float
  locationLon_gt: Float
  locationLon_gte: Float
  currentRole: Boolean
  currentRole_not: Boolean
  AND: [ExperienceScalarWhereInput!]
  OR: [ExperienceScalarWhereInput!]
  NOT: [ExperienceScalarWhereInput!]
}

type ExperienceSubscriptionPayload {
  mutation: MutationType!
  node: Experience
  updatedFields: [String!]
  previousValues: ExperiencePreviousValues
}

input ExperienceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExperienceWhereInput
  AND: [ExperienceSubscriptionWhereInput!]
  OR: [ExperienceSubscriptionWhereInput!]
  NOT: [ExperienceSubscriptionWhereInput!]
}

input ExperienceUpdateInput {
  owner: UserUpdateOneRequiredWithoutExperienceInput
  name: String
  subText: String
  startDateMonth: String
  startDateYear: Int
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input ExperienceUpdateManyDataInput {
  name: String
  subText: String
  startDateMonth: String
  startDateYear: Int
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input ExperienceUpdateManyMutationInput {
  name: String
  subText: String
  startDateMonth: String
  startDateYear: Int
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input ExperienceUpdateManyWithoutOwnerInput {
  create: [ExperienceCreateWithoutOwnerInput!]
  delete: [ExperienceWhereUniqueInput!]
  connect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  disconnect: [ExperienceWhereUniqueInput!]
  update: [ExperienceUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [ExperienceUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [ExperienceScalarWhereInput!]
  updateMany: [ExperienceUpdateManyWithWhereNestedInput!]
}

input ExperienceUpdateManyWithWhereNestedInput {
  where: ExperienceScalarWhereInput!
  data: ExperienceUpdateManyDataInput!
}

input ExperienceUpdateWithoutOwnerDataInput {
  name: String
  subText: String
  startDateMonth: String
  startDateYear: Int
  endDateMonth: String
  endDateYear: Int
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  currentRole: Boolean
}

input ExperienceUpdateWithWhereUniqueWithoutOwnerInput {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateWithoutOwnerDataInput!
}

input ExperienceUpsertWithWhereUniqueWithoutOwnerInput {
  where: ExperienceWhereUniqueInput!
  update: ExperienceUpdateWithoutOwnerDataInput!
  create: ExperienceCreateWithoutOwnerInput!
}

input ExperienceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subText: String
  subText_not: String
  subText_in: [String!]
  subText_not_in: [String!]
  subText_lt: String
  subText_lte: String
  subText_gt: String
  subText_gte: String
  subText_contains: String
  subText_not_contains: String
  subText_starts_with: String
  subText_not_starts_with: String
  subText_ends_with: String
  subText_not_ends_with: String
  startDateMonth: String
  startDateMonth_not: String
  startDateMonth_in: [String!]
  startDateMonth_not_in: [String!]
  startDateMonth_lt: String
  startDateMonth_lte: String
  startDateMonth_gt: String
  startDateMonth_gte: String
  startDateMonth_contains: String
  startDateMonth_not_contains: String
  startDateMonth_starts_with: String
  startDateMonth_not_starts_with: String
  startDateMonth_ends_with: String
  startDateMonth_not_ends_with: String
  startDateYear: Int
  startDateYear_not: Int
  startDateYear_in: [Int!]
  startDateYear_not_in: [Int!]
  startDateYear_lt: Int
  startDateYear_lte: Int
  startDateYear_gt: Int
  startDateYear_gte: Int
  endDateMonth: String
  endDateMonth_not: String
  endDateMonth_in: [String!]
  endDateMonth_not_in: [String!]
  endDateMonth_lt: String
  endDateMonth_lte: String
  endDateMonth_gt: String
  endDateMonth_gte: String
  endDateMonth_contains: String
  endDateMonth_not_contains: String
  endDateMonth_starts_with: String
  endDateMonth_not_starts_with: String
  endDateMonth_ends_with: String
  endDateMonth_not_ends_with: String
  endDateYear: Int
  endDateYear_not: Int
  endDateYear_in: [Int!]
  endDateYear_not_in: [Int!]
  endDateYear_lt: Int
  endDateYear_lte: Int
  endDateYear_gt: Int
  endDateYear_gte: Int
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  locationID: String
  locationID_not: String
  locationID_in: [String!]
  locationID_not_in: [String!]
  locationID_lt: String
  locationID_lte: String
  locationID_gt: String
  locationID_gte: String
  locationID_contains: String
  locationID_not_contains: String
  locationID_starts_with: String
  locationID_not_starts_with: String
  locationID_ends_with: String
  locationID_not_ends_with: String
  locationLat: Float
  locationLat_not: Float
  locationLat_in: [Float!]
  locationLat_not_in: [Float!]
  locationLat_lt: Float
  locationLat_lte: Float
  locationLat_gt: Float
  locationLat_gte: Float
  locationLon: Float
  locationLon_not: Float
  locationLon_in: [Float!]
  locationLon_not_in: [Float!]
  locationLon_lt: Float
  locationLon_lte: Float
  locationLon_gt: Float
  locationLon_gte: Float
  currentRole: Boolean
  currentRole_not: Boolean
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
}

input ExperienceWhereUniqueInput {
  id: ID
}

type Group {
  id: ID!
  updatedAt: DateTime!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  latestMessage: Message
  hidden(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  users: UserCreateManyWithoutGroupsInput
  messages: MessageCreateManyWithoutToInput
  latestMessage: MessageCreateOneInput
  hidden: UserCreateManyInput
}

input GroupCreateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutMessagesInput {
  create: GroupCreateWithoutMessagesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutMessagesInput {
  id: ID
  users: UserCreateManyWithoutGroupsInput
  latestMessage: MessageCreateOneInput
  hidden: UserCreateManyInput
}

input GroupCreateWithoutUsersInput {
  id: ID
  messages: MessageCreateManyWithoutToInput
  latestMessage: MessageCreateOneInput
  hidden: UserCreateManyInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GroupPreviousValues {
  id: ID!
  updatedAt: DateTime!
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  users: UserUpdateManyWithoutGroupsInput
  messages: MessageUpdateManyWithoutToInput
  latestMessage: MessageUpdateOneInput
  hidden: UserUpdateManyInput
}

input GroupUpdateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [GroupScalarWhereInput!]
}

input GroupUpdateOneRequiredWithoutMessagesInput {
  create: GroupCreateWithoutMessagesInput
  update: GroupUpdateWithoutMessagesDataInput
  upsert: GroupUpsertWithoutMessagesInput
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutMessagesDataInput {
  users: UserUpdateManyWithoutGroupsInput
  latestMessage: MessageUpdateOneInput
  hidden: UserUpdateManyInput
}

input GroupUpdateWithoutUsersDataInput {
  messages: MessageUpdateManyWithoutToInput
  latestMessage: MessageUpdateOneInput
  hidden: UserUpdateManyInput
}

input GroupUpdateWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutUsersDataInput!
}

input GroupUpsertWithoutMessagesInput {
  update: GroupUpdateWithoutMessagesDataInput!
  create: GroupCreateWithoutMessagesInput!
}

input GroupUpsertWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutUsersDataInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  latestMessage: MessageWhereInput
  hidden_every: UserWhereInput
  hidden_some: UserWhereInput
  hidden_none: UserWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
}

type List {
  id: ID!
  listName: String!
  icon: String
  mainTopics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
}

type ListConnection {
  pageInfo: PageInfo!
  edges: [ListEdge]!
  aggregate: AggregateList!
}

input ListCreateInput {
  id: ID
  listName: String!
  icon: String
  mainTopics: TopicCreateManyWithoutParentListInput
}

input ListCreateOneWithoutMainTopicsInput {
  create: ListCreateWithoutMainTopicsInput
  connect: ListWhereUniqueInput
}

input ListCreateWithoutMainTopicsInput {
  id: ID
  listName: String!
  icon: String
}

type ListEdge {
  node: List!
  cursor: String!
}

enum ListOrderByInput {
  id_ASC
  id_DESC
  listName_ASC
  listName_DESC
  icon_ASC
  icon_DESC
}

type ListPreviousValues {
  id: ID!
  listName: String!
  icon: String
}

type ListSubscriptionPayload {
  mutation: MutationType!
  node: List
  updatedFields: [String!]
  previousValues: ListPreviousValues
}

input ListSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ListWhereInput
  AND: [ListSubscriptionWhereInput!]
  OR: [ListSubscriptionWhereInput!]
  NOT: [ListSubscriptionWhereInput!]
}

input ListUpdateInput {
  listName: String
  icon: String
  mainTopics: TopicUpdateManyWithoutParentListInput
}

input ListUpdateManyMutationInput {
  listName: String
  icon: String
}

input ListUpdateOneWithoutMainTopicsInput {
  create: ListCreateWithoutMainTopicsInput
  update: ListUpdateWithoutMainTopicsDataInput
  upsert: ListUpsertWithoutMainTopicsInput
  delete: Boolean
  disconnect: Boolean
  connect: ListWhereUniqueInput
}

input ListUpdateWithoutMainTopicsDataInput {
  listName: String
  icon: String
}

input ListUpsertWithoutMainTopicsInput {
  update: ListUpdateWithoutMainTopicsDataInput!
  create: ListCreateWithoutMainTopicsInput!
}

input ListWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  listName: String
  listName_not: String
  listName_in: [String!]
  listName_not_in: [String!]
  listName_lt: String
  listName_lte: String
  listName_gt: String
  listName_gte: String
  listName_contains: String
  listName_not_contains: String
  listName_starts_with: String
  listName_not_starts_with: String
  listName_ends_with: String
  listName_not_ends_with: String
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  mainTopics_every: TopicWhereInput
  mainTopics_some: TopicWhereInput
  mainTopics_none: TopicWhereInput
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
}

input ListWhereUniqueInput {
  id: ID
  listName: String
}

scalar Long

type Meeting {
  id: ID!
  createdAt: DateTime!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  startTime: DateTime!
  endTime: DateTime!
  place: String!
}

type MeetingConnection {
  pageInfo: PageInfo!
  edges: [MeetingEdge]!
  aggregate: AggregateMeeting!
}

input MeetingCreateInput {
  id: ID
  users: UserCreateManyWithoutMeetingsInput
  startTime: DateTime!
  endTime: DateTime!
  place: String!
}

input MeetingCreateManyWithoutUsersInput {
  create: [MeetingCreateWithoutUsersInput!]
  connect: [MeetingWhereUniqueInput!]
}

input MeetingCreateWithoutUsersInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  place: String!
}

type MeetingEdge {
  node: Meeting!
  cursor: String!
}

enum MeetingOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  place_ASC
  place_DESC
}

type MeetingPreviousValues {
  id: ID!
  createdAt: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  place: String!
}

input MeetingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  place: String
  place_not: String
  place_in: [String!]
  place_not_in: [String!]
  place_lt: String
  place_lte: String
  place_gt: String
  place_gte: String
  place_contains: String
  place_not_contains: String
  place_starts_with: String
  place_not_starts_with: String
  place_ends_with: String
  place_not_ends_with: String
  AND: [MeetingScalarWhereInput!]
  OR: [MeetingScalarWhereInput!]
  NOT: [MeetingScalarWhereInput!]
}

type MeetingSubscriptionPayload {
  mutation: MutationType!
  node: Meeting
  updatedFields: [String!]
  previousValues: MeetingPreviousValues
}

input MeetingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MeetingWhereInput
  AND: [MeetingSubscriptionWhereInput!]
  OR: [MeetingSubscriptionWhereInput!]
  NOT: [MeetingSubscriptionWhereInput!]
}

input MeetingUpdateInput {
  users: UserUpdateManyWithoutMeetingsInput
  startTime: DateTime
  endTime: DateTime
  place: String
}

input MeetingUpdateManyDataInput {
  startTime: DateTime
  endTime: DateTime
  place: String
}

input MeetingUpdateManyMutationInput {
  startTime: DateTime
  endTime: DateTime
  place: String
}

input MeetingUpdateManyWithoutUsersInput {
  create: [MeetingCreateWithoutUsersInput!]
  delete: [MeetingWhereUniqueInput!]
  connect: [MeetingWhereUniqueInput!]
  set: [MeetingWhereUniqueInput!]
  disconnect: [MeetingWhereUniqueInput!]
  update: [MeetingUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [MeetingUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [MeetingScalarWhereInput!]
  updateMany: [MeetingUpdateManyWithWhereNestedInput!]
}

input MeetingUpdateManyWithWhereNestedInput {
  where: MeetingScalarWhereInput!
  data: MeetingUpdateManyDataInput!
}

input MeetingUpdateWithoutUsersDataInput {
  startTime: DateTime
  endTime: DateTime
  place: String
}

input MeetingUpdateWithWhereUniqueWithoutUsersInput {
  where: MeetingWhereUniqueInput!
  data: MeetingUpdateWithoutUsersDataInput!
}

input MeetingUpsertWithWhereUniqueWithoutUsersInput {
  where: MeetingWhereUniqueInput!
  update: MeetingUpdateWithoutUsersDataInput!
  create: MeetingCreateWithoutUsersInput!
}

input MeetingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  place: String
  place_not: String
  place_in: [String!]
  place_not_in: [String!]
  place_lt: String
  place_lte: String
  place_gt: String
  place_gte: String
  place_contains: String
  place_not_contains: String
  place_starts_with: String
  place_not_starts_with: String
  place_ends_with: String
  place_not_ends_with: String
  AND: [MeetingWhereInput!]
  OR: [MeetingWhereInput!]
  NOT: [MeetingWhereInput!]
}

input MeetingWhereUniqueInput {
  id: ID
}

type Message {
  id: ID!
  createdAt: DateTime!
  to: Group!
  from: User!
  content: String!
  hidden(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  to: GroupCreateOneWithoutMessagesInput!
  from: UserCreateOneInput!
  content: String!
  hidden: UserCreateManyInput
}

input MessageCreateManyInput {
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateOneInput {
  create: MessageCreateInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutToInput {
  id: ID
  from: UserCreateOneInput!
  content: String!
  hidden: UserCreateManyInput
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  content: String!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateDataInput {
  to: GroupUpdateOneRequiredWithoutMessagesInput
  from: UserUpdateOneRequiredInput
  content: String
  hidden: UserUpdateManyInput
}

input MessageUpdateInput {
  to: GroupUpdateOneRequiredWithoutMessagesInput
  from: UserUpdateOneRequiredInput
  content: String
  hidden: UserUpdateManyInput
}

input MessageUpdateManyDataInput {
  content: String
}

input MessageUpdateManyInput {
  create: [MessageCreateInput!]
  update: [MessageUpdateWithWhereUniqueNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueNestedInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyMutationInput {
  content: String
}

input MessageUpdateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutToInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutToInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateOneInput {
  create: MessageCreateInput
  update: MessageUpdateDataInput
  upsert: MessageUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: MessageWhereUniqueInput
}

input MessageUpdateWithoutToDataInput {
  from: UserUpdateOneRequiredInput
  content: String
  hidden: UserUpdateManyInput
}

input MessageUpdateWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateDataInput!
}

input MessageUpdateWithWhereUniqueWithoutToInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutToDataInput!
}

input MessageUpsertNestedInput {
  update: MessageUpdateDataInput!
  create: MessageCreateInput!
}

input MessageUpsertWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateDataInput!
  create: MessageCreateInput!
}

input MessageUpsertWithWhereUniqueWithoutToInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutToDataInput!
  create: MessageCreateWithoutToInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  to: GroupWhereInput
  from: UserWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  hidden_every: UserWhereInput
  hidden_some: UserWhereInput
  hidden_none: UserWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createEducation(data: EducationCreateInput!): Education!
  updateEducation(data: EducationUpdateInput!, where: EducationWhereUniqueInput!): Education
  updateManyEducations(data: EducationUpdateManyMutationInput!, where: EducationWhereInput): BatchPayload!
  upsertEducation(where: EducationWhereUniqueInput!, create: EducationCreateInput!, update: EducationUpdateInput!): Education!
  deleteEducation(where: EducationWhereUniqueInput!): Education
  deleteManyEducations(where: EducationWhereInput): BatchPayload!
  createExperience(data: ExperienceCreateInput!): Experience!
  updateExperience(data: ExperienceUpdateInput!, where: ExperienceWhereUniqueInput!): Experience
  updateManyExperiences(data: ExperienceUpdateManyMutationInput!, where: ExperienceWhereInput): BatchPayload!
  upsertExperience(where: ExperienceWhereUniqueInput!, create: ExperienceCreateInput!, update: ExperienceUpdateInput!): Experience!
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteManyExperiences(where: ExperienceWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createList(data: ListCreateInput!): List!
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updateManyLists(data: ListUpdateManyMutationInput!, where: ListWhereInput): BatchPayload!
  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!
  deleteList(where: ListWhereUniqueInput!): List
  deleteManyLists(where: ListWhereInput): BatchPayload!
  createMeeting(data: MeetingCreateInput!): Meeting!
  updateMeeting(data: MeetingUpdateInput!, where: MeetingWhereUniqueInput!): Meeting
  updateManyMeetings(data: MeetingUpdateManyMutationInput!, where: MeetingWhereInput): BatchPayload!
  upsertMeeting(where: MeetingWhereUniqueInput!, create: MeetingCreateInput!, update: MeetingUpdateInput!): Meeting!
  deleteMeeting(where: MeetingWhereUniqueInput!): Meeting
  deleteManyMeetings(where: MeetingWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createSkill(data: SkillCreateInput!): Skill!
  updateSkill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill
  updateManySkills(data: SkillUpdateManyMutationInput!, where: SkillWhereInput): BatchPayload!
  upsertSkill(where: SkillWhereUniqueInput!, create: SkillCreateInput!, update: SkillUpdateInput!): Skill!
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteManySkills(where: SkillWhereInput): BatchPayload!
  createStory(data: StoryCreateInput!): Story!
  updateStory(data: StoryUpdateInput!, where: StoryWhereUniqueInput!): Story
  updateManyStories(data: StoryUpdateManyMutationInput!, where: StoryWhereInput): BatchPayload!
  upsertStory(where: StoryWhereUniqueInput!, create: StoryCreateInput!, update: StoryUpdateInput!): Story!
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteManyStories(where: StoryWhereInput): BatchPayload!
  createStoryItem(data: StoryItemCreateInput!): StoryItem!
  updateStoryItem(data: StoryItemUpdateInput!, where: StoryItemWhereUniqueInput!): StoryItem
  updateManyStoryItems(data: StoryItemUpdateManyMutationInput!, where: StoryItemWhereInput): BatchPayload!
  upsertStoryItem(where: StoryItemWhereUniqueInput!, create: StoryItemCreateInput!, update: StoryItemUpdateInput!): StoryItem!
  deleteStoryItem(where: StoryItemWhereUniqueInput!): StoryItem
  deleteManyStoryItems(where: StoryItemWhereInput): BatchPayload!
  createTopic(data: TopicCreateInput!): Topic!
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  createUpdate(data: UpdateCreateInput!): Update!
  updateUpdate(data: UpdateUpdateInput!, where: UpdateWhereUniqueInput!): Update
  updateManyUpdates(data: UpdateUpdateManyMutationInput!, where: UpdateWhereInput): BatchPayload!
  upsertUpdate(where: UpdateWhereUniqueInput!, create: UpdateCreateInput!, update: UpdateUpdateInput!): Update!
  deleteUpdate(where: UpdateWhereUniqueInput!): Update
  deleteManyUpdates(where: UpdateWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  createdAt: DateTime!
  target: User!
  style: NotificationStyle!
  user: User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  post: Post
  update: Update
  comment: Comment
  seen: Boolean!
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  target: UserCreateOneWithoutNotificationsInput!
  style: NotificationStyle!
  user: UserCreateOneInput
  users: UserCreateManyInput
  post: PostCreateOneWithoutNotificationsInput
  update: UpdateCreateOneWithoutNotificationsInput
  comment: CommentCreateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationCreateManyWithoutCommentInput {
  create: [NotificationCreateWithoutCommentInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateManyWithoutPostInput {
  create: [NotificationCreateWithoutPostInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateManyWithoutTargetInput {
  create: [NotificationCreateWithoutTargetInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateManyWithoutUpdateInput {
  create: [NotificationCreateWithoutUpdateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutCommentInput {
  id: ID
  target: UserCreateOneWithoutNotificationsInput!
  style: NotificationStyle!
  user: UserCreateOneInput
  users: UserCreateManyInput
  post: PostCreateOneWithoutNotificationsInput
  update: UpdateCreateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationCreateWithoutPostInput {
  id: ID
  target: UserCreateOneWithoutNotificationsInput!
  style: NotificationStyle!
  user: UserCreateOneInput
  users: UserCreateManyInput
  update: UpdateCreateOneWithoutNotificationsInput
  comment: CommentCreateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationCreateWithoutTargetInput {
  id: ID
  style: NotificationStyle!
  user: UserCreateOneInput
  users: UserCreateManyInput
  post: PostCreateOneWithoutNotificationsInput
  update: UpdateCreateOneWithoutNotificationsInput
  comment: CommentCreateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationCreateWithoutUpdateInput {
  id: ID
  target: UserCreateOneWithoutNotificationsInput!
  style: NotificationStyle!
  user: UserCreateOneInput
  users: UserCreateManyInput
  post: PostCreateOneWithoutNotificationsInput
  comment: CommentCreateOneWithoutNotificationsInput
  seen: Boolean
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  style_ASC
  style_DESC
  seen_ASC
  seen_DESC
}

type NotificationPreviousValues {
  id: ID!
  createdAt: DateTime!
  style: NotificationStyle!
  seen: Boolean!
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  style: NotificationStyle
  style_not: NotificationStyle
  style_in: [NotificationStyle!]
  style_not_in: [NotificationStyle!]
  seen: Boolean
  seen_not: Boolean
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

enum NotificationStyle {
  LIKE_GOAL
  LIKES_GOAL
  LIKE_POST
  LIKES_POST
  LIKE_UPDATE
  LIKES_UPDATE
  LIKE_COMMENT
  LIKES_COMMENT
  COMMENT_GOAL
  COMMENT_POST
  COMMENT_UPDATE
  COMMENT_COMMENT
  LIKE_GOAL_MENTIONEDIN
  LIKES_GOAL_MENTIONEDIN
  LIKE_POST_MENTIONEDIN
  LIKES_POST_MENTIONEDIN
  LIKE_UPDATE_MENTIONEDIN
  LIKES_UPDATE_MENTIONEDIN
  LIKE_COMMENT_MENTIONEDIN
  LIKES_COMMENT_MENTIONEDIN
  COMMENT_GOAL_MENTIONEDIN
  COMMENT_POST_MENTIONEDIN
  COMMENT_UPDATE_MENTIONEDIN
  MENTIONED_IN_GOAL
  MENTIONED_IN_POST
  MENTIONED_IN_UPDATE
  MENTIONED_IN_COMMENT
  NEW_FOLLOWER
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateInput {
  target: UserUpdateOneRequiredWithoutNotificationsInput
  style: NotificationStyle
  user: UserUpdateOneInput
  users: UserUpdateManyInput
  post: PostUpdateOneWithoutNotificationsInput
  update: UpdateUpdateOneWithoutNotificationsInput
  comment: CommentUpdateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationUpdateManyDataInput {
  style: NotificationStyle
  seen: Boolean
}

input NotificationUpdateManyMutationInput {
  style: NotificationStyle
  seen: Boolean
}

input NotificationUpdateManyWithoutCommentInput {
  create: [NotificationCreateWithoutCommentInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutCommentInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithoutPostInput {
  create: [NotificationCreateWithoutPostInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithoutTargetInput {
  create: [NotificationCreateWithoutTargetInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutTargetInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutTargetInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithoutUpdateInput {
  create: [NotificationCreateWithoutUpdateInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUpdateInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUpdateInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateWithoutCommentDataInput {
  target: UserUpdateOneRequiredWithoutNotificationsInput
  style: NotificationStyle
  user: UserUpdateOneInput
  users: UserUpdateManyInput
  post: PostUpdateOneWithoutNotificationsInput
  update: UpdateUpdateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationUpdateWithoutPostDataInput {
  target: UserUpdateOneRequiredWithoutNotificationsInput
  style: NotificationStyle
  user: UserUpdateOneInput
  users: UserUpdateManyInput
  update: UpdateUpdateOneWithoutNotificationsInput
  comment: CommentUpdateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationUpdateWithoutTargetDataInput {
  style: NotificationStyle
  user: UserUpdateOneInput
  users: UserUpdateManyInput
  post: PostUpdateOneWithoutNotificationsInput
  update: UpdateUpdateOneWithoutNotificationsInput
  comment: CommentUpdateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationUpdateWithoutUpdateDataInput {
  target: UserUpdateOneRequiredWithoutNotificationsInput
  style: NotificationStyle
  user: UserUpdateOneInput
  users: UserUpdateManyInput
  post: PostUpdateOneWithoutNotificationsInput
  comment: CommentUpdateOneWithoutNotificationsInput
  seen: Boolean
}

input NotificationUpdateWithWhereUniqueWithoutCommentInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutCommentDataInput!
}

input NotificationUpdateWithWhereUniqueWithoutPostInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutPostDataInput!
}

input NotificationUpdateWithWhereUniqueWithoutTargetInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutTargetDataInput!
}

input NotificationUpdateWithWhereUniqueWithoutUpdateInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutUpdateDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutCommentInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutCommentDataInput!
  create: NotificationCreateWithoutCommentInput!
}

input NotificationUpsertWithWhereUniqueWithoutPostInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutPostDataInput!
  create: NotificationCreateWithoutPostInput!
}

input NotificationUpsertWithWhereUniqueWithoutTargetInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutTargetDataInput!
  create: NotificationCreateWithoutTargetInput!
}

input NotificationUpsertWithWhereUniqueWithoutUpdateInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutUpdateDataInput!
  create: NotificationCreateWithoutUpdateInput!
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  target: UserWhereInput
  style: NotificationStyle
  style_not: NotificationStyle
  style_in: [NotificationStyle!]
  style_not_in: [NotificationStyle!]
  user: UserWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  post: PostWhereInput
  update: UpdateWhereInput
  comment: CommentWhereInput
  seen: Boolean
  seen_not: Boolean
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  createdAt: DateTime!
  lastUpdated: DateTime!
  owner: User!
  isGoal: Boolean!
  goal: String
  goalStatus: String
  subField: Topic
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String!
  images: [String!]!
  video: String
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updates(where: UpdateWhereInput, orderBy: UpdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Update!]
  likes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  views(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  _deleted: Boolean
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateimagesInput {
  set: [String!]
}

input PostCreateInput {
  id: ID
  lastUpdated: DateTime!
  owner: UserCreateOneWithoutPostsInput!
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicCreateOneInput
  topics: TopicCreateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String!
  images: PostCreateimagesInput
  video: String
  comments: CommentCreateManyWithoutParentPostInput
  updates: UpdateCreateManyWithoutParentPostInput
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationCreateManyWithoutPostInput
  views: UserCreateManyInput
  _deleted: Boolean
}

input PostCreateManyWithoutOwnerInput {
  create: [PostCreateWithoutOwnerInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutNotificationsInput {
  create: PostCreateWithoutNotificationsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutUpdatesInput {
  create: PostCreateWithoutUpdatesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  lastUpdated: DateTime!
  owner: UserCreateOneWithoutPostsInput!
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicCreateOneInput
  topics: TopicCreateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String!
  images: PostCreateimagesInput
  video: String
  updates: UpdateCreateManyWithoutParentPostInput
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationCreateManyWithoutPostInput
  views: UserCreateManyInput
  _deleted: Boolean
}

input PostCreateWithoutNotificationsInput {
  id: ID
  lastUpdated: DateTime!
  owner: UserCreateOneWithoutPostsInput!
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicCreateOneInput
  topics: TopicCreateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String!
  images: PostCreateimagesInput
  video: String
  comments: CommentCreateManyWithoutParentPostInput
  updates: UpdateCreateManyWithoutParentPostInput
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  views: UserCreateManyInput
  _deleted: Boolean
}

input PostCreateWithoutOwnerInput {
  id: ID
  lastUpdated: DateTime!
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicCreateOneInput
  topics: TopicCreateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String!
  images: PostCreateimagesInput
  video: String
  comments: CommentCreateManyWithoutParentPostInput
  updates: UpdateCreateManyWithoutParentPostInput
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationCreateManyWithoutPostInput
  views: UserCreateManyInput
  _deleted: Boolean
}

input PostCreateWithoutUpdatesInput {
  id: ID
  lastUpdated: DateTime!
  owner: UserCreateOneWithoutPostsInput!
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicCreateOneInput
  topics: TopicCreateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String!
  images: PostCreateimagesInput
  video: String
  comments: CommentCreateManyWithoutParentPostInput
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationCreateManyWithoutPostInput
  views: UserCreateManyInput
  _deleted: Boolean
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  lastUpdated_ASC
  lastUpdated_DESC
  isGoal_ASC
  isGoal_DESC
  goal_ASC
  goal_DESC
  goalStatus_ASC
  goalStatus_DESC
  location_ASC
  location_DESC
  locationID_ASC
  locationID_DESC
  locationLat_ASC
  locationLat_DESC
  locationLon_ASC
  locationLon_DESC
  content_ASC
  content_DESC
  video_ASC
  video_DESC
  likesCount_ASC
  likesCount_DESC
  likedByMe_ASC
  likedByMe_DESC
  commentsCount_ASC
  commentsCount_DESC
  sharesCount_ASC
  sharesCount_DESC
  _deleted_ASC
  _deleted_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  lastUpdated: DateTime!
  isGoal: Boolean!
  goal: String
  goalStatus: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String!
  images: [String!]!
  video: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  _deleted: Boolean
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastUpdated: DateTime
  lastUpdated_not: DateTime
  lastUpdated_in: [DateTime!]
  lastUpdated_not_in: [DateTime!]
  lastUpdated_lt: DateTime
  lastUpdated_lte: DateTime
  lastUpdated_gt: DateTime
  lastUpdated_gte: DateTime
  isGoal: Boolean
  isGoal_not: Boolean
  goal: String
  goal_not: String
  goal_in: [String!]
  goal_not_in: [String!]
  goal_lt: String
  goal_lte: String
  goal_gt: String
  goal_gte: String
  goal_contains: String
  goal_not_contains: String
  goal_starts_with: String
  goal_not_starts_with: String
  goal_ends_with: String
  goal_not_ends_with: String
  goalStatus: String
  goalStatus_not: String
  goalStatus_in: [String!]
  goalStatus_not_in: [String!]
  goalStatus_lt: String
  goalStatus_lte: String
  goalStatus_gt: String
  goalStatus_gte: String
  goalStatus_contains: String
  goalStatus_not_contains: String
  goalStatus_starts_with: String
  goalStatus_not_starts_with: String
  goalStatus_ends_with: String
  goalStatus_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  locationID: String
  locationID_not: String
  locationID_in: [String!]
  locationID_not_in: [String!]
  locationID_lt: String
  locationID_lte: String
  locationID_gt: String
  locationID_gte: String
  locationID_contains: String
  locationID_not_contains: String
  locationID_starts_with: String
  locationID_not_starts_with: String
  locationID_ends_with: String
  locationID_not_ends_with: String
  locationLat: Float
  locationLat_not: Float
  locationLat_in: [Float!]
  locationLat_not_in: [Float!]
  locationLat_lt: Float
  locationLat_lte: Float
  locationLat_gt: Float
  locationLat_gte: Float
  locationLon: Float
  locationLon_not: Float
  locationLon_in: [Float!]
  locationLon_not_in: [Float!]
  locationLon_lt: Float
  locationLon_lte: Float
  locationLon_gt: Float
  locationLon_gte: Float
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  video: String
  video_not: String
  video_in: [String!]
  video_not_in: [String!]
  video_lt: String
  video_lte: String
  video_gt: String
  video_gte: String
  video_contains: String
  video_not_contains: String
  video_starts_with: String
  video_not_starts_with: String
  video_ends_with: String
  video_not_ends_with: String
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  likedByMe: Boolean
  likedByMe_not: Boolean
  commentsCount: Int
  commentsCount_not: Int
  commentsCount_in: [Int!]
  commentsCount_not_in: [Int!]
  commentsCount_lt: Int
  commentsCount_lte: Int
  commentsCount_gt: Int
  commentsCount_gte: Int
  sharesCount: Int
  sharesCount_not: Int
  sharesCount_in: [Int!]
  sharesCount_not_in: [Int!]
  sharesCount_lt: Int
  sharesCount_lte: Int
  sharesCount_gt: Int
  sharesCount_gte: Int
  _deleted: Boolean
  _deleted_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateimagesInput {
  set: [String!]
}

input PostUpdateInput {
  lastUpdated: DateTime
  owner: UserUpdateOneRequiredWithoutPostsInput
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicUpdateOneInput
  topics: TopicUpdateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String
  images: PostUpdateimagesInput
  video: String
  comments: CommentUpdateManyWithoutParentPostInput
  updates: UpdateUpdateManyWithoutParentPostInput
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationUpdateManyWithoutPostInput
  views: UserUpdateManyInput
  _deleted: Boolean
}

input PostUpdateManyDataInput {
  lastUpdated: DateTime
  isGoal: Boolean
  goal: String
  goalStatus: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String
  images: PostUpdateimagesInput
  video: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  _deleted: Boolean
}

input PostUpdateManyMutationInput {
  lastUpdated: DateTime
  isGoal: Boolean
  goal: String
  goalStatus: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String
  images: PostUpdateimagesInput
  video: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  _deleted: Boolean
}

input PostUpdateManyWithoutOwnerInput {
  create: [PostCreateWithoutOwnerInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutUpdatesInput {
  create: PostCreateWithoutUpdatesInput
  update: PostUpdateWithoutUpdatesDataInput
  upsert: PostUpsertWithoutUpdatesInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutNotificationsInput {
  create: PostCreateWithoutNotificationsInput
  update: PostUpdateWithoutNotificationsDataInput
  upsert: PostUpsertWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutCommentsDataInput {
  lastUpdated: DateTime
  owner: UserUpdateOneRequiredWithoutPostsInput
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicUpdateOneInput
  topics: TopicUpdateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String
  images: PostUpdateimagesInput
  video: String
  updates: UpdateUpdateManyWithoutParentPostInput
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationUpdateManyWithoutPostInput
  views: UserUpdateManyInput
  _deleted: Boolean
}

input PostUpdateWithoutNotificationsDataInput {
  lastUpdated: DateTime
  owner: UserUpdateOneRequiredWithoutPostsInput
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicUpdateOneInput
  topics: TopicUpdateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String
  images: PostUpdateimagesInput
  video: String
  comments: CommentUpdateManyWithoutParentPostInput
  updates: UpdateUpdateManyWithoutParentPostInput
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  views: UserUpdateManyInput
  _deleted: Boolean
}

input PostUpdateWithoutOwnerDataInput {
  lastUpdated: DateTime
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicUpdateOneInput
  topics: TopicUpdateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String
  images: PostUpdateimagesInput
  video: String
  comments: CommentUpdateManyWithoutParentPostInput
  updates: UpdateUpdateManyWithoutParentPostInput
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationUpdateManyWithoutPostInput
  views: UserUpdateManyInput
  _deleted: Boolean
}

input PostUpdateWithoutUpdatesDataInput {
  lastUpdated: DateTime
  owner: UserUpdateOneRequiredWithoutPostsInput
  isGoal: Boolean
  goal: String
  goalStatus: String
  subField: TopicUpdateOneInput
  topics: TopicUpdateManyInput
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  content: String
  images: PostUpdateimagesInput
  video: String
  comments: CommentUpdateManyWithoutParentPostInput
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationUpdateManyWithoutPostInput
  views: UserUpdateManyInput
  _deleted: Boolean
}

input PostUpdateWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutOwnerDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutNotificationsInput {
  update: PostUpdateWithoutNotificationsDataInput!
  create: PostCreateWithoutNotificationsInput!
}

input PostUpsertWithoutUpdatesInput {
  update: PostUpdateWithoutUpdatesDataInput!
  create: PostCreateWithoutUpdatesInput!
}

input PostUpsertWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutOwnerDataInput!
  create: PostCreateWithoutOwnerInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastUpdated: DateTime
  lastUpdated_not: DateTime
  lastUpdated_in: [DateTime!]
  lastUpdated_not_in: [DateTime!]
  lastUpdated_lt: DateTime
  lastUpdated_lte: DateTime
  lastUpdated_gt: DateTime
  lastUpdated_gte: DateTime
  owner: UserWhereInput
  isGoal: Boolean
  isGoal_not: Boolean
  goal: String
  goal_not: String
  goal_in: [String!]
  goal_not_in: [String!]
  goal_lt: String
  goal_lte: String
  goal_gt: String
  goal_gte: String
  goal_contains: String
  goal_not_contains: String
  goal_starts_with: String
  goal_not_starts_with: String
  goal_ends_with: String
  goal_not_ends_with: String
  goalStatus: String
  goalStatus_not: String
  goalStatus_in: [String!]
  goalStatus_not_in: [String!]
  goalStatus_lt: String
  goalStatus_lte: String
  goalStatus_gt: String
  goalStatus_gte: String
  goalStatus_contains: String
  goalStatus_not_contains: String
  goalStatus_starts_with: String
  goalStatus_not_starts_with: String
  goalStatus_ends_with: String
  goalStatus_not_ends_with: String
  subField: TopicWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  locationID: String
  locationID_not: String
  locationID_in: [String!]
  locationID_not_in: [String!]
  locationID_lt: String
  locationID_lte: String
  locationID_gt: String
  locationID_gte: String
  locationID_contains: String
  locationID_not_contains: String
  locationID_starts_with: String
  locationID_not_starts_with: String
  locationID_ends_with: String
  locationID_not_ends_with: String
  locationLat: Float
  locationLat_not: Float
  locationLat_in: [Float!]
  locationLat_not_in: [Float!]
  locationLat_lt: Float
  locationLat_lte: Float
  locationLat_gt: Float
  locationLat_gte: Float
  locationLon: Float
  locationLon_not: Float
  locationLon_in: [Float!]
  locationLon_not_in: [Float!]
  locationLon_lt: Float
  locationLon_lte: Float
  locationLon_gt: Float
  locationLon_gte: Float
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  video: String
  video_not: String
  video_in: [String!]
  video_not_in: [String!]
  video_lt: String
  video_lte: String
  video_gt: String
  video_gte: String
  video_contains: String
  video_not_contains: String
  video_starts_with: String
  video_not_starts_with: String
  video_ends_with: String
  video_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  updates_every: UpdateWhereInput
  updates_some: UpdateWhereInput
  updates_none: UpdateWhereInput
  likes_every: UserWhereInput
  likes_some: UserWhereInput
  likes_none: UserWhereInput
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  likedByMe: Boolean
  likedByMe_not: Boolean
  commentsCount: Int
  commentsCount_not: Int
  commentsCount_in: [Int!]
  commentsCount_not_in: [Int!]
  commentsCount_lt: Int
  commentsCount_lte: Int
  commentsCount_gt: Int
  commentsCount_gte: Int
  sharesCount: Int
  sharesCount_not: Int
  sharesCount_in: [Int!]
  sharesCount_not_in: [Int!]
  sharesCount_lt: Int
  sharesCount_lte: Int
  sharesCount_gt: Int
  sharesCount_gte: Int
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  views_every: UserWhereInput
  views_some: UserWhereInput
  views_none: UserWhereInput
  _deleted: Boolean
  _deleted_not: Boolean
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  education(where: EducationWhereUniqueInput!): Education
  educations(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education]!
  educationsConnection(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EducationConnection!
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiences(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Experience]!
  experiencesConnection(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExperienceConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  list(where: ListWhereUniqueInput!): List
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!
  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!
  meeting(where: MeetingWhereUniqueInput!): Meeting
  meetings(where: MeetingWhereInput, orderBy: MeetingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Meeting]!
  meetingsConnection(where: MeetingWhereInput, orderBy: MeetingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MeetingConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  skill(where: SkillWhereUniqueInput!): Skill
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill]!
  skillsConnection(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SkillConnection!
  story(where: StoryWhereUniqueInput!): Story
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story]!
  storiesConnection(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection!
  storyItem(where: StoryItemWhereUniqueInput!): StoryItem
  storyItems(where: StoryItemWhereInput, orderBy: StoryItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoryItem]!
  storyItemsConnection(where: StoryItemWhereInput, orderBy: StoryItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryItemConnection!
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  update(where: UpdateWhereUniqueInput!): Update
  updates(where: UpdateWhereInput, orderBy: UpdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Update]!
  updatesConnection(where: UpdateWhereInput, orderBy: UpdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UpdateConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  PRO
  USER
  BUSINESS
  SUSPENDED
}

type Skill {
  id: ID!
  owner: User!
  skill: String!
  isExpert: Boolean!
}

type SkillConnection {
  pageInfo: PageInfo!
  edges: [SkillEdge]!
  aggregate: AggregateSkill!
}

input SkillCreateInput {
  id: ID
  owner: UserCreateOneWithoutSkillsInput!
  skill: String!
  isExpert: Boolean
}

input SkillCreateManyWithoutOwnerInput {
  create: [SkillCreateWithoutOwnerInput!]
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateWithoutOwnerInput {
  id: ID
  skill: String!
  isExpert: Boolean
}

type SkillEdge {
  node: Skill!
  cursor: String!
}

enum SkillOrderByInput {
  id_ASC
  id_DESC
  skill_ASC
  skill_DESC
  isExpert_ASC
  isExpert_DESC
}

type SkillPreviousValues {
  id: ID!
  skill: String!
  isExpert: Boolean!
}

input SkillScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  skill: String
  skill_not: String
  skill_in: [String!]
  skill_not_in: [String!]
  skill_lt: String
  skill_lte: String
  skill_gt: String
  skill_gte: String
  skill_contains: String
  skill_not_contains: String
  skill_starts_with: String
  skill_not_starts_with: String
  skill_ends_with: String
  skill_not_ends_with: String
  isExpert: Boolean
  isExpert_not: Boolean
  AND: [SkillScalarWhereInput!]
  OR: [SkillScalarWhereInput!]
  NOT: [SkillScalarWhereInput!]
}

type SkillSubscriptionPayload {
  mutation: MutationType!
  node: Skill
  updatedFields: [String!]
  previousValues: SkillPreviousValues
}

input SkillSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SkillWhereInput
  AND: [SkillSubscriptionWhereInput!]
  OR: [SkillSubscriptionWhereInput!]
  NOT: [SkillSubscriptionWhereInput!]
}

input SkillUpdateInput {
  owner: UserUpdateOneRequiredWithoutSkillsInput
  skill: String
  isExpert: Boolean
}

input SkillUpdateManyDataInput {
  skill: String
  isExpert: Boolean
}

input SkillUpdateManyMutationInput {
  skill: String
  isExpert: Boolean
}

input SkillUpdateManyWithoutOwnerInput {
  create: [SkillCreateWithoutOwnerInput!]
  delete: [SkillWhereUniqueInput!]
  connect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  disconnect: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [SkillScalarWhereInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
}

input SkillUpdateManyWithWhereNestedInput {
  where: SkillScalarWhereInput!
  data: SkillUpdateManyDataInput!
}

input SkillUpdateWithoutOwnerDataInput {
  skill: String
  isExpert: Boolean
}

input SkillUpdateWithWhereUniqueWithoutOwnerInput {
  where: SkillWhereUniqueInput!
  data: SkillUpdateWithoutOwnerDataInput!
}

input SkillUpsertWithWhereUniqueWithoutOwnerInput {
  where: SkillWhereUniqueInput!
  update: SkillUpdateWithoutOwnerDataInput!
  create: SkillCreateWithoutOwnerInput!
}

input SkillWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  skill: String
  skill_not: String
  skill_in: [String!]
  skill_not_in: [String!]
  skill_lt: String
  skill_lte: String
  skill_gt: String
  skill_gte: String
  skill_contains: String
  skill_not_contains: String
  skill_starts_with: String
  skill_not_starts_with: String
  skill_ends_with: String
  skill_not_ends_with: String
  isExpert: Boolean
  isExpert_not: Boolean
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
}

input SkillWhereUniqueInput {
  id: ID
}

type Story {
  id: ID!
  createdAt: DateTime!
  lastUpdated: DateTime!
  owner: User!
  title: String
  type: StoryType!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  items(where: StoryItemWhereInput, orderBy: StoryItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoryItem!]
  showcase: Boolean
}

type StoryConnection {
  pageInfo: PageInfo!
  edges: [StoryEdge]!
  aggregate: AggregateStory!
}

input StoryCreateInput {
  id: ID
  lastUpdated: DateTime!
  owner: UserCreateOneWithoutStoriesInput!
  title: String
  type: StoryType!
  topics: TopicCreateManyInput
  items: StoryItemCreateManyWithoutStoriesInput
  showcase: Boolean
}

input StoryCreateManyWithoutItemsInput {
  create: [StoryCreateWithoutItemsInput!]
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateManyWithoutOwnerInput {
  create: [StoryCreateWithoutOwnerInput!]
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateOneInput {
  create: StoryCreateInput
  connect: StoryWhereUniqueInput
}

input StoryCreateWithoutItemsInput {
  id: ID
  lastUpdated: DateTime!
  owner: UserCreateOneWithoutStoriesInput!
  title: String
  type: StoryType!
  topics: TopicCreateManyInput
  showcase: Boolean
}

input StoryCreateWithoutOwnerInput {
  id: ID
  lastUpdated: DateTime!
  title: String
  type: StoryType!
  topics: TopicCreateManyInput
  items: StoryItemCreateManyWithoutStoriesInput
  showcase: Boolean
}

type StoryEdge {
  node: Story!
  cursor: String!
}

type StoryItem {
  id: ID!
  createdAt: DateTime!
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story!]
  type: StoryItemType!
  url: String!
  preview: String!
  link: String
  text: String
  duration: Float
  inProject: Boolean
  likes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  likesCount: Int
  likedByMe: Boolean
  views(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  viewedByMe: Boolean
  plays: Int!
}

type StoryItemConnection {
  pageInfo: PageInfo!
  edges: [StoryItemEdge]!
  aggregate: AggregateStoryItem!
}

input StoryItemCreateInput {
  id: ID
  stories: StoryCreateManyWithoutItemsInput
  type: StoryItemType!
  url: String!
  preview: String!
  link: String
  text: String
  duration: Float
  inProject: Boolean
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  views: UserCreateManyInput
  viewedByMe: Boolean
  plays: Int
}

input StoryItemCreateManyWithoutStoriesInput {
  create: [StoryItemCreateWithoutStoriesInput!]
  connect: [StoryItemWhereUniqueInput!]
}

input StoryItemCreateWithoutStoriesInput {
  id: ID
  type: StoryItemType!
  url: String!
  preview: String!
  link: String
  text: String
  duration: Float
  inProject: Boolean
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  views: UserCreateManyInput
  viewedByMe: Boolean
  plays: Int
}

type StoryItemEdge {
  node: StoryItem!
  cursor: String!
}

enum StoryItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  preview_ASC
  preview_DESC
  link_ASC
  link_DESC
  text_ASC
  text_DESC
  duration_ASC
  duration_DESC
  inProject_ASC
  inProject_DESC
  likesCount_ASC
  likesCount_DESC
  likedByMe_ASC
  likedByMe_DESC
  viewedByMe_ASC
  viewedByMe_DESC
  plays_ASC
  plays_DESC
}

type StoryItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: StoryItemType!
  url: String!
  preview: String!
  link: String
  text: String
  duration: Float
  inProject: Boolean
  likesCount: Int
  likedByMe: Boolean
  viewedByMe: Boolean
  plays: Int!
}

input StoryItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: StoryItemType
  type_not: StoryItemType
  type_in: [StoryItemType!]
  type_not_in: [StoryItemType!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  preview: String
  preview_not: String
  preview_in: [String!]
  preview_not_in: [String!]
  preview_lt: String
  preview_lte: String
  preview_gt: String
  preview_gte: String
  preview_contains: String
  preview_not_contains: String
  preview_starts_with: String
  preview_not_starts_with: String
  preview_ends_with: String
  preview_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  duration: Float
  duration_not: Float
  duration_in: [Float!]
  duration_not_in: [Float!]
  duration_lt: Float
  duration_lte: Float
  duration_gt: Float
  duration_gte: Float
  inProject: Boolean
  inProject_not: Boolean
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  likedByMe: Boolean
  likedByMe_not: Boolean
  viewedByMe: Boolean
  viewedByMe_not: Boolean
  plays: Int
  plays_not: Int
  plays_in: [Int!]
  plays_not_in: [Int!]
  plays_lt: Int
  plays_lte: Int
  plays_gt: Int
  plays_gte: Int
  AND: [StoryItemScalarWhereInput!]
  OR: [StoryItemScalarWhereInput!]
  NOT: [StoryItemScalarWhereInput!]
}

type StoryItemSubscriptionPayload {
  mutation: MutationType!
  node: StoryItem
  updatedFields: [String!]
  previousValues: StoryItemPreviousValues
}

input StoryItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StoryItemWhereInput
  AND: [StoryItemSubscriptionWhereInput!]
  OR: [StoryItemSubscriptionWhereInput!]
  NOT: [StoryItemSubscriptionWhereInput!]
}

enum StoryItemType {
  IMAGE
  VIDEO
}

input StoryItemUpdateInput {
  stories: StoryUpdateManyWithoutItemsInput
  type: StoryItemType
  url: String
  preview: String
  link: String
  text: String
  duration: Float
  inProject: Boolean
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  views: UserUpdateManyInput
  viewedByMe: Boolean
  plays: Int
}

input StoryItemUpdateManyDataInput {
  type: StoryItemType
  url: String
  preview: String
  link: String
  text: String
  duration: Float
  inProject: Boolean
  likesCount: Int
  likedByMe: Boolean
  viewedByMe: Boolean
  plays: Int
}

input StoryItemUpdateManyMutationInput {
  type: StoryItemType
  url: String
  preview: String
  link: String
  text: String
  duration: Float
  inProject: Boolean
  likesCount: Int
  likedByMe: Boolean
  viewedByMe: Boolean
  plays: Int
}

input StoryItemUpdateManyWithoutStoriesInput {
  create: [StoryItemCreateWithoutStoriesInput!]
  delete: [StoryItemWhereUniqueInput!]
  connect: [StoryItemWhereUniqueInput!]
  set: [StoryItemWhereUniqueInput!]
  disconnect: [StoryItemWhereUniqueInput!]
  update: [StoryItemUpdateWithWhereUniqueWithoutStoriesInput!]
  upsert: [StoryItemUpsertWithWhereUniqueWithoutStoriesInput!]
  deleteMany: [StoryItemScalarWhereInput!]
  updateMany: [StoryItemUpdateManyWithWhereNestedInput!]
}

input StoryItemUpdateManyWithWhereNestedInput {
  where: StoryItemScalarWhereInput!
  data: StoryItemUpdateManyDataInput!
}

input StoryItemUpdateWithoutStoriesDataInput {
  type: StoryItemType
  url: String
  preview: String
  link: String
  text: String
  duration: Float
  inProject: Boolean
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  views: UserUpdateManyInput
  viewedByMe: Boolean
  plays: Int
}

input StoryItemUpdateWithWhereUniqueWithoutStoriesInput {
  where: StoryItemWhereUniqueInput!
  data: StoryItemUpdateWithoutStoriesDataInput!
}

input StoryItemUpsertWithWhereUniqueWithoutStoriesInput {
  where: StoryItemWhereUniqueInput!
  update: StoryItemUpdateWithoutStoriesDataInput!
  create: StoryItemCreateWithoutStoriesInput!
}

input StoryItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  stories_every: StoryWhereInput
  stories_some: StoryWhereInput
  stories_none: StoryWhereInput
  type: StoryItemType
  type_not: StoryItemType
  type_in: [StoryItemType!]
  type_not_in: [StoryItemType!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  preview: String
  preview_not: String
  preview_in: [String!]
  preview_not_in: [String!]
  preview_lt: String
  preview_lte: String
  preview_gt: String
  preview_gte: String
  preview_contains: String
  preview_not_contains: String
  preview_starts_with: String
  preview_not_starts_with: String
  preview_ends_with: String
  preview_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  duration: Float
  duration_not: Float
  duration_in: [Float!]
  duration_not_in: [Float!]
  duration_lt: Float
  duration_lte: Float
  duration_gt: Float
  duration_gte: Float
  inProject: Boolean
  inProject_not: Boolean
  likes_every: UserWhereInput
  likes_some: UserWhereInput
  likes_none: UserWhereInput
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  likedByMe: Boolean
  likedByMe_not: Boolean
  views_every: UserWhereInput
  views_some: UserWhereInput
  views_none: UserWhereInput
  viewedByMe: Boolean
  viewedByMe_not: Boolean
  plays: Int
  plays_not: Int
  plays_in: [Int!]
  plays_not_in: [Int!]
  plays_lt: Int
  plays_lte: Int
  plays_gt: Int
  plays_gte: Int
  AND: [StoryItemWhereInput!]
  OR: [StoryItemWhereInput!]
  NOT: [StoryItemWhereInput!]
}

input StoryItemWhereUniqueInput {
  id: ID
}

enum StoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  lastUpdated_ASC
  lastUpdated_DESC
  title_ASC
  title_DESC
  type_ASC
  type_DESC
  showcase_ASC
  showcase_DESC
}

type StoryPreviousValues {
  id: ID!
  createdAt: DateTime!
  lastUpdated: DateTime!
  title: String
  type: StoryType!
  showcase: Boolean
}

input StoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastUpdated: DateTime
  lastUpdated_not: DateTime
  lastUpdated_in: [DateTime!]
  lastUpdated_not_in: [DateTime!]
  lastUpdated_lt: DateTime
  lastUpdated_lte: DateTime
  lastUpdated_gt: DateTime
  lastUpdated_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  type: StoryType
  type_not: StoryType
  type_in: [StoryType!]
  type_not_in: [StoryType!]
  showcase: Boolean
  showcase_not: Boolean
  AND: [StoryScalarWhereInput!]
  OR: [StoryScalarWhereInput!]
  NOT: [StoryScalarWhereInput!]
}

type StorySubscriptionPayload {
  mutation: MutationType!
  node: Story
  updatedFields: [String!]
  previousValues: StoryPreviousValues
}

input StorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StoryWhereInput
  AND: [StorySubscriptionWhereInput!]
  OR: [StorySubscriptionWhereInput!]
  NOT: [StorySubscriptionWhereInput!]
}

enum StoryType {
  INTRO
  MYSTORY
  PROJECT
  SOLO
}

input StoryUpdateDataInput {
  lastUpdated: DateTime
  owner: UserUpdateOneRequiredWithoutStoriesInput
  title: String
  type: StoryType
  topics: TopicUpdateManyInput
  items: StoryItemUpdateManyWithoutStoriesInput
  showcase: Boolean
}

input StoryUpdateInput {
  lastUpdated: DateTime
  owner: UserUpdateOneRequiredWithoutStoriesInput
  title: String
  type: StoryType
  topics: TopicUpdateManyInput
  items: StoryItemUpdateManyWithoutStoriesInput
  showcase: Boolean
}

input StoryUpdateManyDataInput {
  lastUpdated: DateTime
  title: String
  type: StoryType
  showcase: Boolean
}

input StoryUpdateManyMutationInput {
  lastUpdated: DateTime
  title: String
  type: StoryType
  showcase: Boolean
}

input StoryUpdateManyWithoutItemsInput {
  create: [StoryCreateWithoutItemsInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutItemsInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutItemsInput!]
  deleteMany: [StoryScalarWhereInput!]
  updateMany: [StoryUpdateManyWithWhereNestedInput!]
}

input StoryUpdateManyWithoutOwnerInput {
  create: [StoryCreateWithoutOwnerInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [StoryScalarWhereInput!]
  updateMany: [StoryUpdateManyWithWhereNestedInput!]
}

input StoryUpdateManyWithWhereNestedInput {
  where: StoryScalarWhereInput!
  data: StoryUpdateManyDataInput!
}

input StoryUpdateOneInput {
  create: StoryCreateInput
  update: StoryUpdateDataInput
  upsert: StoryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: StoryWhereUniqueInput
}

input StoryUpdateWithoutItemsDataInput {
  lastUpdated: DateTime
  owner: UserUpdateOneRequiredWithoutStoriesInput
  title: String
  type: StoryType
  topics: TopicUpdateManyInput
  showcase: Boolean
}

input StoryUpdateWithoutOwnerDataInput {
  lastUpdated: DateTime
  title: String
  type: StoryType
  topics: TopicUpdateManyInput
  items: StoryItemUpdateManyWithoutStoriesInput
  showcase: Boolean
}

input StoryUpdateWithWhereUniqueWithoutItemsInput {
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutItemsDataInput!
}

input StoryUpdateWithWhereUniqueWithoutOwnerInput {
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutOwnerDataInput!
}

input StoryUpsertNestedInput {
  update: StoryUpdateDataInput!
  create: StoryCreateInput!
}

input StoryUpsertWithWhereUniqueWithoutItemsInput {
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutItemsDataInput!
  create: StoryCreateWithoutItemsInput!
}

input StoryUpsertWithWhereUniqueWithoutOwnerInput {
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutOwnerDataInput!
  create: StoryCreateWithoutOwnerInput!
}

input StoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastUpdated: DateTime
  lastUpdated_not: DateTime
  lastUpdated_in: [DateTime!]
  lastUpdated_not_in: [DateTime!]
  lastUpdated_lt: DateTime
  lastUpdated_lte: DateTime
  lastUpdated_gt: DateTime
  lastUpdated_gte: DateTime
  owner: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  type: StoryType
  type_not: StoryType
  type_in: [StoryType!]
  type_not_in: [StoryType!]
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  items_every: StoryItemWhereInput
  items_some: StoryItemWhereInput
  items_none: StoryItemWhereInput
  showcase: Boolean
  showcase_not: Boolean
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
}

input StoryWhereUniqueInput {
  id: ID
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  education(where: EducationSubscriptionWhereInput): EducationSubscriptionPayload
  experience(where: ExperienceSubscriptionWhereInput): ExperienceSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload
  meeting(where: MeetingSubscriptionWhereInput): MeetingSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  skill(where: SkillSubscriptionWhereInput): SkillSubscriptionPayload
  story(where: StorySubscriptionWhereInput): StorySubscriptionPayload
  storyItem(where: StoryItemSubscriptionWhereInput): StoryItemSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  update(where: UpdateSubscriptionWhereInput): UpdateSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Topic {
  id: ID!
  topicID: String!
  name: String!
  parentList: List
  parentTopic: Topic
  children(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  order: Int
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  topicID: String!
  name: String!
  parentList: ListCreateOneWithoutMainTopicsInput
  parentTopic: TopicCreateOneWithoutChildrenInput
  children: TopicCreateManyWithoutParentTopicInput
  order: Int
}

input TopicCreateManyInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutParentListInput {
  create: [TopicCreateWithoutParentListInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutParentTopicInput {
  create: [TopicCreateWithoutParentTopicInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateOneInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutChildrenInput {
  create: TopicCreateWithoutChildrenInput
  connect: TopicWhereUniqueInput
}

input TopicCreateWithoutChildrenInput {
  id: ID
  topicID: String!
  name: String!
  parentList: ListCreateOneWithoutMainTopicsInput
  parentTopic: TopicCreateOneWithoutChildrenInput
  order: Int
}

input TopicCreateWithoutParentListInput {
  id: ID
  topicID: String!
  name: String!
  parentTopic: TopicCreateOneWithoutChildrenInput
  children: TopicCreateManyWithoutParentTopicInput
  order: Int
}

input TopicCreateWithoutParentTopicInput {
  id: ID
  topicID: String!
  name: String!
  parentList: ListCreateOneWithoutMainTopicsInput
  children: TopicCreateManyWithoutParentTopicInput
  order: Int
}

type TopicEdge {
  node: Topic!
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  topicID_ASC
  topicID_DESC
  name_ASC
  name_DESC
  order_ASC
  order_DESC
}

type TopicPreviousValues {
  id: ID!
  topicID: String!
  name: String!
  order: Int
}

input TopicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  topicID: String
  topicID_not: String
  topicID_in: [String!]
  topicID_not_in: [String!]
  topicID_lt: String
  topicID_lte: String
  topicID_gt: String
  topicID_gte: String
  topicID_contains: String
  topicID_not_contains: String
  topicID_starts_with: String
  topicID_not_starts_with: String
  topicID_ends_with: String
  topicID_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [TopicScalarWhereInput!]
  OR: [TopicScalarWhereInput!]
  NOT: [TopicScalarWhereInput!]
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
  AND: [TopicSubscriptionWhereInput!]
  OR: [TopicSubscriptionWhereInput!]
  NOT: [TopicSubscriptionWhereInput!]
}

input TopicUpdateDataInput {
  topicID: String
  name: String
  parentList: ListUpdateOneWithoutMainTopicsInput
  parentTopic: TopicUpdateOneWithoutChildrenInput
  children: TopicUpdateManyWithoutParentTopicInput
  order: Int
}

input TopicUpdateInput {
  topicID: String
  name: String
  parentList: ListUpdateOneWithoutMainTopicsInput
  parentTopic: TopicUpdateOneWithoutChildrenInput
  children: TopicUpdateManyWithoutParentTopicInput
  order: Int
}

input TopicUpdateManyDataInput {
  topicID: String
  name: String
  order: Int
}

input TopicUpdateManyInput {
  create: [TopicCreateInput!]
  update: [TopicUpdateWithWhereUniqueNestedInput!]
  upsert: [TopicUpsertWithWhereUniqueNestedInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyMutationInput {
  topicID: String
  name: String
  order: Int
}

input TopicUpdateManyWithoutParentListInput {
  create: [TopicCreateWithoutParentListInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutParentListInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutParentListInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutParentTopicInput {
  create: [TopicCreateWithoutParentTopicInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutParentTopicInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutParentTopicInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput!
  data: TopicUpdateManyDataInput!
}

input TopicUpdateOneInput {
  create: TopicCreateInput
  update: TopicUpdateDataInput
  upsert: TopicUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TopicWhereUniqueInput
}

input TopicUpdateOneWithoutChildrenInput {
  create: TopicCreateWithoutChildrenInput
  update: TopicUpdateWithoutChildrenDataInput
  upsert: TopicUpsertWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  connect: TopicWhereUniqueInput
}

input TopicUpdateWithoutChildrenDataInput {
  topicID: String
  name: String
  parentList: ListUpdateOneWithoutMainTopicsInput
  parentTopic: TopicUpdateOneWithoutChildrenInput
  order: Int
}

input TopicUpdateWithoutParentListDataInput {
  topicID: String
  name: String
  parentTopic: TopicUpdateOneWithoutChildrenInput
  children: TopicUpdateManyWithoutParentTopicInput
  order: Int
}

input TopicUpdateWithoutParentTopicDataInput {
  topicID: String
  name: String
  parentList: ListUpdateOneWithoutMainTopicsInput
  children: TopicUpdateManyWithoutParentTopicInput
  order: Int
}

input TopicUpdateWithWhereUniqueNestedInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateDataInput!
}

input TopicUpdateWithWhereUniqueWithoutParentListInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutParentListDataInput!
}

input TopicUpdateWithWhereUniqueWithoutParentTopicInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutParentTopicDataInput!
}

input TopicUpsertNestedInput {
  update: TopicUpdateDataInput!
  create: TopicCreateInput!
}

input TopicUpsertWithoutChildrenInput {
  update: TopicUpdateWithoutChildrenDataInput!
  create: TopicCreateWithoutChildrenInput!
}

input TopicUpsertWithWhereUniqueNestedInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateDataInput!
  create: TopicCreateInput!
}

input TopicUpsertWithWhereUniqueWithoutParentListInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutParentListDataInput!
  create: TopicCreateWithoutParentListInput!
}

input TopicUpsertWithWhereUniqueWithoutParentTopicInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutParentTopicDataInput!
  create: TopicCreateWithoutParentTopicInput!
}

input TopicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  topicID: String
  topicID_not: String
  topicID_in: [String!]
  topicID_not_in: [String!]
  topicID_lt: String
  topicID_lte: String
  topicID_gt: String
  topicID_gte: String
  topicID_contains: String
  topicID_not_contains: String
  topicID_starts_with: String
  topicID_not_starts_with: String
  topicID_ends_with: String
  topicID_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  parentList: ListWhereInput
  parentTopic: TopicWhereInput
  children_every: TopicWhereInput
  children_some: TopicWhereInput
  children_none: TopicWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
  topicID: String
}

type Update {
  id: ID!
  createdAt: DateTime!
  parentPost: Post!
  content: String!
  image: String
  likes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  likesCount: Int
  likedByMe: Boolean
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  commentsCount: Int
  sharesCount: Int
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  _deleted: Boolean
}

type UpdateConnection {
  pageInfo: PageInfo!
  edges: [UpdateEdge]!
  aggregate: AggregateUpdate!
}

input UpdateCreateInput {
  id: ID
  parentPost: PostCreateOneWithoutUpdatesInput!
  content: String!
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentCreateManyWithoutParentUpdateInput
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationCreateManyWithoutUpdateInput
  _deleted: Boolean
}

input UpdateCreateManyWithoutParentPostInput {
  create: [UpdateCreateWithoutParentPostInput!]
  connect: [UpdateWhereUniqueInput!]
}

input UpdateCreateOneWithoutCommentsInput {
  create: UpdateCreateWithoutCommentsInput
  connect: UpdateWhereUniqueInput
}

input UpdateCreateOneWithoutNotificationsInput {
  create: UpdateCreateWithoutNotificationsInput
  connect: UpdateWhereUniqueInput
}

input UpdateCreateWithoutCommentsInput {
  id: ID
  parentPost: PostCreateOneWithoutUpdatesInput!
  content: String!
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationCreateManyWithoutUpdateInput
  _deleted: Boolean
}

input UpdateCreateWithoutNotificationsInput {
  id: ID
  parentPost: PostCreateOneWithoutUpdatesInput!
  content: String!
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentCreateManyWithoutParentUpdateInput
  commentsCount: Int
  sharesCount: Int
  _deleted: Boolean
}

input UpdateCreateWithoutParentPostInput {
  id: ID
  content: String!
  image: String
  likes: UserCreateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentCreateManyWithoutParentUpdateInput
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationCreateManyWithoutUpdateInput
  _deleted: Boolean
}

type UpdateEdge {
  node: Update!
  cursor: String!
}

enum UpdateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
  image_ASC
  image_DESC
  likesCount_ASC
  likesCount_DESC
  likedByMe_ASC
  likedByMe_DESC
  commentsCount_ASC
  commentsCount_DESC
  sharesCount_ASC
  sharesCount_DESC
  _deleted_ASC
  _deleted_DESC
}

type UpdatePreviousValues {
  id: ID!
  createdAt: DateTime!
  content: String!
  image: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  _deleted: Boolean
}

input UpdateScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  likedByMe: Boolean
  likedByMe_not: Boolean
  commentsCount: Int
  commentsCount_not: Int
  commentsCount_in: [Int!]
  commentsCount_not_in: [Int!]
  commentsCount_lt: Int
  commentsCount_lte: Int
  commentsCount_gt: Int
  commentsCount_gte: Int
  sharesCount: Int
  sharesCount_not: Int
  sharesCount_in: [Int!]
  sharesCount_not_in: [Int!]
  sharesCount_lt: Int
  sharesCount_lte: Int
  sharesCount_gt: Int
  sharesCount_gte: Int
  _deleted: Boolean
  _deleted_not: Boolean
  AND: [UpdateScalarWhereInput!]
  OR: [UpdateScalarWhereInput!]
  NOT: [UpdateScalarWhereInput!]
}

type UpdateSubscriptionPayload {
  mutation: MutationType!
  node: Update
  updatedFields: [String!]
  previousValues: UpdatePreviousValues
}

input UpdateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UpdateWhereInput
  AND: [UpdateSubscriptionWhereInput!]
  OR: [UpdateSubscriptionWhereInput!]
  NOT: [UpdateSubscriptionWhereInput!]
}

input UpdateUpdateInput {
  parentPost: PostUpdateOneRequiredWithoutUpdatesInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentUpdateManyWithoutParentUpdateInput
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationUpdateManyWithoutUpdateInput
  _deleted: Boolean
}

input UpdateUpdateManyDataInput {
  content: String
  image: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  _deleted: Boolean
}

input UpdateUpdateManyMutationInput {
  content: String
  image: String
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  _deleted: Boolean
}

input UpdateUpdateManyWithoutParentPostInput {
  create: [UpdateCreateWithoutParentPostInput!]
  delete: [UpdateWhereUniqueInput!]
  connect: [UpdateWhereUniqueInput!]
  set: [UpdateWhereUniqueInput!]
  disconnect: [UpdateWhereUniqueInput!]
  update: [UpdateUpdateWithWhereUniqueWithoutParentPostInput!]
  upsert: [UpdateUpsertWithWhereUniqueWithoutParentPostInput!]
  deleteMany: [UpdateScalarWhereInput!]
  updateMany: [UpdateUpdateManyWithWhereNestedInput!]
}

input UpdateUpdateManyWithWhereNestedInput {
  where: UpdateScalarWhereInput!
  data: UpdateUpdateManyDataInput!
}

input UpdateUpdateOneWithoutCommentsInput {
  create: UpdateCreateWithoutCommentsInput
  update: UpdateUpdateWithoutCommentsDataInput
  upsert: UpdateUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UpdateWhereUniqueInput
}

input UpdateUpdateOneWithoutNotificationsInput {
  create: UpdateCreateWithoutNotificationsInput
  update: UpdateUpdateWithoutNotificationsDataInput
  upsert: UpdateUpsertWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  connect: UpdateWhereUniqueInput
}

input UpdateUpdateWithoutCommentsDataInput {
  parentPost: PostUpdateOneRequiredWithoutUpdatesInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationUpdateManyWithoutUpdateInput
  _deleted: Boolean
}

input UpdateUpdateWithoutNotificationsDataInput {
  parentPost: PostUpdateOneRequiredWithoutUpdatesInput
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentUpdateManyWithoutParentUpdateInput
  commentsCount: Int
  sharesCount: Int
  _deleted: Boolean
}

input UpdateUpdateWithoutParentPostDataInput {
  content: String
  image: String
  likes: UserUpdateManyInput
  likesCount: Int
  likedByMe: Boolean
  comments: CommentUpdateManyWithoutParentUpdateInput
  commentsCount: Int
  sharesCount: Int
  notifications: NotificationUpdateManyWithoutUpdateInput
  _deleted: Boolean
}

input UpdateUpdateWithWhereUniqueWithoutParentPostInput {
  where: UpdateWhereUniqueInput!
  data: UpdateUpdateWithoutParentPostDataInput!
}

input UpdateUpsertWithoutCommentsInput {
  update: UpdateUpdateWithoutCommentsDataInput!
  create: UpdateCreateWithoutCommentsInput!
}

input UpdateUpsertWithoutNotificationsInput {
  update: UpdateUpdateWithoutNotificationsDataInput!
  create: UpdateCreateWithoutNotificationsInput!
}

input UpdateUpsertWithWhereUniqueWithoutParentPostInput {
  where: UpdateWhereUniqueInput!
  update: UpdateUpdateWithoutParentPostDataInput!
  create: UpdateCreateWithoutParentPostInput!
}

input UpdateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  parentPost: PostWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  likes_every: UserWhereInput
  likes_some: UserWhereInput
  likes_none: UserWhereInput
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  likedByMe: Boolean
  likedByMe_not: Boolean
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  commentsCount: Int
  commentsCount_not: Int
  commentsCount_in: [Int!]
  commentsCount_not_in: [Int!]
  commentsCount_lt: Int
  commentsCount_lte: Int
  commentsCount_gt: Int
  commentsCount_gte: Int
  sharesCount: Int
  sharesCount_not: Int
  sharesCount_in: [Int!]
  sharesCount_not_in: [Int!]
  sharesCount_lt: Int
  sharesCount_lte: Int
  sharesCount_gt: Int
  sharesCount_gte: Int
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  _deleted: Boolean
  _deleted_not: Boolean
  AND: [UpdateWhereInput!]
  OR: [UpdateWhereInput!]
  NOT: [UpdateWhereInput!]
}

input UpdateWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  topicsFreelance(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  topicsInvest(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  topicsAgency(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  topicsFocus(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  topicsInterest(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill!]
  experience(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Experience!]
  education(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  connections(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: Story
  myStory: Story
  latestProject: Story
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story!]
  meetings(where: MeetingWhereInput, orderBy: MeetingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Meeting!]
  roles: [Role!]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  unReadMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  unReadMessagesCount: Int
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutConnectionsInput {
  create: [UserCreateWithoutConnectionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutMeetingsInput {
  create: [UserCreateWithoutMeetingsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEducationInput {
  create: UserCreateWithoutEducationInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutExperienceInput {
  create: UserCreateWithoutExperienceInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSkillsInput {
  create: UserCreateWithoutSkillsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStoriesInput {
  create: UserCreateWithoutStoriesInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [Role!]
}

input UserCreateWithoutConnectionsInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutEducationInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutExperienceInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutFollowersInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutFollowingInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutGroupsInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutMeetingsInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutNotificationsInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutSkillsInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  stories: StoryCreateManyWithoutOwnerInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

input UserCreateWithoutStoriesInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicCreateManyInput
  topicsFreelance: TopicCreateManyInput
  topicsInvest: TopicCreateManyInput
  topicsAgency: TopicCreateManyInput
  topicsFocus: TopicCreateManyInput
  topicsInterest: TopicCreateManyInput
  skills: SkillCreateManyWithoutOwnerInput
  experience: ExperienceCreateManyWithoutOwnerInput
  education: EducationCreateManyWithoutOwnerInput
  posts: PostCreateManyWithoutOwnerInput
  connections: UserCreateManyWithoutConnectionsInput
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryCreateOneInput
  myStory: StoryCreateOneInput
  latestProject: StoryCreateOneInput
  meetings: MeetingCreateManyWithoutUsersInput
  roles: UserCreaterolesInput
  groups: GroupCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutTargetInput
  unReadMessages: MessageCreateManyInput
  unReadMessagesCount: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  profilePic_ASC
  profilePic_DESC
  bannerPic_ASC
  bannerPic_DESC
  location_ASC
  location_DESC
  locationID_ASC
  locationID_DESC
  locationLat_ASC
  locationLat_DESC
  locationLon_ASC
  locationLon_DESC
  headline_ASC
  headline_DESC
  website_ASC
  website_DESC
  bio_ASC
  bio_DESC
  about_ASC
  about_DESC
  connectionsCount_ASC
  connectionsCount_DESC
  followingCount_ASC
  followingCount_DESC
  followersCount_ASC
  followersCount_DESC
  unReadMessagesCount_ASC
  unReadMessagesCount_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  roles: [Role!]!
  unReadMessagesCount: Int
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  bannerPic: String
  bannerPic_not: String
  bannerPic_in: [String!]
  bannerPic_not_in: [String!]
  bannerPic_lt: String
  bannerPic_lte: String
  bannerPic_gt: String
  bannerPic_gte: String
  bannerPic_contains: String
  bannerPic_not_contains: String
  bannerPic_starts_with: String
  bannerPic_not_starts_with: String
  bannerPic_ends_with: String
  bannerPic_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  locationID: String
  locationID_not: String
  locationID_in: [String!]
  locationID_not_in: [String!]
  locationID_lt: String
  locationID_lte: String
  locationID_gt: String
  locationID_gte: String
  locationID_contains: String
  locationID_not_contains: String
  locationID_starts_with: String
  locationID_not_starts_with: String
  locationID_ends_with: String
  locationID_not_ends_with: String
  locationLat: Float
  locationLat_not: Float
  locationLat_in: [Float!]
  locationLat_not_in: [Float!]
  locationLat_lt: Float
  locationLat_lte: Float
  locationLat_gt: Float
  locationLat_gte: Float
  locationLon: Float
  locationLon_not: Float
  locationLon_in: [Float!]
  locationLon_not_in: [Float!]
  locationLon_lt: Float
  locationLon_lte: Float
  locationLon_gt: Float
  locationLon_gte: Float
  headline: String
  headline_not: String
  headline_in: [String!]
  headline_not_in: [String!]
  headline_lt: String
  headline_lte: String
  headline_gt: String
  headline_gte: String
  headline_contains: String
  headline_not_contains: String
  headline_starts_with: String
  headline_not_starts_with: String
  headline_ends_with: String
  headline_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  connectionsCount: Int
  connectionsCount_not: Int
  connectionsCount_in: [Int!]
  connectionsCount_not_in: [Int!]
  connectionsCount_lt: Int
  connectionsCount_lte: Int
  connectionsCount_gt: Int
  connectionsCount_gte: Int
  followingCount: Int
  followingCount_not: Int
  followingCount_in: [Int!]
  followingCount_not_in: [Int!]
  followingCount_lt: Int
  followingCount_lte: Int
  followingCount_gt: Int
  followingCount_gte: Int
  followersCount: Int
  followersCount_not: Int
  followersCount_in: [Int!]
  followersCount_not_in: [Int!]
  followersCount_lt: Int
  followersCount_lte: Int
  followersCount_gt: Int
  followersCount_gte: Int
  unReadMessagesCount: Int
  unReadMessagesCount_not: Int
  unReadMessagesCount_in: [Int!]
  unReadMessagesCount_not_in: [Int!]
  unReadMessagesCount_lt: Int
  unReadMessagesCount_lte: Int
  unReadMessagesCount_gt: Int
  unReadMessagesCount_gte: Int
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateManyDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  roles: UserUpdaterolesInput
  unReadMessagesCount: Int
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  roles: UserUpdaterolesInput
  unReadMessagesCount: Int
}

input UserUpdateManyWithoutConnectionsInput {
  create: [UserCreateWithoutConnectionsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutConnectionsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutConnectionsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutMeetingsInput {
  create: [UserCreateWithoutMeetingsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMeetingsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMeetingsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEducationInput {
  create: UserCreateWithoutEducationInput
  update: UserUpdateWithoutEducationDataInput
  upsert: UserUpsertWithoutEducationInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutExperienceInput {
  create: UserCreateWithoutExperienceInput
  update: UserUpdateWithoutExperienceDataInput
  upsert: UserUpsertWithoutExperienceInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSkillsInput {
  create: UserCreateWithoutSkillsInput
  update: UserUpdateWithoutSkillsDataInput
  upsert: UserUpsertWithoutSkillsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutStoriesInput {
  create: UserCreateWithoutStoriesInput
  update: UserUpdateWithoutStoriesDataInput
  upsert: UserUpsertWithoutStoriesInput
  connect: UserWhereUniqueInput
}

input UserUpdaterolesInput {
  set: [Role!]
}

input UserUpdateWithoutConnectionsDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutEducationDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutExperienceDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutFollowersDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutFollowingDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutGroupsDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutMeetingsDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutNotificationsDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutPostsDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutSkillsDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  stories: StoryUpdateManyWithoutOwnerInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithoutStoriesDataInput {
  name: String
  firstName: String
  lastName: String
  email: String
  password: String
  profilePic: String
  bannerPic: String
  location: String
  locationID: String
  locationLat: Float
  locationLon: Float
  headline: String
  website: String
  bio: String
  about: String
  topicsMentor: TopicUpdateManyInput
  topicsFreelance: TopicUpdateManyInput
  topicsInvest: TopicUpdateManyInput
  topicsAgency: TopicUpdateManyInput
  topicsFocus: TopicUpdateManyInput
  topicsInterest: TopicUpdateManyInput
  skills: SkillUpdateManyWithoutOwnerInput
  experience: ExperienceUpdateManyWithoutOwnerInput
  education: EducationUpdateManyWithoutOwnerInput
  posts: PostUpdateManyWithoutOwnerInput
  connections: UserUpdateManyWithoutConnectionsInput
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  connectionsCount: Int
  followingCount: Int
  followersCount: Int
  intro: StoryUpdateOneInput
  myStory: StoryUpdateOneInput
  latestProject: StoryUpdateOneInput
  meetings: MeetingUpdateManyWithoutUsersInput
  roles: UserUpdaterolesInput
  groups: GroupUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutTargetInput
  unReadMessages: MessageUpdateManyInput
  unReadMessagesCount: Int
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutConnectionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutConnectionsDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpdateWithWhereUniqueWithoutMeetingsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMeetingsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutEducationInput {
  update: UserUpdateWithoutEducationDataInput!
  create: UserCreateWithoutEducationInput!
}

input UserUpsertWithoutExperienceInput {
  update: UserUpdateWithoutExperienceDataInput!
  create: UserCreateWithoutExperienceInput!
}

input UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput!
  create: UserCreateWithoutNotificationsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutSkillsInput {
  update: UserUpdateWithoutSkillsDataInput!
  create: UserCreateWithoutSkillsInput!
}

input UserUpsertWithoutStoriesInput {
  update: UserUpdateWithoutStoriesDataInput!
  create: UserCreateWithoutStoriesInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutConnectionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutConnectionsDataInput!
  create: UserCreateWithoutConnectionsInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserUpsertWithWhereUniqueWithoutMeetingsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMeetingsDataInput!
  create: UserCreateWithoutMeetingsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  bannerPic: String
  bannerPic_not: String
  bannerPic_in: [String!]
  bannerPic_not_in: [String!]
  bannerPic_lt: String
  bannerPic_lte: String
  bannerPic_gt: String
  bannerPic_gte: String
  bannerPic_contains: String
  bannerPic_not_contains: String
  bannerPic_starts_with: String
  bannerPic_not_starts_with: String
  bannerPic_ends_with: String
  bannerPic_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  locationID: String
  locationID_not: String
  locationID_in: [String!]
  locationID_not_in: [String!]
  locationID_lt: String
  locationID_lte: String
  locationID_gt: String
  locationID_gte: String
  locationID_contains: String
  locationID_not_contains: String
  locationID_starts_with: String
  locationID_not_starts_with: String
  locationID_ends_with: String
  locationID_not_ends_with: String
  locationLat: Float
  locationLat_not: Float
  locationLat_in: [Float!]
  locationLat_not_in: [Float!]
  locationLat_lt: Float
  locationLat_lte: Float
  locationLat_gt: Float
  locationLat_gte: Float
  locationLon: Float
  locationLon_not: Float
  locationLon_in: [Float!]
  locationLon_not_in: [Float!]
  locationLon_lt: Float
  locationLon_lte: Float
  locationLon_gt: Float
  locationLon_gte: Float
  headline: String
  headline_not: String
  headline_in: [String!]
  headline_not_in: [String!]
  headline_lt: String
  headline_lte: String
  headline_gt: String
  headline_gte: String
  headline_contains: String
  headline_not_contains: String
  headline_starts_with: String
  headline_not_starts_with: String
  headline_ends_with: String
  headline_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  topicsMentor_every: TopicWhereInput
  topicsMentor_some: TopicWhereInput
  topicsMentor_none: TopicWhereInput
  topicsFreelance_every: TopicWhereInput
  topicsFreelance_some: TopicWhereInput
  topicsFreelance_none: TopicWhereInput
  topicsInvest_every: TopicWhereInput
  topicsInvest_some: TopicWhereInput
  topicsInvest_none: TopicWhereInput
  topicsAgency_every: TopicWhereInput
  topicsAgency_some: TopicWhereInput
  topicsAgency_none: TopicWhereInput
  topicsFocus_every: TopicWhereInput
  topicsFocus_some: TopicWhereInput
  topicsFocus_none: TopicWhereInput
  topicsInterest_every: TopicWhereInput
  topicsInterest_some: TopicWhereInput
  topicsInterest_none: TopicWhereInput
  skills_every: SkillWhereInput
  skills_some: SkillWhereInput
  skills_none: SkillWhereInput
  experience_every: ExperienceWhereInput
  experience_some: ExperienceWhereInput
  experience_none: ExperienceWhereInput
  education_every: EducationWhereInput
  education_some: EducationWhereInput
  education_none: EducationWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  connections_every: UserWhereInput
  connections_some: UserWhereInput
  connections_none: UserWhereInput
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  connectionsCount: Int
  connectionsCount_not: Int
  connectionsCount_in: [Int!]
  connectionsCount_not_in: [Int!]
  connectionsCount_lt: Int
  connectionsCount_lte: Int
  connectionsCount_gt: Int
  connectionsCount_gte: Int
  followingCount: Int
  followingCount_not: Int
  followingCount_in: [Int!]
  followingCount_not_in: [Int!]
  followingCount_lt: Int
  followingCount_lte: Int
  followingCount_gt: Int
  followingCount_gte: Int
  followersCount: Int
  followersCount_not: Int
  followersCount_in: [Int!]
  followersCount_not_in: [Int!]
  followersCount_lt: Int
  followersCount_lte: Int
  followersCount_gt: Int
  followersCount_gte: Int
  intro: StoryWhereInput
  myStory: StoryWhereInput
  latestProject: StoryWhereInput
  stories_every: StoryWhereInput
  stories_some: StoryWhereInput
  stories_none: StoryWhereInput
  meetings_every: MeetingWhereInput
  meetings_some: MeetingWhereInput
  meetings_none: MeetingWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  unReadMessages_every: MessageWhereInput
  unReadMessages_some: MessageWhereInput
  unReadMessages_none: MessageWhereInput
  unReadMessagesCount: Int
  unReadMessagesCount_not: Int
  unReadMessagesCount_in: [Int!]
  unReadMessagesCount_not_in: [Int!]
  unReadMessagesCount_lt: Int
  unReadMessagesCount_lte: Int
  unReadMessagesCount_gt: Int
  unReadMessagesCount_gte: Int
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
